trigger:
  branches:
    include:
      - master
      - release/beta/*
      - release/stable/*
      - feature/*

pr: 
  branches:
    include:
      - master
      - release/beta/*
      - release/stable/*

variables:
  # Image names
  windowsVMImage: 'windows-2019'
  linuxVMImage: 'ubuntu-16.04'
  macOSVMImage: 'macOS-10.15'

  # Nuget Version to use
  NUGET_VERSION: 5.4.0
  
  # Solution to build
  SolutionFileName: Uno.Material.sln

  # name of the folder where artefacts will be placed. Variable used in build and release phases.
  # We make seperate folders so that releases can each download only the folder they need.
  NugetPackagesArtifactName: Packages
  AndroidArtifactName: Android
  iOSArtifactName: iOS
  UWPArtifactName: UWP

  # Path where packages (nuget or app packages) will be copied to.
  PackageOutputPath: $(Build.ArtifactStagingDirectory)
  
  # For Application.Building.Light optimizations
  IsLightBuild: $[eq(variables['Build.Reason'], 'PullRequest')] 

  # Android configurations
  ANDROID_NDK_HOME: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  ANDROID_NDK_PATH: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  AndroidNdkDirectory: C:\Microsoft\AndroidNDK64\android-ndk-r16b
  
  # Optional, specifiy xcode and xamarin versions. See ios-build-select-version.yml if needed.
  # xCodeRoot: '/Applications/Xcode_11.3.app'
  # XamarinSDKVersion: 6_6_0

stages:
- stage: Build
  jobs:
  - job: Build_on_Windows # Build samples possible on a windows machine and nuget packages
    strategy:
      maxParallel: 3
      matrix:
        Android:
          ApplicationConfiguration: Release
          ApplicationPlatform: Android
          ArtifactName: $(AndroidArtifactName)
        UWP:
          ApplicationConfiguration: Release
          ApplicationPlatform: UWP_x64
          ArtifactName: $(UWPArtifactName)
        Packages:
          ApplicationConfiguration: Release
          ApplicationPlatform: Packages
          GeneratePackageOnBuild: true
          ArtifactName: $(NugetPackagesArtifactName)
    pool:
      vmImage: $(windowsVMImage)

    steps:
      - template: build/stage-build.yml

  - job: Build_on_Mac # Build iOS samples
    strategy:
      maxParallel: 3
      matrix:
        iOS:
          ApplicationConfiguration: Release
          ApplicationPlatform: iPhone
          ArtifactName: $(iOSArtifactName)
    pool:
      vmImage: $(macOSVMImage)
      
    variables:
      - name: SkipUnknownFrameworks
        value: true # Used by TargetFrameworks.Filtering package to build only what's possible on a mac for the multitargeted library
      - group: apple.appstore.distribution # import all variables for certificate from the library in azure devops

    steps:
    - task: InstallAppleCertificate@2
      displayName: Install Apple Certificate
      inputs:
        certSecureFile: 'apple.appstore.distribution.p12' # Certificate located in the Library's secure files
        certPwd: '$(appleappstorecertificatepassword)' # password in Library's Variable group
        keychain: 'temp'
        deleteCert: true
    
    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install Apple Provisioning Profile'
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: UnoMaterial.mobileprovision # Located in the Library's secure files
        
    - template: build/stage-build.yml


- stage: Release
  # Only release when the build is not for a Pull Request.
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: Publish_NuGet_Internal
  
    pool:
      vmImage: $(windowsVMImage)

    steps:
    - template: build/stage-release.yml
    
  - job: Publish_iOS_TestFlight

    pool:
      vmImage: $(macOSVMImage)
    
    variables:
       - group: apple.appstore.distribution # import all variables for certificate from the library in azure devops
    
    steps:
    - template: build/stage-release-testflight.yml


