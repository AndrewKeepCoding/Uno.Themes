<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d not_win android ios not_ios wasm xamarin skia contract4NotPresent contract7NotPresent macos" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:um="using:Uno.Material" xmlns:toolkit="using:Uno.UI.Toolkit" xmlns:not_win="http://uno.ui/not_win" xmlns:uno="using:Uno.UI.Xaml.Controls" xmlns:android="http://uno.ui/android" xmlns:ios="http://uno.ui/ios" xmlns:not_ios="http://uno.ui/not_ios" xmlns:wasm="http://uno.ui/wasm" xmlns:xamarin="http://uno.ui/xamarin" xmlns:media="using:Microsoft.UI.Xaml.Media" xmlns:controls="using:Microsoft.UI.Xaml.Controls" xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives" xmlns:skia="http://uno.ui/skia" xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:contract4NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,4)" xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:macos="http://uno.ui/macos" xmlns:not_macos="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:not_android="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <ResourceDictionary.MergedDictionaries>
    <um:MaterialFonts />
    <um:MaterialColorsV2 />
  </ResourceDictionary.MergedDictionaries>
  <ResourceDictionary.ThemeDictionaries>
    <ResourceDictionary x:Key="Default">
      <StaticResource x:Key="M3MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewExpandedPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewTopPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundPointerOver" ResourceKey="OnSurfaceHoverBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="OnSecondaryContainerHoverBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForeground" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundChecked" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForeground" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
    <ResourceDictionary x:Key="Light">
      <StaticResource x:Key="M3MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewExpandedPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewTopPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundPointerOver" ResourceKey="OnSurfaceHoverBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="OnSecondaryContainerHoverBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForeground" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForeground" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
    <ResourceDictionary x:Key="HighContrast">
      <StaticResource x:Key="M3MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewExpandedPaneBackground" ResourceKey="SystemColorWindowColor" />
      <StaticResource x:Key="M3MaterialNavigationViewTopPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundPointerOver" ResourceKey="OnSurfaceHoverBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="OnSecondaryContainerHoverBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForeground" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForeground" ResourceKey="M3MaterialNavigationViewItemForeground" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="M3MaterialTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="M3MaterialNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
  </ResourceDictionary.ThemeDictionaries>
  <!--origin: Styles\Controls\v2\Button.xaml-->
  <um:FromNullToValueConverter x:Key="M3MaterialNullToTextButtonMarginConverter" NotNullValue="0,0,2,0" NullValue="0" />
  <x:Double x:Key="M3MaterialButtonMinHeight">40</x:Double>
  <x:Double x:Key="M3MaterialButtonMinWidth">48</x:Double>
  <Thickness x:Key="M3MaterialButtonPadding">16,0</Thickness>
  <Thickness x:Key="M3MaterialTextButtonPadding">12,0</Thickness>
  <CornerRadius x:Key="M3MaterialButtonCornerRadius">20</CornerRadius>
  <x:Double x:Key="M3MaterialButtonFontSize">14</x:Double>
  <x:Double x:Key="M3MaterialButtonCharacterSpacing">7.143</x:Double>
  <Style x:Key="M3MaterialElevatedButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <!--Start: Label Large Typo-->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialButtonFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialButtonCharacterSpacing}" />
    <!--End: Label Large Typo-->
    <Setter Property="MinHeight" Value="{StaticResource M3MaterialButtonMinHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialButtonMinWidth}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{StaticResource M3MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource M3MaterialButtonCornerRadius}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,0,1" Elevation="1" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ElevatedView.Margin" Value="0" />
                    <Setter Target="ElevatedView.Elevation" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
              <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                <um:Ripple.Content>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Grid>
                </um:Ripple.Content>
              </um:Ripple>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialFilledButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <!--Start: Label Large Typo-->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialButtonFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialButtonCharacterSpacing}" />
    <!--End: Label Large Typo-->
    <Setter Property="MinHeight" Value="{StaticResource M3MaterialButtonMinHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialButtonMinWidth}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{StaticResource M3MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource M3MaterialButtonCornerRadius}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <toolkit:ElevatedView x:Name="ElevatedView" Margin="0" Elevation="0" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
              <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                <um:Ripple.Content>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Grid>
                </um:Ripple.Content>
              </um:Ripple>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialFilledTonalButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSecondaryContainerBrush}" />
    <Setter Property="Background" Value="{StaticResource SecondaryContainerBrush}" />
    <!--Start: Label Large Typo-->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialButtonFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialButtonCharacterSpacing}" />
    <!--End: Label Large Typo-->
    <Setter Property="MinHeight" Value="{StaticResource M3MaterialButtonMinHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialButtonMinWidth}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{StaticResource M3MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource M3MaterialButtonCornerRadius}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <toolkit:ElevatedView x:Name="ElevatedView" Margin="0" Elevation="0" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
              <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                <um:Ripple.Content>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Grid>
                </um:Ripple.Content>
              </um:Ripple>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialOutlinedButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <!--Start: Label Large Typo-->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialButtonFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialButtonCharacterSpacing}" />
    <!--End: Label Large Typo-->
    <Setter Property="MinHeight" Value="{StaticResource M3MaterialButtonMinHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialButtonMinWidth}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="Padding" Value="{StaticResource M3MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource M3MaterialButtonCornerRadius}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="Root.BorderThickness" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
            <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                  <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialTextButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <!--Start: Label Large Typo-->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialButtonFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialButtonCharacterSpacing}" />
    <!--End: Label Large Typo-->
    <Setter Property="MinHeight" Value="{StaticResource M3MaterialButtonMinHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialButtonMinWidth}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{StaticResource M3MaterialTextButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource M3MaterialButtonCornerRadius}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
            <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" Margin="0,0,8,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                  <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource M3MaterialNullToTextButtonMarginConverter}, FallbackValue=0, TargetNullValue=0}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialIconButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Ellipse for PointedOver State -->
            <Ellipse x:Name="HoverOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryHoverBrush}" Opacity="0" />
            <!-- Ellipse for Pressed State -->
            <Ellipse x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryPressedBrush}" Opacity="0" />
            <!-- Ellipse for Focused State -->
            <Ellipse x:Name="FocusedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryFocusedBrush}" Opacity="0" />
            <!-- Content -->
            <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\CalendarDatePicker.xaml-->
  <Style x:Key="DefaultM3MaterialCalendarDatePickerStyle" TargetType="CalendarDatePicker">
    <Setter Property="Foreground" Value="{ThemeResource CalendarDatePickerForeground}" />
    <Setter Property="Background" Value="{ThemeResource CalendarDatePickerBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource CalendarDatePickerBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource CalendarDatePickerBorderThemeThickness}" />
    <Setter Property="CalendarViewStyle" Value="{StaticResource M3MaterialCalendarViewStyle}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Height" Value="53" />
    <Setter Property="UseSystemFocusVisuals" Value="{ThemeResource IsApplicationFocusVisualKindReveal}" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarDatePicker">
          <Grid x:Name="Root" Height="{TemplateBinding Height}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerHeaderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DateText" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerTextForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarGlyph" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerCalendarGlyphForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DateText" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerTextForegroundSelected}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="TopHeader" />
                <VisualState x:Name="LeftHeader">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.(Grid.Row)" Value="1" />
                    <Setter Target="HeaderContentPresenter.(Grid.Column)" Value="0" />
                    <Setter Target="HeaderContentPresenter.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="HeaderContentPresenter.Margin" Value="{StaticResource CalendarDatePickerLeftHeaderMargin}" />
                    <Setter Target="HeaderContentPresenter.MaxWidth" Value="{StaticResource CalendarDatePickerLeftHeaderMaxWidth}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <FlyoutBase.AttachedFlyout>
              <Flyout Placement="Bottom" ShouldConstrainToRootBounds="False">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="IsDefaultShadowEnabled" Value="True" />
                    <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ContentPresenter Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{TemplateBinding CornerRadius}" />
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <CalendarView x:Name="CalendarView" Style="{TemplateBinding CalendarViewStyle}" MinDate="{TemplateBinding MinDate}" MaxDate="{TemplateBinding MaxDate}" IsTodayHighlighted="{TemplateBinding IsTodayHighlighted}" DisplayMode="{TemplateBinding DisplayMode}" FirstDayOfWeek="{TemplateBinding FirstDayOfWeek}" DayOfWeekFormat="{TemplateBinding DayOfWeekFormat}" IsOutOfScopeEnabled="{TemplateBinding IsOutOfScopeEnabled}" IsGroupLabelVisible="{TemplateBinding IsGroupLabelVisible}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
              </Flyout>
            </FlyoutBase.AttachedFlyout>
            <Border x:Name="Background" Background="{StaticResource OnSurfaceBrush}" CornerRadius="4,4,0,0" Control.IsTemplateFocusTarget="True" MinHeight="53" />
            <!-- Border -->
            <Rectangle x:Name="BottomBorder" VerticalAlignment="Bottom" Fill="{StaticResource PrimaryBrush}" Height="2" />
            <Grid Margin="10,0,10,0" VerticalAlignment="Center">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Header}" Style="{StaticResource M3MaterialBodySmall}" Foreground="{StaticResource PrimaryBrush}" TextWrapping="Wrap" />
              <!-- DateText -->
              <TextBlock x:Name="DateText" Grid.Row="1" Style="{StaticResource M3MaterialBodyMedium}" Text="{TemplateBinding PlaceholderText}" />
            </Grid>
            <Grid Visibility="Collapsed">
              <FontIcon x:Name="CalendarGlyph" />
              <ContentPresenter x:Name="DescriptionPresenter" />
              <ContentPresenter x:Name="HeaderContentPresenter" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialCalendarDatePickerStyle" TargetType="CalendarDatePicker" BasedOn="{StaticResource DefaultM3MaterialCalendarDatePickerStyle}" />
  <!--origin: Styles\Controls\v2\CalendarView.xaml-->
  <x:String x:Key="M3MaterialDownArrowPathData">M0,0L32,0 16,19.745z</x:String>
  <SolidColorBrush x:Key="M3MaterialCalendarTodayForeground" Color="{ThemeResource OnSurfaceColor}" Opacity="0.87" />
  <SolidColorBrush x:Key="M3MaterialCalendarBlackoutForeground" Color="{ThemeResource OnSurfaceColor}" Opacity="0.38" />
  <Style x:Key="DefaultM3MaterialCalendarViewStyle" TargetType="CalendarView">
    <Setter Property="FocusBorderBrush" Value="{ThemeResource PrimaryFocusedBrush}" />
    <Setter Property="SelectedHoverBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="SelectedPressedBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="SelectedBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="HoverBorderBrush" Value="{ThemeResource PrimaryHoverBrush}" />
    <Setter Property="PressedBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="CalendarItemBorderBrush" Value="{ThemeResource CalendarViewCalendarItemRevealBorderBrush}" />
    <Setter Property="TodayForeground" Value="{StaticResource M3MaterialCalendarTodayForeground}" />
    <Setter Property="BlackoutForeground" Value="{ThemeResource M3MaterialCalendarBlackoutForeground}" />
    <Setter Property="SelectedForeground" Value="{ThemeResource OnPrimaryBrush}" />
    <Setter Property="PressedForeground" Value="{ThemeResource CalendarViewPressedForeground}" />
    <Setter Property="OutOfScopeForeground" Value="{ThemeResource CalendarViewOutOfScopeForeground}" />
    <Setter Property="CalendarItemForeground" Value="{ThemeResource CalendarViewCalendarItemForeground}" />
    <Setter Property="OutOfScopeBackground" Value="{ThemeResource CalendarViewOutOfScopeBackground}" />
    <Setter Property="CalendarItemBackground" Value="{ThemeResource CalendarViewCalendarItemRevealBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource OnPrimaryBrush}" />
    <Setter Property="Background" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource SurfaceBrush}" />
    <Setter Property="DayItemFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="DayItemFontSize" Value="14" />
    <Setter Property="FirstOfMonthLabelFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FirstOfMonthLabelFontSize" Value="0" />
    <Setter Property="MonthYearItemFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="MonthYearItemFontSize" Value="14" />
    <Setter Property="FirstOfYearDecadeLabelFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <not_win:Setter Property="CalendarItemBorderThickness" Value="0" />
    <not_win:Setter Property="BorderThickness" Value="0" />
    <win:Setter Property="CalendarItemBorderThickness" Value="2" />
    <win:Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <not_win:Setter Property="DayItemCornerRadius" Value="20" />
    <not_win:Setter Property="CalendarItemCornerRadius" Value="40" />
    <not_win:Setter Property="SelectedBackground" Value="{ThemeResource PrimaryBrush}" />
    <not_win:Setter Property="TodaySelectedBackground" Value="{ThemeResource PrimaryBrush}" />
    <not_win:Setter Property="TodayBackground" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarView">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <Border.Resources>
              <Style x:Key="M3MaterialWeekDayNameStyle" BasedOn="{StaticResource M3MaterialBodySmall}" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
              </Style>
              <Style x:Key="M3MaterialNavigationButtonStyle" TargetType="Button">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                <Setter Property="FontSize" Value="14" />
                <Setter Property="Background" Value="{ThemeResource CalendarViewNavigationButtonBackground}" />
                <Setter Property="BackgroundSizing" Value="OuterBorderEdge" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <ContentPresenter x:Name="Text" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Background}" BackgroundSizing="{TemplateBinding BackgroundSizing}" BorderBrush="{ThemeResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="Text.BorderBrush" Value="{ThemeResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                                <Setter Target="Text.Foreground" Value="{ThemeResource OnPrimaryMediumBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="Text.Foreground" Value="{ThemeResource OnPrimaryLowBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled" />
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                      </ContentPresenter>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style TargetType="Button" x:Key="M3MaterialHeaderButtonStyle" BasedOn="{StaticResource M3MaterialNavigationButtonStyle}">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="4" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Text" Background="{TemplateBinding Background}" BackgroundSizing="{TemplateBinding BackgroundSizing}" BorderBrush="{ThemeResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                        <Path x:Name="DownArrowGlyph" Data="{StaticResource M3MaterialDownArrowPathData}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Height="5" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="2" />
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="Text.BorderBrush" Value="{ThemeResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                                <Setter Target="Text.Foreground" Value="{StaticResource OnPrimaryMediumBrush}" />
                                <Setter Target="DownArrowGlyph.Fill" Value="{StaticResource OnPrimaryMediumBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="Text.Foreground" Value="{StaticResource OnPrimaryLowBrush}" />
                                <Setter Target="DownArrowGlyph.Fill" Value="{StaticResource OnPrimaryLowBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <VisualState.Setters>
                                <Setter Target="DownArrowGlyph.Opacity" Value="0" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style x:Key="M3MaterialScrollViewerStyle" TargetType="ScrollViewer">
                <Setter Property="HorizontalScrollMode" Value="Disabled" />
                <Setter Property="VerticalScrollMode" Value="Enabled" />
                <Setter Property="VerticalSnapPointsType" Value="Optional" />
                <Setter Property="ZoomMode" Value="Disabled" />
                <Setter Property="TabNavigation" Value="Once" />
                <Setter Property="BringIntoViewOnFocusChange" Value="False" />
                <Setter Property="Template" Value="{StaticResource ScrollViewerScrollBarlessTemplate}" />
                <not_win:Setter Property="(uno:ScrollViewer.ShouldFallBackToNativeScrollBars)" Value="False" />
              </Style>
            </Border.Resources>
            <Grid MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.MinViewWidth}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid.RowDefinitions>
                <RowDefinition Height="40" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="5*" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Button x:Name="HeaderButton" Padding="12,0,0,0" HorizontalContentAlignment="Left" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HeaderText}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreViews}" Style="{StaticResource M3MaterialHeaderButtonStyle}" />
                <Button x:Name="PreviousButton" Grid.Column="1" Padding="1" HorizontalContentAlignment="Center" Content="&#xE76B;" FontFamily="{ThemeResource SymbolThemeFontFamily}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreContentBefore}" IsTabStop="True" Style="{StaticResource M3MaterialNavigationButtonStyle}" />
                <Button x:Name="NextButton" Grid.Column="2" Padding="1" HorizontalContentAlignment="Center" Content="&#xE76C;" FontFamily="{ThemeResource SymbolThemeFontFamily}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreContentAfter}" IsTabStop="True" Style="{StaticResource M3MaterialNavigationButtonStyle}" />
              </Grid>
              <Grid x:Name="Views" Grid.Row="1">
                <!--<Grid.Clip>
                                    <RectangleGeometry Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ClipRect}" />
                                </Grid.Clip>-->
                <Border x:Name="BackgroundLayer" Background="{TemplateBinding BorderBrush}">
                  <Border.RenderTransform>
                    <ScaleTransform x:Name="BackgroundTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </Border.RenderTransform>
                </Border>
                <Grid x:Name="MonthView">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="38" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <Grid.RenderTransform>
                    <ScaleTransform x:Name="MonthViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </Grid.RenderTransform>
                  <Grid x:Name="WeekDayNames" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="WeekDay1" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay1}" />
                    <TextBlock x:Name="WeekDay2" Grid.Column="1" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay2}" />
                    <TextBlock x:Name="WeekDay3" Grid.Column="2" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay3}" />
                    <TextBlock x:Name="WeekDay4" Grid.Column="3" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay4}" />
                    <TextBlock x:Name="WeekDay5" Grid.Column="4" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay5}" />
                    <TextBlock x:Name="WeekDay6" Grid.Column="5" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay6}" />
                    <TextBlock x:Name="WeekDay7" Grid.Column="6" Style="{StaticResource M3MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay7}" />
                  </Grid>
                  <ScrollViewer x:Name="MonthViewScrollViewer" Grid.Row="1" IsFocusEngagementEnabled="True" Style="{StaticResource M3MaterialScrollViewerStyle}">
                    <CalendarPanel x:Name="MonthViewPanel" />
                  </ScrollViewer>
                </Grid>
                <!-- Uno only: Opacity set to 0 to avoid flicker when changing display mode -->
                <ScrollViewer x:Name="YearViewScrollViewer" IsFocusEngagementEnabled="True" Opacity="0" Style="{StaticResource M3MaterialScrollViewerStyle}" UseLayoutRounding="False" Visibility="Collapsed">
                  <ScrollViewer.RenderTransform>
                    <ScaleTransform x:Name="YearViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </ScrollViewer.RenderTransform>
                  <CalendarPanel x:Name="YearViewPanel" />
                </ScrollViewer>
                <!-- Uno only: Opacity set to 0 to avoid flicker when changing display mode -->
                <ScrollViewer x:Name="DecadeViewScrollViewer" IsFocusEngagementEnabled="True" Opacity="0" Style="{StaticResource M3MaterialScrollViewerStyle}" UseLayoutRounding="False" Visibility="Collapsed">
                  <ScrollViewer.RenderTransform>
                    <ScaleTransform x:Name="DecadeViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </ScrollViewer.RenderTransform>
                  <CalendarPanel x:Name="DecadeViewPanel" />
                </ScrollViewer>
              </Grid>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay1" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay2" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay3" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay4" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay5" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay6" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay7" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderButtonStates">
                <VisualState x:Name="ViewChanged" />
                <VisualState x:Name="ViewChanging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualState x:Name="Month" />
                <VisualState x:Name="Year">
                  <!-- Begin: Uno only -->
                  <VisualState.Setters>
                    <Setter Target="YearViewScrollViewer.IsHitTestVisible" Value="True" />
                  </VisualState.Setters>
                  <!-- End: Uno only -->
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthViewScrollViewer" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <!-- Begin: Uno only - We changed the default value to avoid flicker, make sure to set it to 1 even if transitions are disabled -->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!-- End: Uno only -->
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Decade">
                  <!-- Begin: Uno only -->
                  <VisualState.Setters>
                    <Setter Target="DecadeViewScrollViewer.IsHitTestVisible" Value="True" />
                  </VisualState.Setters>
                  <!-- End: Uno only -->
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthViewScrollViewer" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <!-- Begin: Uno only - We changed the default value to avoid flicker, make sure to set it to 1 even if transitions are disabled -->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!-- End: Uno only -->
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Month" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <!-- Uno only: Make sure to set visibility only AFTER opacity -->
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Month">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Decade">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <!-- Uno only: Make sure to set visibility only AFTER opacity -->
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Decade" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialCalendarViewStyle" TargetType="CalendarView" BasedOn="{StaticResource DefaultM3MaterialCalendarViewStyle}" />
  <!--origin: Styles\Controls\v2\CheckBox.xaml-->
  <x:String x:Key="CheckBoxHyphenGlyphPathStyle">M0,0L32,0 32,5.3 0,5.3z</x:String>
  <x:String x:Key="CheckBoxCheckGlyphPathStyle">M28.718018,0L32,3.2819897 10.666016,24.616999 0,13.951997 3.2810059,10.670007 10.666016,18.055033z</x:String>
  <GridLength x:Key="CheckAreaLength">40</GridLength>
  <x:Double x:Key="FocusAreaSize">40</x:Double>
  <x:Double x:Key="CheckAreaSize">18</x:Double>
  <CornerRadius x:Key="CheckAreaCornerRadius">4</CornerRadius>
  <SolidColorBrush x:Key="M3MaterialCheckBoxBorderBrush" Color="{ThemeResource OnSurfaceColor}" Opacity="{StaticResource MediumOpacity}" />
  <SolidColorBrush x:Key="M3MaterialCheckBoxPressedBrush" Color="{ThemeResource OnSurfaceColor}" Opacity="{StaticResource LowOpacity}" />
  <Style x:Key="M3MaterialCheckBoxStyle" TargetType="CheckBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource M3MaterialCheckBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="Padding" Value="8,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="{StaticResource CheckAreaSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Grid x:Name="Root" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Pressed">
                    <Storyboard>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="PointerOver" To="Pressed">
                    <Storyboard>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CombinedStates">
                <VisualState x:Name="UncheckedNormal" />
                <VisualState x:Name="UncheckedPointerOver" />
                <VisualState x:Name="UncheckedPressed" />
                <VisualState x:Name="UncheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedNormal">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <xamarin:VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </xamarin:VisualState.Setters>
                  <win:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckedBackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </win:Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminateNormal">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminatePointerOver">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminatePressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <xamarin:VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </xamarin:VisualState.Setters>
                  <win:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckedBackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HyphenGlyph" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </win:Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminateDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="UncheckedNormal" To="UncheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="UncheckedPointerOver" To="UncheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="CheckedNormal" To="CheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="CheckedPointerOver" To="CheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminateNormal" To="IndeterminatePressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminatePointerOver" To="IndeterminatePressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusRing.Opacity" Value="{StaticResource FocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="{StaticResource CheckAreaLength}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Ellipse x:Name="FocusRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource FocusAreaSize}" Height="{StaticResource FocusAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" Opacity="0" />
            <Ellipse x:Name="PressRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource FocusAreaSize}" Height="{StaticResource FocusAreaSize}" Fill="{StaticResource M3MaterialCheckBoxPressedBrush}" IsHitTestVisible="False" Opacity="0" />
            <Grid x:Name="CheckBoxContainer" Height="{StaticResource CheckAreaSize}" Width="{StaticResource CheckAreaSize}">
              <Grid x:Name="BackgroundBorder" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" />
              <Grid x:Name="CheckedBackgroundBorder" Background="{TemplateBinding Background}" Opacity="0" CornerRadius="2" />
              <Path x:Name="HyphenGlyph" Data="{StaticResource CheckBoxHyphenGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="12" Height="4" Opacity="0" AutomationProperties.AccessibilityView="Raw" xamarin:Margin="0,2,0,0" />
              <Path x:Name="CheckGlyph" Data="{StaticResource CheckBoxCheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="12" Height="12" Opacity="0" AutomationProperties.AccessibilityView="Raw" xamarin:Margin="0,2,0,0" />
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{StaticResource OnBackgroundBrush}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" AutomationProperties.AccessibilityView="Raw" TextWrapping="Wrap" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialSecondaryCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource M3MaterialCheckBoxStyle}">
    <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v2\CommandBar.xaml-->
  <x:Double x:Key="M3MaterialCommandBarElevation">4</x:Double>
  <x:Double x:Key="M3MaterialCommandBarHeight">48</x:Double>
  <Style x:Key="M3MaterialAppBarButtonStyle" TargetType="AppBarButton">
    <Setter Property="Height" Value="{StaticResource M3MaterialCommandBarHeight}" />
    <Setter Property="Width" Value="{StaticResource M3MaterialCommandBarHeight}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="IsCompact" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="AppBarButton">
          <um:Ripple Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
            <Viewbox x:Name="ContentViewbox" Height="{ThemeResource AppBarButtonContentHeight}" Width="{ThemeResource AppBarButtonContentHeight}" Margin="0,12" HorizontalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw">
              <ContentPresenter x:Name="Content" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
            </Viewbox>
          </um:Ripple>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ios:ControlTemplate x:Key="NativeM3CommandBarTemplate" TargetType="CommandBar">
    <!-- We use BorderBrush instead of Background to ensure that semi-transparent background of Grid and NativeCommandBarPresenter don't add up -->
    <Border BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
      <NativeCommandBarPresenter Height="44" />
    </Border>
  </ios:ControlTemplate>
  <android:ControlTemplate x:Key="NativeM3CommandBarTemplate" TargetType="CommandBar">
    <NativeCommandBarPresenter />
  </android:ControlTemplate>
  <ControlTemplate x:Key="XamlM3MaterialCommandBarTemplate" TargetType="CommandBar">
    <!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
    <Grid x:Name="LayoutRoot" win:Height="48" Background="{TemplateBinding Background}">
      <Grid x:Name="ContentRoot" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <!-- note: NavigationCommand is an AppBarButton, not ICommand -->
        <ContentControl Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" Height="{StaticResource M3MaterialCommandBarHeight}" Width="{StaticResource M3MaterialCommandBarHeight}" IsTabStop="False" />
        <!--
					Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
					in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
				-->
        <ContentControl x:Name="ContentControl" Grid.Column="1" Margin="16,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" />
        <ItemsControl x:Name="PrimaryItemsControl" HorizontalAlignment="Right" MinHeight="{ThemeResource AppBarThemeCompactHeight}" IsTabStop="False" Grid.Column="2">
          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel Orientation="Horizontal" />
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>
        </ItemsControl>
      </Grid>
    </Grid>
  </ControlTemplate>
  <Style x:Key="BaseM3MaterialCommandBarStyle" TargetType="CommandBar">
    <!-- Setting content to empty to avoid getting the datacontext -->
    <Setter Property="Content" Value="" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}" Style="{StaticResource M3MaterialTitleLarge}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <android:Setter Property="(toolkit:UIElementExtensions.Elevation)" Value="{StaticResource M3MaterialCommandBarElevation}" />
    <Setter Property="Height" Value="{StaticResource M3MaterialCommandBarHeight}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="OverflowButtonVisibility" Value="Collapsed" />
    <Setter Property="IsDynamicOverflowEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource XamlM3MaterialCommandBarTemplate}" />
  </Style>
  <Style x:Key="M3MaterialCommandBarStyle" TargetType="CommandBar" BasedOn="{StaticResource BaseM3MaterialCommandBarStyle}">
    <ios:Setter Property="Height" Value="NaN" />
    <ios:Setter Property="Template" Value="{StaticResource NativeM3CommandBarTemplate}" />
    <android:Setter Property="Template" Value="{StaticResource NativeM3CommandBarTemplate}" />
  </Style>
  <!--origin: Styles\Controls\v2\DatePicker.xaml-->
  <x:Double x:Key="M3MaterialDateTimeFlyoutBorderThickness">1</x:Double>
  <x:Double x:Key="M3MaterialDatePickerSpacerThemeWidth">1</x:Double>
  <x:Double x:Key="M3MaterialDatePickerHeight">53</x:Double>
  <StaticResource x:Key="M3MaterialDatePickerFlyoutPresenterBackgroundBrush" ResourceKey="SurfaceBrush" />
  <Thickness x:Key="M3MaterialDatePickerHostPadding">24,24,8,8</Thickness>
  <StaticResource x:Key="M3MaterialDatePickerFlyoutPresenterBorderBrush" ResourceKey="M3MaterialOnSurfaceFocusedBrush" />
  <SolidColorBrush x:Key="M3MaterialDatePickerFlyoutPresenterHighlightFill" Opacity="0.20" Color="{ThemeResource PrimaryColor}" />
  <x:Double x:Key="M3MaterialDatePickerFlyoutElevation">8</x:Double>
  <StaticResource x:Key="M3MaterialDatePickerFlyoutPresenterSpacerFill" ResourceKey="OnSurfaceFocusedBrush" />
  <SolidColorBrush x:Key="M3MaterialDatePickerBackgroundColorBrush" Opacity="0.12" Color="{ThemeResource OnSurfaceColor}" />
  <Style x:Key="M3MaterialDatePickerFlyoutButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <!--  Label  -->
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <not_win:Style x:Key="M3MaterialDatePickerFlyoutPresenterStyle" TargetType="DatePickerFlyoutPresenter">
    <Setter Property="Width" Value="296" />
    <Setter Property="MinWidth" Value="296" />
    <Setter Property="MaxHeight" Value="398" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{StaticResource MaterialDatePickerFlyoutPresenterBackgroundBrush}" />
    <Setter Property="AutomationProperties.AutomationId" Value="DatePickerFlyoutPresenter" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialDateTimeFlyoutBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialDatePickerFlyoutPresenterBorderBrush}" />
    <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePickerFlyoutPresenter">
          <toolkit:ElevatedView MaxHeight="{TemplateBinding MaxHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{StaticResource M3MaterialDatePickerFlyoutElevation}" ShadowColor="Black">
            <Border x:Name="Background">
              <Grid x:Name="ContentPanel">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid x:Name="PickerHostGrid">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="DayColumn" Width="78*" />
                    <ColumnDefinition x:Name="FirstSpacerColumn" Width="Auto" />
                    <ColumnDefinition x:Name="MonthColumn" Width="132*" />
                    <ColumnDefinition x:Name="SecondSpacerColumn" Width="Auto" />
                    <ColumnDefinition x:Name="YearColumn" Width="78*" />
                  </Grid.ColumnDefinitions>
                  <Rectangle x:Name="HighlightRect" Grid.Column="0" Grid.ColumnSpan="5" Height="{ThemeResource DatePickerFlyoutPresenterHighlightHeight}" VerticalAlignment="Center" Fill="{ThemeResource M3MaterialDatePickerFlyoutPresenterHighlightFill}" />
                  <Rectangle x:Name="FirstPickerSpacing" Grid.Column="1" Width="{ThemeResource M3MaterialDatePickerSpacerThemeWidth}" HorizontalAlignment="Center" Fill="{ThemeResource M3MaterialDatePickerFlyoutPresenterSpacerFill}" />
                  <Rectangle x:Name="SecondPickerSpacing" Grid.Column="3" Width="{ThemeResource M3MaterialDatePickerSpacerThemeWidth}" HorizontalAlignment="Center" Fill="{ThemeResource M3MaterialDatePickerFlyoutPresenterSpacerFill}" />
                </Grid>
                <Grid x:Name="AcceptDismissHostGrid" Height="{ThemeResource DatePickerFlyoutPresenterAcceptDismissHostGridHeight}" VerticalAlignment="Bottom" Background="{TemplateBinding Background}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Rectangle Grid.ColumnSpan="3" Height="{ThemeResource M3MaterialDatePickerSpacerThemeWidth}" VerticalAlignment="Top" Fill="{ThemeResource M3MaterialDatePickerFlyoutPresenterSpacerFill}" />
                  <Button x:Name="DismissButton" x:Uid="DatePickerFlyoutDismissButton" Grid.Column="1" HorizontalAlignment="Right" Content="CANCEL" Style="{StaticResource M3MaterialTextButtonStyle}" />
                  <Button x:Name="AcceptButton" x:Uid="DatePickerFlyoutAcceptButton" Grid.Column="2" HorizontalAlignment="Right" Content="OK" Style="{StaticResource M3MaterialTextButtonStyle}" />
                </Grid>
              </Grid>
            </Border>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_win:Style>
  <Style x:Key="M3MaterialDatePickerStyle" TargetType="DatePicker">
    <Setter Property="Background" Value="{StaticResource M3MaterialDatePickerBackgroundColorBrush}" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Height" Value="{StaticResource M3MaterialDatePickerHeight}" />
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <not_win:Setter Property="FlyoutPresenterStyle" Value="{StaticResource M3MaterialDatePickerFlyoutPresenterStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePicker">
          <!--  Root Grid  -->
          <Grid x:Name="LayoutRoot">
            <!--  Flyout Button  -->
            <Button x:Name="FlyoutButton" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource M3MaterialDatePickerFlyoutButtonStyle}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}">
              <Grid Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                <!--  Border  -->
                <Rectangle x:Name="BottomBorder" Height="2" VerticalAlignment="Bottom" Fill="{TemplateBinding BorderBrush}" />
                <!--  Header  -->
                <TextBlock x:Name="HeaderTextBlock" Margin="10,8,10,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Foreground="{TemplateBinding Foreground}" Style="{StaticResource BodySmall}" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
                <Grid x:Name="FlyoutButtonContentGrid" Height="24" Margin="6,24,10,0" VerticalAlignment="Top">
                  <!--  DateText  -->
                  <TextBlock x:Name="DateText" Style="{StaticResource BodyMedium}" Text="{Binding SelectedDate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringFormatConverter}, ConverterParameter=' {0:d}'}" />
                  <!--  PlaceholderText  -->
                  <TextBlock x:Name="PlaceholderText" Margin="4,0,0,0" Foreground="{StaticResource OnSurfaceLowBrush}" Style="{StaticResource BodyMedium}" Text="{TemplateBinding Header}" Visibility="Collapsed" />
                  <!--  Removing this cause trouble with the DatePicker code  -->
                  <TextBlock x:Name="DayTextBlock" Opacity="0" />
                </Grid>
              </Grid>
            </Button>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="DateText.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="HeaderTextBlock.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="BottomBorder.Fill" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HasDateStates">
                <VisualState x:Name="HasDate" />
                <VisualState x:Name="HasNoDate">
                  <VisualState.Setters>
                    <Setter Target="DateText.Visibility" Value="Collapsed" />
                    <Setter Target="PlaceholderText.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\Flyout.xaml-->
  <x:String x:Key="M3MaterialFlyoutCheckGlyphPathStyle">M30.561941,0L31.997,1.393004 10.467954,23.597999 0,15.350999 1.2379759,13.780992 10.287961,20.909952z</x:String>
  <x:String x:Key="M3MaterialFlyoutRightArrowPathStyle">M0,0L25.194,16 0,32z</x:String>
  <x:Double x:Key="M3MaterialFlyoutPresenterMinWidth">112</x:Double>
  <x:Double x:Key="M3MaterialFlyoutPresenterMaxWidth">280</x:Double>
  <x:Double x:Key="M3MaterialFlyoutMenuItemHeight">48</x:Double>
  <x:Double x:Key="M3MaterialFlyoutMenuItemIconHeight">16</x:Double>
  <x:Double x:Key="M3MaterialFlyoutMenuItemIconWidth">16</x:Double>
  <x:Double x:Key="M3MaterialFlyoutMenuToggleCheckGlyphWidth">16</x:Double>
  <x:Double x:Key="M3MaterialFlyoutMenuToggleCheckGlyphHeight">16</x:Double>
  <x:Double x:Key="M3MaterialFlyoutMenuSeparatorHeight">1</x:Double>
  <x:Double x:Key="M3MaterialFlyoutFontSize">14</x:Double>
  <x:Double x:Key="M3MaterialFlyoutCharacterSpacing">7.143</x:Double>
  <GridLength x:Key="M3MaterialFlyoutMenuItemRightMargin">38</GridLength>
  <Style x:Key="M3MaterialFlyoutPresenterStyle" TargetType="FlyoutPresenter">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="MinWidth" Value="NaN" />
    <Setter Property="MinHeight" Value="NaN" />
    <Setter Property="MaxWidth" Value="NaN" />
    <Setter Property="MaxHeight" Value="NaN" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="FlyoutPresenter">
          <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <Border.Transitions>
              <TransitionCollection>
                <PaneThemeTransition Edge="Bottom" />
              </TransitionCollection>
            </Border.Transitions>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialContentFlyoutPresenterStyle" TargetType="FlyoutPresenter">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <!--  Start: Label Large Typo  -->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialFlyoutFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialFlyoutCharacterSpacing}" />
    <!--  End: Label Large Typo  -->
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialFlyoutPresenterMinWidth}" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Margin" Value="16" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="Margin" Value="16,0" />
  </Style>
  <Style x:Key="M3MaterialMenuFlyoutPresenterStyle" TargetType="MenuFlyoutPresenter">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <!--  Start: Label Large Typo  -->
    <Setter Property="FontSize" Value="{StaticResource M3MaterialFlyoutFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource M3MaterialFlyoutCharacterSpacing}" />
    <!--  End: Label Large Typo  -->
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialFlyoutPresenterMinWidth}" />
    <Setter Property="MaxWidth" Value="{StaticResource M3MaterialFlyoutPresenterMaxWidth}" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="Margin" Value="0,0" />
  </Style>
  <Style x:Key="M3MaterialMenuFlyoutItemStyle" TargetType="MenuFlyoutItem">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource M3MaterialFlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfacePressedBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerDownThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="IconRoot.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="KeyboardAcceleratorTextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckPlaceholderStates">
                <VisualState x:Name="NoPlaceholder" />
                <VisualState x:Name="CheckPlaceholder" />
                <VisualState x:Name="IconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckAndIconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="IconRoot.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                <VisualState x:Name="KeyboardAcceleratorTextVisible">
                  <VisualState.Setters>
                    <Setter Target="KeyboardAcceleratorTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="{StaticResource M3MaterialFlyoutMenuItemRightMargin}" />
              <ColumnDefinition Width="Auto" MinWidth="16" />
              <ColumnDefinition Width="12" />
            </Grid.ColumnDefinitions>
            <Viewbox x:Name="IconRoot" Width="{StaticResource M3MaterialFlyoutMenuItemIconWidth}" Margin="12,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed">
              <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" Foreground="{StaticResource OnSurfaceVariantBrush}" />
            </Viewbox>
            <TextBlock x:Name="TextBlock" Grid.Column="1" Margin="12,0,0,0" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Style="{StaticResource M3MaterialLabelLarge}" Text="{TemplateBinding Text}" />
            <!--  Mobile devices do not support keyboard shortcuts  -->
            <Grid Grid.Column="3" android:Visibility="Collapsed" ios:Visibility="Collapsed">
              <TextBlock x:Name="KeyboardAcceleratorTextBlock" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KeyboardAcceleratorTextMinWidth}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" Foreground="{StaticResource OnSurfaceVariantBrush}" Style="{StaticResource M3MaterialLabelLarge}" Text="{TemplateBinding KeyboardAcceleratorTextOverride}" TextAlignment="Right" Visibility="Collapsed" />
            </Grid>
            <!--  Overlay  -->
            <Border x:Name="CommonStatesOverlay" Grid.Column="0" Grid.ColumnSpan="5" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialToggleMenuFlyoutItemStyle" TargetType="ToggleMenuFlyoutItem">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource M3MaterialFlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleMenuFlyoutItem">
          <Grid x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfacePressedBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerDownThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="IconRoot.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="CheckGlyph.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="KeyboardAcceleratorTextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="UncheckedWithIcon">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedWithIcon">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                <VisualState x:Name="KeyboardAcceleratorTextVisible">
                  <VisualState.Setters>
                    <Setter Target="KeyboardAcceleratorTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="AnimationRoot">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{StaticResource M3MaterialFlyoutMenuItemRightMargin}" />
                <ColumnDefinition Width="Auto" MinWidth="16" />
                <ColumnDefinition Width="12" />
              </Grid.ColumnDefinitions>
              <Path x:Name="CheckGlyph" Width="{StaticResource M3MaterialFlyoutMenuToggleCheckGlyphWidth}" Height="{StaticResource M3MaterialFlyoutMenuToggleCheckGlyphHeight}" VerticalAlignment="Center" Margin="12,0" Data="{StaticResource M3MaterialFlyoutCheckGlyphPathStyle}" Fill="{StaticResource OnSurfaceVariantBrush}" Opacity="0" Stretch="Uniform" />
              <Viewbox x:Name="IconRoot" Grid.Column="1" Width="{StaticResource M3MaterialFlyoutMenuItemIconWidth}" Height="{StaticResource M3MaterialFlyoutMenuItemIconHeight}" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed">
                <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" Foreground="{StaticResource OnSurfaceVariantBrush}" />
              </Viewbox>
              <TextBlock x:Name="TextBlock" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource M3MaterialLabelLarge}" Text="{TemplateBinding Text}" />
              <!--  Mobile devices do not support keyboard shortcuts  -->
              <Grid Grid.Column="3" android:Visibility="Collapsed" ios:Visibility="Collapsed">
                <TextBlock x:Name="KeyboardAcceleratorTextBlock" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" Foreground="{StaticResource OnSurfaceVariantBrush}" Style="{StaticResource M3MaterialLabelLarge}" Text="{TemplateBinding KeyboardAcceleratorTextOverride}" TextAlignment="Right" Visibility="{Binding KeyboardAcceleratorTextOverride, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              </Grid>
            </Grid>
            <!--  Overlay  -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialMenuFlyoutSubItemStyle" TargetType="MenuFlyoutSubItem">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource M3MaterialFlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutSubItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfacePressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SubMenuOpened">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceSelectedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="IconRoot.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="SubItemChevron.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckPlaceholderStates">
                <VisualState x:Name="NoPlaceholder" />
                <VisualState x:Name="CheckPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckAndIconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemDoublePlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="12,0,0,0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconRoot" Grid.Column="0" Width="{StaticResource M3MaterialFlyoutMenuItemIconWidth}" Height="{StaticResource M3MaterialFlyoutMenuItemIconHeight}" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed">
                <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" Foreground="{StaticResource OnSurfaceVariantBrush}" />
              </Viewbox>
              <TextBlock x:Name="TextBlock" Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource M3MaterialLabelLarge}" Text="{TemplateBinding Text}" />
              <Path x:Name="SubItemChevron" Grid.Column="1" Width="6" Height="10" Margin="54,4,16,0" VerticalAlignment="Center" Data="{StaticResource M3MaterialFlyoutRightArrowPathStyle}" Fill="{StaticResource OnSurfaceVariantBrush}" Stretch="Uniform" />
            </Grid>
            <!--  Overlay  -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialMenuFlyoutSeparatorStyle" TargetType="MenuFlyoutSeparator">
    <Setter Property="Background" Value="{StaticResource SurfaceVariantBrush}" />
    <Setter Property="Padding" Value="0,8" />
    <Setter Property="Height" Value="{StaticResource M3MaterialFlyoutMenuSeparatorHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutSeparator">
          <Rectangle Height="{TemplateBinding Height}" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\ListView.xaml-->
  <Style x:Key="M3MaterialListViewItemStyle" TargetType="ListViewItem">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{ThemeResource ListViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource ListViewItemForeground}" />
    <Setter Property="TabNavigation" Value="Local" />
    <Setter Property="IsHoldingEnabled" Value="True" />
    <Setter Property="Padding" Value="12,0,12,0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
    <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
    <Setter Property="AllowDrop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="FocusVisualPrimaryBrush" Value="{ThemeResource ListViewItemFocusVisualPrimaryBrush}" />
    <Setter Property="FocusVisualPrimaryThickness" Value="2" />
    <Setter Property="FocusVisualSecondaryBrush" Value="{ThemeResource ListViewItemFocusVisualSecondaryBrush}" />
    <Setter Property="FocusVisualSecondaryThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Grid x:Name="ContentBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryHoverBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerDownThemeAnimation TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimarySelectedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerDownThemeAnimation TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="MultiSelectStates">
                <VisualState x:Name="MultiSelectDisabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="-32" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="32" KeySpline="0.1,0.9,0.2,1" />
                    </win:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      <DiscreteObjectKeyFrame KeyTime="0:0:0.333" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultiSelectEnabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </win:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterGrid" Storyboard.TargetProperty="Margin">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="32,0,0,0" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DataVirtualizationStates">
                <VisualState x:Name="DataAvailable" />
                <VisualState x:Name="DataPlaceholder">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextBlock" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderRect" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ReorderHintStates">
                <VisualState x:Name="NoReorderHint" />
                <VisualState x:Name="BottomReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Bottom" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TopReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Top" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="RightReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Right" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="LeftReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Left" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="NoReorderHint" GeneratedDuration="0:0:0.2" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="Dragging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDragThemeOpacity}" />
                    <win:DragItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggingTarget">
                  <Storyboard>
                    <win:DropTargetItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleDraggingPrimary">
                  <Storyboard>
                    <!-- These two Opacity animations are required - the FadeInThemeAnimations
										 on the same elements animate an internal Opacity. -->
                    <DoubleAnimation Storyboard.TargetName="MultiArrangeOverlayBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="MultiArrangeOverlayText" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDragThemeOpacity}" />
                    <win:FadeInThemeAnimation TargetName="MultiArrangeOverlayBackground" />
                    <win:FadeInThemeAnimation TargetName="MultiArrangeOverlayText" />
                    <win:DragItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleDraggingSecondary">
                  <Storyboard>
                    <win:FadeOutThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggedPlaceholder">
                  <Storyboard>
                    <win:FadeOutThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="NotDragging" GeneratedDuration="0:0:0.2" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="BorderBackground" IsHitTestVisible="False" Fill="{ThemeResource SystemControlHighlightListAccentLowBrush}" Opacity="0" Control.IsTemplateFocusTarget="True" />
            <Grid x:Name="ContentPresenterGrid" Background="Transparent" Margin="0,0,0,0">
              <Grid.RenderTransform>
                <TranslateTransform x:Name="ContentPresenterTranslateTransform" />
              </Grid.RenderTransform>
              <ContentPresenter x:Name="ContentPresenter" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" xamarin:ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
            </Grid>
            <!-- The 'Xg' text simulates the amount of space one line of text will occupy.
						  In the DataPlaceholder state, the Content is not loaded yet so we
						  approximate the size of the item using placeholder text. -->
            <TextBlock x:Name="PlaceholderTextBlock" Opacity="0" Text="Xg" Foreground="{x:Null}" Margin="{TemplateBinding Padding}" IsHitTestVisible="False" AutomationProperties.AccessibilityView="Raw" />
            <Rectangle x:Name="PlaceholderRect" Visibility="Collapsed" Fill="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}" />
            <Rectangle x:Name="MultiArrangeOverlayBackground" IsHitTestVisible="False" Opacity="0" Fill="{ThemeResource ListViewItemDragBackgroundThemeBrush}" Grid.ColumnSpan="2" />
            <Border x:Name="MultiSelectSquare" BorderBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" BorderThickness="2" Width="20" Height="20" Margin="12,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed">
              <Border.Clip>
                <RectangleGeometry Rect="0,0,20,20">
                  <win:RectangleGeometry.Transform>
                    <TranslateTransform x:Name="MultiSelectClipTransform" />
                  </win:RectangleGeometry.Transform>
                </RectangleGeometry>
              </Border.Clip>
              <Border.RenderTransform>
                <TranslateTransform x:Name="MultiSelectCheckBoxTransform" />
              </Border.RenderTransform>
              <FontIcon x:Name="MultiSelectCheck" FontFamily="{ThemeResource SymbolThemeFontFamily}" win:Glyph="&#xE73E;" xamarin:Glyph="&#xE081;" FontSize="16" Foreground="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" Visibility="Collapsed" Opacity="0" />
            </Border>
            <TextBlock x:Name="MultiArrangeOverlayText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.DragItemsCount}" Foreground="{ThemeResource ListViewItemDragForegroundThemeBrush}" FontFamily="{StaticResource MaterialRegularFontFamily}" FontSize="26.667" IsHitTestVisible="False" Opacity="0" TextWrapping="Wrap" TextTrimming="WordEllipsis" Margin="18,9,0,0" AutomationProperties.AccessibilityView="Raw" Grid.ColumnSpan="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseM3MaterialListViewStyle" TargetType="ListView">
    <Setter Property="ItemContainerStyle" Value="{StaticResource M3MaterialListViewItemStyle}" />
  </Style>
  <Style x:Key="M3MaterialListViewStyle" TargetType="ListView" BasedOn="{StaticResource BaseM3MaterialListViewStyle}">
    <Setter Property="SelectionMode" Value="None" />
    <Setter Property="IsItemClickEnabled" Value="True" />
  </Style>
  <Style x:Key="M3MaterialListViewDetailsStyle" TargetType="ListView" BasedOn="{StaticResource BaseM3MaterialListViewStyle}">
    <Setter Property="SelectionMode" Value="Single" />
    <Setter Property="IsItemClickEnabled" Value="False" />
  </Style>
  <!--origin: Styles\Controls\v2\NavigationView.xaml-->
  <Thickness x:Key="M3MaterialNavigationViewAutoSuggestBoxMargin">10,0,16,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewAutoSuggestBoxMargin">12,0,12,0</Thickness>
  <x:Double x:Key="M3MaterialNavigationViewPaneToggleButtonSize">40</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewPaneToggleButtonHeight">40</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewPaneToggleButtonWidth">40</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewCompactPaneLength">40</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewTopPaneHeight">40</x:Double>
  <x:Double x:Key="M3MaterialTopNavigationViewPaneCustomContentMinWidth">48</x:Double>
  <x:Double x:Key="M3MaterialTopNavigationViewOverflowButtonWidth">48</x:Double>
  <x:Double x:Key="M3MaterialTopNavigationViewOverflowButtonHeight">40</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewItemOnLeftMinHeight">40</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewPaneHeaderRowMinHeight">4</x:Double>
  <x:Double x:Key="M3MaterialNavigationViewItemSeparatorHeight">1</x:Double>
  <x:Double x:Key="M3MaterialTopNavigationViewItemSeparatorWidth">1</x:Double>
  <Thickness x:Key="M3MaterialNavigationViewToggleBorderThickness">1</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemBorderThickness">1</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemOnLeftIconBoxMargin">12,0,12,0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemInnerHeaderMargin">10,0,0,0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewMinimalHeaderMargin">8,5,0,0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewHeaderMargin">12,5,0,11</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewPaneTitlePresenterMargin">8,4,0,0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemSeparatorMargin">16,10</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewCompactItemSeparatorMargin">16,10</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemSeparatorMargin">10,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewOverflowButtonMargin">0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemContentPresenterMargin">0,0,20,0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewCompactItemContentPresenterMargin">0,0,0,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemContentPresenterMargin">8,0,16,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemContentOnlyContentPresenterMargin">12,0</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemExpandChevronMargin">-20,0,6,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemExpandChevronMargin">-16,0,0,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemIconOnlyExpandChevronMargin">0,0,0,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemContentOnlyExpandChevronMargin">-12,0,0,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemOnOverflowContentPresenterMargin">12,0,20,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemOnOverflowNoIconContentPresenterMargin">16,0,20,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemOnOverflowExpandChevronMargin">-4,0,6,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewItemOnOverflowExpandChevronPadding">12,0,12,0</Thickness>
  <Thickness x:Key="M3MaterialTopNavigationViewOverflowMenuPadding">0,8</Thickness>
  <Thickness x:Key="M3MaterialNavigationViewItemChildrenMenuFlyoutPadding">0,8</Thickness>
  <x:Double x:Key="M3MaterialNavigationViewItemExpandedGlyphFontSize">12.0</x:Double>
  <x:String x:Key="M3MaterialNavigationViewItemExpandedGlyph">&#xE70D;</x:String>
  <StaticResource x:Key="M3MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
  <StaticResource x:Key="M3MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="M3MaterialNavigationViewPaneBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <Thickness x:Key="M3MaterialNavigationViewPaneBorderThickness">0</Thickness>
  <StaticResource x:Key="M3MaterialNavigationViewRippleFeedback" ResourceKey="PrimaryFocusedBrush" />
  <Thickness x:Key="M3MaterialNavigationViewItemPadding">8,2</Thickness>
  <CornerRadius x:Key="M3MaterialNavigationViewItemCornerRadius">16</CornerRadius>
  <xamarin:Style x:Key="M3MaterialNavigationViewResetSplitViewStyle" TargetType="SplitView">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="CornerRadius" Value="16" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="OpenPaneLength" Value="{ThemeResource SplitViewOpenPaneThemeLength}" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource SplitViewCompactPaneThemeLength}" />
    <Setter Property="PaneBackground" Value="{ThemeResource SystemControlPageBackgroundChromeLowBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="SplitView">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Closed" To="OpenOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.35" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Closed" To="OpenOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.35" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactLeft" To="OpenCompactOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactRight" To="OpenCompactOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayLeft" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="0" To="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayRight" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayLeft" To="ClosedCompactLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayRight" To="ClosedCompactRight">
                    <Storyboard>
                      <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </xamarin:ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Closed">
                  <!-- Workaround because values aren't properly reset on Wasm. -->
                  <!--<Storyboard>
										<netstdref:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
																			Storyboard.TargetName="PaneRoot">
											<DiscreteObjectKeyFrame KeyTime="0:0:0"
																	Value="Collapsed" />
										</netstdref:ObjectAnimationUsingKeyFrames>
										<netstdref:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Column)"
																			Storyboard.TargetName="ContentRoot">
											<DiscreteObjectKeyFrame KeyTime="0:0:0"
																	Value="0" />
										</netstdref:ObjectAnimationUsingKeyFrames>
									</Storyboard>-->
                </VisualState>
                <VisualState x:Name="ClosedCompactLeft">
                  <VisualState.Setters>
                    <Setter Target="PaneTransform.TranslateX" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.LeftClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:DoubleAnimation Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ClosedCompactRight">
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="2" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:DoubleAnimation Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineLeft">
                  <VisualState.Setters>
                    <Setter Target="PaneTransform.TranslateX" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Null}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <ColumnDefinition x:Name="ColumnDefinition2" Width="*" />
            </Grid.ColumnDefinitions>
            <!-- Content Area -->
            <Grid x:Name="ContentRoot" Grid.ColumnSpan="2">
              <Border Child="{TemplateBinding Content}" />
              <win:Rectangle x:Name="LightDismissLayer" Fill="{StaticResource SplitViewDismissBackgroundColor}" Visibility="Collapsed" />
              <xamarin:Button x:Name="LightDismissLayer" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Button.Template>
                  <ControlTemplate>
                    <Border Background="{StaticResource SplitViewDismissBackgroundColor}" />
                  </ControlTemplate>
                </Button.Template>
              </xamarin:Button>
            </Grid>
            <!-- Pane Content Area -->
            <Grid x:Name="PaneRoot" Grid.ColumnSpan="2" HorizontalAlignment="Left" Visibility="Collapsed" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding PaneBackground}" Width="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <win:Grid.Clip>
                <RectangleGeometry x:Name="PaneClipRectangle">
                  <win:RectangleGeometry.Transform>
                    <CompositeTransform x:Name="PaneClipRectangleTransform" />
                  </win:RectangleGeometry.Transform>
                </RectangleGeometry>
              </win:Grid.Clip>
              <Grid.RenderTransform>
                <CompositeTransform x:Name="PaneTransform" />
              </Grid.RenderTransform>
              <Border Child="{TemplateBinding Pane}" />
              <Rectangle x:Name="HCPaneBorder" Visibility="Collapsed" Fill="{ThemeResource SystemControlForegroundTransparentBrush}" x:DeferLoadStrategy="Lazy" Width="1" HorizontalAlignment="Right" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </xamarin:Style>
  <Style x:Key="M3MaterialNavigationViewPaneToggleButtonStyle" TargetType="Button">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
    <Setter Property="MinHeight" Value="{StaticResource M3MaterialNavigationViewPaneToggleButtonHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource M3MaterialNavigationViewPaneToggleButtonWidth}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForeground}" />
    <Setter Property="BorderThickness" Value="{ThemeResource M3MaterialNavigationViewToggleBorderThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="LayoutRoot" MinWidth="{TemplateBinding MinWidth}" Height="{TemplateBinding MinHeight}" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PaneToggleButtonIconWidthColumn" Width="{ThemeResource M3MaterialNavigationViewPaneToggleButtonWidth}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="{ThemeResource M3MaterialNavigationViewPaneToggleButtonHeight}" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewButtonBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewButtonForegroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewButtonForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewButtonBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewButtonForegroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewButtonForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewButtonBackgroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewButtonForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundChecked}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Viewbox x:Name="IconHost" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
              <TextBlock x:Name="Icon" Text="&#xE700;" FontFamily="{StaticResource SymbolThemeFontFamily}" FontSize="{TemplateBinding FontSize}" AutomationProperties.AccessibilityView="Raw" />
            </Viewbox>
            <ContentPresenter x:Name="ContentPresenter" VerticalContentAlignment="Center" Content="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" Grid.Column="1" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialNavigationViewPaneSearchButtonStyle" TargetType="Button">
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Content" Value="&#xE11A;" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="BorderThickness" Value="{ThemeResource M3MaterialNavigationViewToggleBorderThickness}" />
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForeground}" />
  </Style>
  <Style x:Key="M3MaterialNavigationViewOverflowButtonStyleWhenPaneOnTop" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource M3MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{StaticResource M3MaterialTopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{StaticResource M3MaterialTopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <FontIcon x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xE10C;" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialNavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource M3MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{StaticResource M3MaterialTopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{StaticResource M3MaterialTopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <FontIcon x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xE10C;" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialNavigationViewItemHeaderTextStyle" TargetType="TextBlock" BasedOn="{StaticResource M3MaterialTitleSmall}">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
  </Style>
  <Style x:Key="M3MaterialNavigationViewTitleHeaderContentControlTextStyle" TargetType="ContentControl">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="Margin" Value="{ThemeResource M3MaterialNavigationViewHeaderMargin}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="BaseM3MaterialNavigationViewStyle" TargetType="controls:NavigationView">
    <Setter Property="PaneToggleButtonStyle" Value="{StaticResource M3MaterialNavigationViewPaneToggleButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource M3MaterialNavigationViewCompactPaneLength}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource M3MaterialNavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopNavigationMinimal" />
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource M3MaterialNavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonVisible" />
                <VisualState x:Name="TogglePaneButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <Setter Target="PaneTitleTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneVisibilityGroup">
                <VisualState x:Name="PaneVisible" />
                <VisualState x:Name="PaneCollapsed">
                  <VisualState.Setters>
                    <!-- Note that RootSplitView.DisplayMode is set in code so we don't want to -->
                    <!-- write it here and interfere. But these values work together to hide -->
                    <!-- the left pane. -->
                    <Setter Target="RootSplitView.CompactPaneLength" Value="0" />
                    <Setter Target="PaneToggleButtonGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Content layouts -->
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- DisplayMode top -->
              <StackPanel x:Name="TopNavArea" />
              <!-- Displaymode (compact/minimal/normal) left -->
              <SplitView x:Name="RootSplitView" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{TemplateBinding OpenPaneLength}" PaneBackground="{ThemeResource M3MaterialNavigationViewDefaultPaneBackground}" xamarin:Style="{StaticResource M3MaterialNavigationViewResetSplitViewStyle}" Grid.Row="1">
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" HorizontalAlignment="Left" CornerRadius="16" BorderBrush="{StaticResource M3MaterialNavigationViewPaneBorderBrush}" BorderThickness="{StaticResource M3MaterialNavigationViewPaneBorderThickness}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" MinHeight="{StaticResource M3MaterialNavigationViewPaneHeaderRowMinHeight}" />
                      <RowDefinition Height="8" />
                      <!-- above list margin -->
                      <RowDefinition x:Name="ItemsContainerRow" Height="*" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="PaneHeaderContentBorderWrapper" MinHeight="{StaticResource M3MaterialNavigationViewPaneHeaderRowMinHeight}">
                      <!-- TODO: Uno specific: MinHeight and x:Name used here as RowDefinifiont.MinHeight does not work (issue #4727) -->
                      <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaneHeaderContentBorderRow" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="PaneHeaderCloseButtonColumn" />
                        <ColumnDefinition x:Name="PaneHeaderToggleButtonColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                    </Grid>
                    <!-- "Non header" content -->
                    <!-- MenuItems -->
                    <ScrollViewer x:Name="ItemsContainerGrid" Grid.Row="2" Margin="0,0,0,8" MinHeight="{ThemeResource M3MaterialNavigationViewItemOnLeftMinHeight}" TabNavigation="Local" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto">
                      <!-- Left nav ItemsRepeater -->
                      <controls:ItemsRepeater x:Name="MenuItemsHost" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content" />
                    </ScrollViewer>
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="ContentTopPadding" Grid.ColumnSpan="2" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}" />
                    <Grid x:Name="ContentLeftPadding" Grid.Row="1" />
                    <ContentControl x:Name="HeaderContent" Grid.Row="1" Grid.Column="1" MinHeight="{StaticResource M3MaterialNavigationViewPaneToggleButtonHeight}" IsTabStop="False" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource M3MaterialNavigationViewTitleHeaderContentControlTextStyle}" />
                    <ContentPresenter AutomationProperties.LandmarkType="Main" Grid.Row="2" Grid.ColumnSpan="2" Content="{TemplateBinding Content}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
            </Grid>
            <!-- Button grid -->
            <!--
							TODO: Uno Specific: Canvas.ZIndex is not implemented, so the
							button Grid is moved below the content SplitView in the template
						-->
            <Grid x:Name="PaneToggleButtonGrid" Margin="0,0,0,8" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewBackButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="NavigationViewCloseButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewCloseButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="TogglePaneButton" Style="{TemplateBinding PaneToggleButtonStyle}" AutomationProperties.LandmarkType="Navigation" HorizontalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" VerticalAlignment="Top">
                  <TextBlock x:Name="PaneTitleTextBlock" Grid.Column="0" Text="{TemplateBinding PaneTitle}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource M3MaterialNavigationViewItemHeaderTextStyle}" />
                </Button>
                <Grid x:Name="PaneTitleHolder" Visibility="Collapsed">
                  <ContentControl x:Name="PaneTitlePresenter" Margin="{ThemeResource M3MaterialNavigationViewPaneTitlePresenterMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="M3MaterialNavigationViewItemPresenterStyleWhenOnLeftPane">
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource M3MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" MinHeight="{ThemeResource M3MaterialNavigationViewItemOnLeftMinHeight}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="SelectionIndicatorBorder.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelected}" />
                    <contract4Present:Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushCheckedDisabled}" />
                    <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneAndTopLevelItemStates">
                <VisualState x:Name="NotClosedCompactAndTopLevelItem" />
                <VisualState x:Name="ClosedCompactAndTopLevelItem">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource M3MaterialNavigationViewCompactItemContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BackgroundBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" Margin="{TemplateBinding Padding}" />
            <Border x:Name="SelectionIndicatorBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent" Margin="{TemplateBinding Padding}" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Border Margin="{TemplateBinding Padding}">
              <!-- dont apply Margin on Ripple, as it will be applied twice (on the Ripple and on its template root) -->
              <!-- material#446: skia:Opacity to workaround Ripple opacity issue -->
              <um:Ripple Feedback="{StaticResource M3MaterialNavigationViewRippleFeedback}" skia:Opacity="0.12" CornerRadius="{TemplateBinding CornerRadius}" />
            </Border>
            <!-- disabled hit-test because we dont want the content or the chevron to block the click event -->
            <!-- as the ripple above would need it to play its effect -->
            <Grid x:Name="PresenterContentRootGrid" IsHitTestVisible="False">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource M3MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0.0" Visibility="Collapsed" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid HorizontalAlignment="Stretch" x:Name="ContentGrid" MinHeight="{ThemeResource M3MaterialNavigationViewItemOnLeftMinHeight}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="8" />
                  <ColumnDefinition x:Name="IconColumn" Width="{ThemeResource M3MaterialNavigationViewCompactPaneLength}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Grid.Column="1" Height="16" Margin="{ThemeResource M3MaterialNavigationViewItemOnLeftIconBoxMargin}">
                  <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="2" FontSize="14" FontWeight="Medium" FontFamily="{StaticResource MaterialMediumFontFamily}" Margin="{ThemeResource M3MaterialNavigationViewItemContentPresenterMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="3" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource M3MaterialNavigationViewItemExpandChevronMargin}" Background="Transparent">
                  <TextBlock RenderTransformOrigin="0.5, 0.5" Foreground="{ThemeResource M3MaterialNavigationViewItemForeground}" FontSize="{ThemeResource M3MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource M3MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="M3MaterialNavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus">
    <Setter Property="Foreground" Value="Green" />
    <Setter Property="Background" Value="Red" />
    <Setter Property="BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource M3MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" MinHeight="{ThemeResource M3MaterialNavigationViewItemOnLeftMinHeight}" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource SystemControlHighlightAccentBrush}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource SystemControlHighlightAltChromeWhiteBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource SystemControlHighlightAltChromeWhiteBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneAndTopLevelItemStates">
                <VisualState x:Name="NotClosedCompactAndTopLevelItem" />
                <VisualState x:Name="ClosedCompactAndTopLevelItem">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource M3MaterialNavigationViewCompactItemContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="PresenterContentRootGrid">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource M3MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid x:Name="ContentGrid" MinHeight="{ThemeResource M3MaterialNavigationViewItemOnLeftMinHeight}" HorizontalAlignment="Left">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="IconColumn" Width="{ThemeResource M3MaterialNavigationViewCompactPaneLength}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Margin="{ThemeResource M3MaterialNavigationViewItemOnLeftIconBoxMargin}">
                  <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Foreground="{TemplateBinding Foreground}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Margin="{ThemeResource M3MaterialNavigationViewItemContentPresenterMargin}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource M3MaterialNavigationViewItemExpandChevronMargin}" Background="Transparent">
                  <TextBlock Foreground="{ThemeResource M3MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource M3MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource M3MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItem" x:Key="M3MaterialNavigationViewSettingsItemStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource M3MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="IconRow" Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Viewbox x:Name="IconBox" Grid.Row="1" Grid.Column="1" Height="16" Width="48" Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="M3MaterialNavigationViewItemPresenterStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrushCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.MinWidth" Value="48" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="4,0,4,4" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemIconOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemContentOnlyContentPresenterMargin}" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="12,0,12,4" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemContentOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource M3MaterialTopNavigationViewItemContentPresenterMargin}" TextWrapping="NoWrap" Foreground="{TemplateBinding Foreground}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource M3MaterialTopNavigationViewItemExpandChevronMargin}" Background="Transparent">
                <TextBlock Foreground="{ThemeResource M3MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource M3MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource M3MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                  <TextBlock.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                  </TextBlock.RenderTransform>
                </TextBlock>
              </Grid>
            </Grid>
            <Grid x:Name="SelectionIndicatorGrid" Margin="16,0,16,4" VerticalAlignment="Bottom">
              <Rectangle x:Name="SelectionIndicator" Height="2" Fill="{ThemeResource M3MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="M3MaterialNavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus">
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialTopNavigationViewItemRevealBackgroundFocused}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemRevealIconForegroundFocused}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemRevealContentForegroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.MinWidth" Value="48" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="4,0" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemIconOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemContentOnlyContentPresenterMargin}" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="12,0" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemContentOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource M3MaterialTopNavigationViewItemContentPresenterMargin}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource M3MaterialNavigationViewItemExpandChevronMargin}" Background="Transparent">
                <TextBlock Foreground="{ThemeResource M3MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource M3MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource M3MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                  <TextBlock.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                  </TextBlock.RenderTransform>
                </TextBlock>
              </Grid>
            </Grid>
            <Grid x:Name="SelectionIndicatorGrid" Margin="16,0,16,4" VerticalAlignment="Bottom">
              <Rectangle x:Name="SelectionIndicator" Height="2" Fill="{ThemeResource M3MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="M3MaterialNavigationViewItemPresenterStyleWhenOnTopPaneOverflow">
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Height="40" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource M3MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource M3MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly" />
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemOnOverflowNoIconContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="PresenterContentRootGrid">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource M3MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid x:Name="ContentGrid">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                  <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource M3MaterialTopNavigationViewItemOnOverflowContentPresenterMargin}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource M3MaterialTopNavigationViewItemOnOverflowExpandChevronMargin}" Padding="{ThemeResource M3MaterialTopNavigationViewItemOnOverflowExpandChevronPadding}" Background="Transparent">
                  <TextBlock Foreground="{ThemeResource M3MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource M3MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource M3MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BaseM3MaterialNavigationViewItemStyle" TargetType="controls:NavigationViewItem">
    <Setter Property="Foreground" Value="{ThemeResource M3MaterialNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource M3MaterialNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource M3MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource M3MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Margin" Value="{ThemeResource M3MaterialNavigationViewItemMargin}" />
    <Setter Property="Padding" Value="{ThemeResource M3MaterialNavigationViewItemPadding}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="TabNavigation" Value="Once" />
    <contract7Present:Setter Property="CornerRadius" Value="{ThemeResource M3MaterialNavigationViewItemCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="NVIRootGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemOnNavigationViewListPositionStates">
                <VisualState x:Name="OnLeftNavigation">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource M3MaterialNavigationViewItemPresenterStyleWhenOnLeftPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnLeftNavigationReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource M3MaterialNavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimary">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource M3MaterialNavigationViewItemPresenterStyleWhenOnTopPane}" />
                    <contract7NotPresent:Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                    <contract7Present:Setter Target="ChildrenFlyout.Placement" Value="BottomEdgeAlignedLeft" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimaryReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource M3MaterialTopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource M3MaterialNavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus}" />
                    <contract7NotPresent:Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                    <contract7Present:Setter Target="ChildrenFlyout.Placement" Value="BottomEdgeAlignedLeft" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationOverflow">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource M3MaterialNavigationViewItemPresenterStyleWhenOnTopPaneOverflow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- on uwp: primitiveContract7Present:CornerRadius is to be expected, using contract7Present wont work. on uno, it is the opposite... -->
            <!-- opting to drop the conditional xmlns as it will be true anyways -->
            <primitives:NavigationViewItemPresenter x:Name="NavigationViewItemPresenter" Icon="{TemplateBinding Icon}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" CornerRadius="{TemplateBinding CornerRadius}" IsTabStop="false" Control.IsTemplateFocusTarget="True" />
            <controls:ItemsRepeater Grid.Row="1" Visibility="Collapsed" x:Name="NavigationViewItemMenuItemsHost">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Vertical" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <FlyoutBase.AttachedFlyout>
              <Flyout x:Name="ChildrenFlyout" contract7NotPresent:Placement="Right" contract7Present:Placement="RightEdgeAlignedTop">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="{ThemeResource M3MaterialNavigationViewItemChildrenMenuFlyoutPadding}" />
                    <!-- Set negative top margin to make the flyout align exactly with the button -->
                    <Setter Property="Margin" Value="0,-4,0,0" />
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                    <contract7Present:Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource OverlayCornerRadius}" />
                          </ScrollViewer>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <Grid x:Name="FlyoutRootGrid">
                  <Grid x:Name="FlyoutContentGrid" />
                </Grid>
              </Flyout>
            </FlyoutBase.AttachedFlyout>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialNavigationViewStyle" TargetType="controls:NavigationView" BasedOn="{StaticResource BaseM3MaterialNavigationViewStyle}" />
  <Style x:Key="M3MaterialNavigationViewItemStyle" TargetType="controls:NavigationViewItem" BasedOn="{StaticResource BaseM3MaterialNavigationViewItemStyle}" />
  <!--origin: Styles\Controls\v2\PasswordBox.xaml-->
  <x:String x:Key="M3MaterialRevealGlyphPathData">M16,5.5999984C17.699951,5.5999984 19.099976,6.9999918 19.099976,8.6999893 19.099976,10.400001 17.699951,11.799994 16,11.799994 14.299988,11.799994 12.899963,10.400001 12.899963,8.6999893 12.899963,6.9999918 14.299988,5.5999984 16,5.5999984z M16,2.1999893C12.399963,2.1999893 9.5,5.0999984 9.5,8.6999893 9.5,12.299994 12.399963,15.199988 16,15.199988 19.599976,15.199988 22.5,12.299994 22.5,8.6999893 22.5,5.0999984 19.599976,2.1999893 16,2.1999893z M16,0C24.799988,5.2249334E-08 32,8.6999893 32,8.6999893 32,8.6999893 24.799988,17.400001 16,17.400001 7.1999512,17.400001 0,8.6999893 0,8.6999893 0,8.6999893 7.1999512,5.2249334E-08 16,0z</x:String>
  <SolidColorBrush x:Key="M3MaterialDisabledOutlinedPasswordBoxBorderBrush" Opacity="0.12" Color="{ThemeResource OnSurfaceColor}" />
  <Style x:Key="M3MaterialRevealButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="GlyphElement" Width="18" HorizontalAlignment="Center" VerticalAlignment="Center" ios:Margin="0,2,0,0" AutomationProperties.AccessibilityView="Raw" Data="{StaticResource M3MaterialRevealGlyphPathData}" Fill="{StaticResource OnSurfaceVariantBrush}" Stretch="Uniform" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialFilledPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceVariantBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="12,4,8,4" />
    <Setter Property="MinHeight" Value="50" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="Root.Background" Value="{StaticResource OnSecondaryContainerHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleX" To="1" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="RevealButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="TranslateY" To="-11" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="TranslateY" To="5" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleX" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleY" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="IconPresenter" MinWidth="25" MaxWidth="34" MaxHeight="34" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <ScrollViewer x:Name="ContentElement" Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" ZoomMode="Disabled">
                <ScrollViewer.RenderTransform>
                  <CompositeTransform x:Name="ContentTransform" />
                </ScrollViewer.RenderTransform>
              </ScrollViewer>
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{StaticResource OnSurfaceVariantBrush}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="Transform" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <Button x:Name="RevealButton" Grid.Column="2" MinWidth="34" MinHeight="34" VerticalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw" Foreground="{TemplateBinding BorderBrush}" IsTabStop="False" Style="{StaticResource M3MaterialRevealButtonStyle}" Visibility="Collapsed" />
            </Grid>
            <Rectangle x:Name="NormalBorder" Grid.ColumnSpan="3" Height="{StaticResource TextBoxOutlinedStrokeWidth}" VerticalAlignment="Bottom" Fill="{StaticResource PrimaryBrush}" />
            <Rectangle x:Name="FocusedBorder" Grid.ColumnSpan="3" Height="{StaticResource TextBoxFocusStrokeWidth}" VerticalAlignment="Bottom" macos:RenderTransformOrigin="0.0,0.5" not_macos:RenderTransformOrigin="0.5,0.5" Fill="{StaticResource PrimaryBrush}">
              <Rectangle.RenderTransform>
                <ScaleTransform x:Name="Scale" ScaleX="0" />
              </Rectangle.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialOutlinedPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="12,4,8,4" />
    <Setter Property="MinHeight" Value="50" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="Root" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource M3MaterialDisabledOutlinedTextBoxBorderBrush}" />
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="RevealButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="TranslateY" To="-11" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="TranslateY" To="5" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleX" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleY" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" MinWidth="25" MaxWidth="34" MaxHeight="34" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
            <ScrollViewer x:Name="ContentElement" Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" ZoomMode="Disabled">
              <ScrollViewer.RenderTransform>
                <CompositeTransform x:Name="ContentTransform" />
              </ScrollViewer.RenderTransform>
            </ScrollViewer>
            <TextBlock x:Name="PlaceholderElement" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{StaticResource OnSurfaceVariantBrush}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}">
              <TextBlock.RenderTransform>
                <CompositeTransform x:Name="Transform" />
              </TextBlock.RenderTransform>
            </TextBlock>
            <Button x:Name="RevealButton" Grid.Column="2" MinWidth="34" MinHeight="34" VerticalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw" Foreground="{StaticResource OnSurfaceVariantBrush}" IsTabStop="False" Style="{StaticResource M3MaterialRevealButtonStyle}" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\RadioButton.xaml-->
  <GridLength x:Key="RadioCheckAreaLength">40</GridLength>
  <x:Double x:Key="RadioFocusAreaSize">40</x:Double>
  <x:Double x:Key="RadioCheckAreaSize">18</x:Double>
  <x:Double x:Key="RadioBorderThickness">2</x:Double>
  <SolidColorBrush x:Key="M3MaterialRadioButtonBorderBrush" Color="{ThemeResource OnSurfaceColor}" Opacity="{StaticResource MediumOpacity}" />
  <SolidColorBrush x:Key="M3MaterialRadioButtonPressedBrush" Color="{ThemeResource OnSurfaceColor}" Opacity="{StaticResource LowOpacity}" />
  <Style x:Key="M3MaterialRadioButtonStyle" TargetType="RadioButton">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource M3MaterialRadioButtonBorderBrush}" />
    <Setter Property="Padding" Value="8,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="MinHeight" Value="{StaticResource RadioCheckAreaSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Grid x:Name="RootGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="{StaticResource MediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Pressed">
                    <Storyboard>
                      <android:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0.5" To="0" />
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="0:0:0.15" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                      <wasm:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </wasm:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="PointerOver" To="Pressed">
                    <Storyboard>
                      <android:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0.5" To="0" />
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                      <wasm:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </wasm:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckEllipse.Opacity" Value="1" />
                    <Setter Target="OuterEllipse_Checked.Opacity" Value="1" />
                    <Setter Target="OuterEllipse_Unchecked.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusRing.Opacity" Value="{StaticResource FocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="{StaticResource RadioCheckAreaLength}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Ellipse x:Name="FocusRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource RadioFocusAreaSize}" Height="{StaticResource RadioFocusAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" StrokeThickness="0" Opacity="0" />
            <Ellipse x:Name="PressRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource RadioFocusAreaSize}" Height="{StaticResource RadioFocusAreaSize}" Fill="{StaticResource M3MaterialRadioButtonPressedBrush}" IsHitTestVisible="False" Opacity="0" />
            <Grid Height="{StaticResource RadioCheckAreaSize}" Width="{StaticResource RadioCheckAreaSize}">
              <Ellipse x:Name="OuterEllipse_Checked" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform" UseLayoutRounding="False" Stroke="{TemplateBinding Background}" StrokeThickness="{StaticResource RadioBorderThickness}" Opacity="0" />
              <Ellipse x:Name="OuterEllipse_Unchecked" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform" UseLayoutRounding="False" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{StaticResource RadioBorderThickness}" />
              <Ellipse x:Name="CheckEllipse" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Uniform" UseLayoutRounding="False" Fill="{TemplateBinding Background}" Opacity="0" StrokeThickness="0" Margin="5" />
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" TextWrapping="Wrap" Grid.Column="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialSecondaryRadioButtonStyle" TargetType="RadioButton" BasedOn="{StaticResource M3MaterialRadioButtonStyle}">
    <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v2\Ripple.xaml-->
  <Style TargetType="um:Ripple">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Feedback" Value="{StaticResource BackgroundBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="um:Ripple">
          <Grid Background="Transparent" Margin="{TemplateBinding Margin}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <!--Uncomment for hover effect-->
                <!--<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ScaleTransform.ScaleX"
												Value="1" />
										<Setter Target="ScaleTransform.ScaleY"
												Value="1" />
										<Setter Target="ClickEllipse.Opacity"
												Value="0.75" />
									</VisualState.Setters>
								</VisualState>-->
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.225" From="0" To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSizeMultiplier}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.225" From="0" To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSizeMultiplier}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:0.075" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                    </win:DoubleAnimationUsingKeyFrames>
                    <not_win:DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" Duration="0:0:0.075" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </not_win:DoubleAnimation>
                    <not_win:DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" BeginTime="0:0:0.6" From="1" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseOut" />
                      </DoubleAnimation.EasingFunction>
                    </not_win:DoubleAnimation>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <Canvas IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="{TemplateBinding FeedbackOpacity}">
              <Ellipse x:Name="ClickEllipse" Fill="{TemplateBinding Feedback}" Opacity="0" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}" Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}" RenderTransformOrigin=".5,.5">
                <Ellipse.RenderTransform>
                  <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                </Ellipse.RenderTransform>
              </Ellipse>
            </Canvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\TextBlock.xaml-->
  <Style x:Key="M3MaterialBaseTextBlockStyle" TargetType="TextBlock">
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
  </Style>
  <Style x:Key="M3MaterialDisplayLarge" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="57" />
    <Setter Property="LineHeight" Value="64" />
  </Style>
  <Style x:Key="M3MaterialDisplayMedium" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="45" />
    <Setter Property="LineHeight" Value="52" />
  </Style>
  <Style x:Key="M3MaterialDisplaySmall" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="36" />
    <Setter Property="LineHeight" Value="44" />
  </Style>
  <Style x:Key="M3MaterialHeadlineLarge" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="32" />
    <Setter Property="LineHeight" Value="40" />
  </Style>
  <Style x:Key="M3MaterialHeadlineMedium" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="28" />
    <Setter Property="LineHeight" Value="36" />
  </Style>
  <Style x:Key="M3MaterialHeadlineSmall" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="24" />
    <Setter Property="LineHeight" Value="32" />
  </Style>
  <Style x:Key="M3MaterialTitleLarge" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="22" />
    <Setter Property="LineHeight" Value="28" />
  </Style>
  <Style x:Key="M3MaterialTitleMedium" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="LineHeight" Value="24" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.15 px  -->
    <Setter Property="CharacterSpacing" Value="9.375" />
  </Style>
  <Style x:Key="M3MaterialTitleSmall" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="LineHeight" Value="20" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.1 px  -->
    <Setter Property="CharacterSpacing" Value="7.143" />
  </Style>
  <Style x:Key="M3MaterialLabelLarge" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="LineHeight" Value="20" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.1 px  -->
    <Setter Property="CharacterSpacing" Value="7.143" />
  </Style>
  <Style x:Key="M3MaterialLabelMedium" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="12" />
    <Setter Property="LineHeight" Value="16" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.5 px  -->
    <Setter Property="CharacterSpacing" Value="41.666" />
  </Style>
  <Style x:Key="M3MaterialLabelSmall" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="11" />
    <Setter Property="LineHeight" Value="6" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.5 px  -->
    <Setter Property="CharacterSpacing" Value="45.454" />
  </Style>
  <Style x:Key="M3MaterialBodyLarge" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="LineHeight" Value="24" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.15 px  -->
    <Setter Property="CharacterSpacing" Value="9.375" />
  </Style>
  <Style x:Key="M3MaterialBodyMedium" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="LineHeight" Value="20" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.25 px  -->
    <Setter Property="CharacterSpacing" Value="17.857" />
  </Style>
  <Style x:Key="M3MaterialBodySmall" BasedOn="{StaticResource M3MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontSize" Value="12" />
    <Setter Property="LineHeight" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <!--  Tracking: 0.4 px  -->
    <Setter Property="CharacterSpacing" Value="33.333" />
  </Style>
  <!--origin: Styles\Controls\v2\TextBox.xaml-->
  <um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformTranslateY" NotNullOrEmptyValue="5" NullOrEmptyValue="0" />
  <x:String x:Key="M3ClearGlyphPathData">M10 0C4.47 0 0 4.47 0 10C0 15.53 4.47 20 10 20C15.53 20 20 15.53 20 10C20 4.47 15.53 0 10 0ZM10 18C5.59 18 2 14.41 2 10C2 5.59 5.59 2 10 2C14.41 2 18 5.59 18 10C18 14.41 14.41 18 10 18ZM10 8.59L13.59 5L15 6.41L11.41 10L15 13.59L13.59 15L10 11.41L6.41 15L5 13.59L8.59 10L5 6.41L6.41 5L10 8.59Z</x:String>
  <SolidColorBrush x:Key="M3MaterialDisabledOutlinedTextBoxBorderBrush" Opacity="0.12" Color="{ThemeResource OnSurfaceColor}" />
  <Style x:Key="M3MaterialDeleteButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="GlyphElement" Data="{StaticResource M3ClearGlyphPathData}" Fill="{StaticResource OnSurfaceVariantBrush}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="16" Height="16" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialFilledTextBoxStyle" TargetType="TextBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="PlaceholderForeground" Value="{StaticResource OnSurfaceVariantBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceVariantBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="4 4 0 0" />
    <macos:Setter Property="Padding" Value="12,4" />
    <not_macos:Setter Property="Padding" Value="12,16" />
    <Setter Property="MinHeight" Value="50" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="Root.Background" Value="{StaticResource OnSecondaryContainerHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource PrimaryBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FocusedBorder_ScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="1" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="DeleteButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
                    <DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Margin="0,0,8,0" MaxHeight="34" MaxWidth="34" MinWidth="25" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <ScrollViewer x:Name="ContentElement" Grid.Column="1" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}" not_macos:VerticalAlignment="Bottom" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" ZoomMode="Disabled" AutomationProperties.AccessibilityView="Raw">
                <ScrollViewer.RenderTransform>
                  <CompositeTransform x:Name="ContentElement_CompositeTransform" />
                </ScrollViewer.RenderTransform>
              </ScrollViewer>
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <Button x:Name="DeleteButton" Grid.Column="2" Foreground="{StaticResource OnSurfaceVariantBrush}" IsTabStop="False" Style="{StaticResource M3MaterialDeleteButtonStyle}" not_macos:VerticalAlignment="Bottom" macos:VerticalAlignment="Stretch" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" />
            </Grid>
            <Rectangle x:Name="NormalBorder" Fill="{StaticResource OnSurfaceBrush}" Height="{StaticResource TextBoxOutlinedStrokeWidth}" VerticalAlignment="Bottom" />
            <Rectangle x:Name="FocusedBorder" Fill="{StaticResource PrimaryBrush}" Height="{StaticResource TextBoxFocusStrokeWidth}" VerticalAlignment="Bottom" not_macos:RenderTransformOrigin="0.5,0.5" macos:RenderTransformOrigin="0.0,0.5">
              <Rectangle.RenderTransform>
                <ScaleTransform x:Name="FocusedBorder_ScaleTransform" ScaleX="0" />
              </Rectangle.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialOutlinedTextBoxStyle" TargetType="TextBox">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="PlaceholderForeground" Value="{StaticResource OnSurfaceVariantBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OutlineBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="12,4,8,4" />
    <Setter Property="MinHeight" Value="50" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource M3MaterialDisabledOutlinedTextBoxBorderBrush}" />
                    <Setter Target="ContentElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="DeleteButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
                    <DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" MaxHeight="34" MaxWidth="34" MinWidth="25" Margin="0,0,8,0" VerticalAlignment="Center" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
            <ScrollViewer x:Name="ContentElement" Grid.Column="1" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ZoomMode="Disabled" AutomationProperties.AccessibilityView="Raw">
              <ScrollViewer.RenderTransform>
                <CompositeTransform x:Name="ContentElement_CompositeTransform" />
              </ScrollViewer.RenderTransform>
            </ScrollViewer>
            <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <TextBlock.RenderTransform>
                <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
              </TextBlock.RenderTransform>
            </TextBlock>
            <Button x:Name="DeleteButton" Grid.Column="2" Foreground="{StaticResource OnSurfaceVariantBrush}" IsTabStop="False" Style="{StaticResource M3MaterialDeleteButtonStyle}" VerticalAlignment="Stretch" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\ToggleButton.xaml-->
  <SolidColorBrush x:Key="M3MaterialToggleButtonTextLabelBrush" Color="{ThemeResource PrimaryColor}" />
  <StaticResource x:Key="M3MaterialToggleButtonForegroundThemeBrush" ResourceKey="OnSurfaceBrush" />
  <CornerRadius x:Key="M3MaterialToggleButtonBorderRadius">4</CornerRadius>
  <x:Double x:Key="M3MaterialToggleButtonFontSize">14</x:Double>
  <Thickness x:Key="M3MaterialToggleButtonPadding">16,8</Thickness>
  <Style x:Key="M3MaterialTextToggleButtonStyle" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{StaticResource M3MaterialToggleButtonTextLabelBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{ThemeResource M3MaterialToggleButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource M3MaterialToggleButtonBorderRadius}" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="FontFamily" Value="{ThemeResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource M3MaterialToggleButtonFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <xamarin:VisualState x:Name="Pressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </xamarin:VisualState>
                <win:VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </win:VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Border for PointedOver State -->
            <Border x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
            <!-- Border for Focus State -->
            <Border x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!-- Border for Dragged/Selected State -->
            <!-- Todo: Add ElevatedView on Dragged/Selected state of button -->
            <Border x:Name="SelectedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!-- Ripple effect -->
            <um:Ripple x:Name="ContentPresenter" Feedback="{StaticResource OnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{TemplateBinding CornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="M3MaterialIconToggleButtonStyle" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{StaticResource M3MaterialToggleButtonForegroundThemeBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.AlternateContent" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Ellipse for PointedOver State -->
            <Ellipse x:Name="HoverOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryHoverBrush}" Opacity="0" />
            <!-- Ellipse for Pressed State -->
            <Ellipse x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryPressedBrush}" Opacity="0" />
            <!-- Content -->
            <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            <!-- Alternate Content -->
            <ContentPresenter x:Name="AlternateContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{Binding Path=(um:ControlExtensions.AlternateContent), RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\_Resources.xaml-->
  <!--origin: Styles\Application\Common\AnimationConstants.xaml-->
  <CubicEase x:Key="MaterialEaseInOutFunction" EasingMode="EaseInOut" />
  <CubicEase x:Key="MaterialEaseOutFunction" EasingMode="EaseOut" />
  <Duration x:Key="MaterialAnimationDuration">0:0:0.25</Duration>
  <Duration x:Key="MaterialTextBoxAnimationDuration">0:0:0.25</Duration>
  <x:String x:Key="MaterialDelayedBeginTime">0:0:0.15</x:String>
  <!--origin: Styles\Application\Common\Converters.xaml-->
  <um:FromBoolToValueConverter x:Key="MaterialTrueToVisible" TrueValue="Visible" FalseValue="Collapsed" NullValue="Collapsed" />
  <um:FromBoolToValueConverter x:Key="MaterialTrueToCollapsed" TrueValue="Collapsed" FalseValue="Visible" NullValue="Visible" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToFalse" NotNullOrEmptyValue="True" NullOrEmptyValue="False" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToTrue" NotNullOrEmptyValue="False" NullOrEmptyValue="True" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToVisible" NotNullOrEmptyValue="Collapsed" NullOrEmptyValue="Visible" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToCollapsed" NotNullOrEmptyValue="Visible" NullOrEmptyValue="Collapsed" />
  <um:FromNullToValueConverter x:Key="MaterialNullToCollapsedConverter" NotNullValue="Visible" NullValue="Collapsed" />
  <um:FromNullToValueConverter x:Key="MaterialNullToVisibleConverter" NotNullValue="Visible" NullValue="Collapsed" />
  <um:FromEmptyStringOrNullObjectToValueConverter x:Key="MaterialEmptyOrNullToVisible" NotEmptyOrNullValue="Collapsed" EmptyOrNullValue="Visible" />
  <um:FromEmptyStringOrNullObjectToValueConverter x:Key="MaterialEmptyOrNullToCollapsed" NotEmptyOrNullValue="Visible" EmptyOrNullValue="Collapsed" />
  <um:StringFormatConverter x:Key="StringFormatConverter" />
  <um:FirstCharacterConverter x:Key="FirstCharacterConverter" />
  <!--origin: Styles\Application\Common\TextBoxVariables.xaml-->
  <StaticResource x:Key="TextBoxLabelDefaultColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxLabelFocusColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="TextBoxIconColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <x:Double x:Key="TextBoxFocusStrokeWidth">2</x:Double>
  <SolidColorBrush x:Key="TextBoxFilledBackgroundColorBrush" Color="{ThemeResource MaterialOnSurfaceColor}" Opacity="0.12" />
  <StaticResource x:Key="TextBoxFilledIndicatorColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxFilledFocusIndicatorColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <x:Double x:Key="TextBoxOutlinedStrokeWidth">1</x:Double>
  <StaticResource x:Key="TextBoxOutlinedStrokeColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxOutlinedFocusStrokeColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <x:Double x:Key="TextBoxOutlinedCorderRadius">4</x:Double>
</ResourceDictionary>