<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d not_win android ios not_ios wasm xamarin skia contract4NotPresent contract7NotPresent macos lottie_not_win todo" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:um="using:Uno.Material" xmlns:toolkit="using:Uno.UI.Toolkit" xmlns:not_win="http://uno.ui/not_win" xmlns:uno="using:Uno.UI.Xaml.Controls" xmlns:android="http://uno.ui/android" xmlns:ios="http://uno.ui/ios" xmlns:not_ios="http://uno.ui/not_ios" xmlns:wasm="http://uno.ui/wasm" xmlns:xamarin="http://uno.ui/xamarin" xmlns:media="using:Microsoft.UI.Xaml.Media" xmlns:controls="using:Microsoft.UI.Xaml.Controls" xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives" xmlns:skia="http://uno.ui/skia" xmlns:contract4Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:contract4NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,4)" xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:contract7NotPresent="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,7)" xmlns:macos="http://uno.ui/macos" xmlns:not_macos="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:lottie_win="using:Microsoft.Toolkit.Uwp.UI.Lottie" xmlns:lottie_not_win="using:Microsoft.Toolkit.Uwp.UI.Lottie" xmlns:not_mobile="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:todo="todo" xmlns:not_android="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <ResourceDictionary.MergedDictionaries>
    <um:MaterialFonts />
    <um:MaterialColorsV2 />
  </ResourceDictionary.MergedDictionaries>
  <ResourceDictionary.ThemeDictionaries>
    <ResourceDictionary x:Key="Default">
      <StaticResource x:Key="MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewExpandedPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewTopPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundPointerOver" ResourceKey="OnSurfaceHoverBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="OnSecondaryContainerHoverBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForeground" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundChecked" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForeground" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <Color x:Key="MaterialSliderTrackColor">#717171</Color>
      <Color x:Key="MaterialPrimaryVariantLowThumbColor">#57507C</Color>
      <Color x:Key="MaterialSurfaceVariantLightColor">#D7D7D7</Color>
    </ResourceDictionary>
    <ResourceDictionary x:Key="Light">
      <StaticResource x:Key="MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewExpandedPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewTopPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundPointerOver" ResourceKey="OnSurfaceHoverBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="OnSecondaryContainerHoverBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForeground" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForeground" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <Color x:Key="MaterialSliderTrackColor">#999999</Color>
      <Color x:Key="MaterialPrimaryVariantLowThumbColor">#E9E5FA</Color>
      <Color x:Key="MaterialSurfaceVariantLightColor">#F7F7F7</Color>
    </ResourceDictionary>
    <ResourceDictionary x:Key="HighContrast">
      <StaticResource x:Key="MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewExpandedPaneBackground" ResourceKey="SystemColorWindowColor" />
      <StaticResource x:Key="MaterialNavigationViewTopPaneBackground" ResourceKey="SurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundPointerOver" ResourceKey="OnSurfaceHoverBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelected" ResourceKey="SecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedPointerOver" ResourceKey="OnSecondaryContainerHoverBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedPressed" ResourceKey="OnSecondaryContainerPressedBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBackgroundSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForeground" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundPointerOver" ResourceKey="OnSurfaceBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundPressed" ResourceKey="OnSurfaceVariantBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundChecked" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedPointerOver" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedPressed" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemForegroundSelectedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrush" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushChecked" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushCheckedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelected" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedPointerOver" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedPressed" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemBorderBrushSelectedDisabled" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForeground" ResourceKey="MaterialNavigationViewItemForeground" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundSelected" ResourceKey="OnSecondaryContainerBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundPointerOver" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundPressed" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemBackgroundSelected" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealBackgroundFocused" ResourceKey="SystemControlHighlightAccentBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealIconForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemRevealContentForegroundFocused" ResourceKey="SystemControlHighlightAltChromeWhiteBrush" />
      <StaticResource x:Key="MaterialTopNavigationViewItemSeparatorForeground" ResourceKey="SystemControlForegroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundPointerOver" ResourceKey="SystemControlHighlightListLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundPressed" ResourceKey="SystemControlHighlightListMediumBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonBackgroundDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundPointerOver" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundPressed" ResourceKey="SystemControlHighlightAltBaseHighBrush" />
      <StaticResource x:Key="MaterialNavigationViewButtonForegroundDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
    </ResourceDictionary>
  </ResourceDictionary.ThemeDictionaries>
  <!--origin: Styles\Controls\v2\Button.xaml-->
  <um:FromNullToValueConverter x:Key="MaterialNullToTextButtonMarginConverter" NotNullValue="0,0,2,0" NullValue="0" />
  <StaticResource x:Key="MaterialOutlinedButtonBorderBrush" ResourceKey="OutlineBrush" />
  <x:Double x:Key="MaterialButtonMinHeight">40</x:Double>
  <x:Double x:Key="MaterialButtonMinWidth">40</x:Double>
  <Thickness x:Key="MaterialButtonPadding">16,0</Thickness>
  <Thickness x:Key="MaterialTextButtonPadding">12,0</Thickness>
  <Thickness x:Key="MaterialButtonBorderThickness">0</Thickness>
  <Thickness x:Key="MaterialOutlinedButtonBorderThickness">1</Thickness>
  <CornerRadius x:Key="MaterialButtonCornerRadius">20</CornerRadius>
  <x:String x:Key="MaterialButtonVerticalContentAlignment">Center</x:String>
  <x:String x:Key="MaterialButtonHorizontalContentAlignment">Center</x:String>
  <StaticResource x:Key="MaterialButtonFontFamily" ResourceKey="MaterialLabelLargeFontFamily" />
  <StaticResource x:Key="MaterialButtonFontWeight" ResourceKey="MaterialLabelLargeFontWeight" />
  <StaticResource x:Key="MaterialButtonFontSize" ResourceKey="MaterialLabelLargeFontSize" />
  <StaticResource x:Key="MaterialButtonCharacterSpacing" ResourceKey="MaterialLabelLargeCharacterSpacing" />
  <Style x:Key="MaterialBaseButtonStyle" TargetType="Button">
    <!--Start: Label Large Typo-->
    <Setter Property="FontFamily" Value="{StaticResource MaterialButtonFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialButtonFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialButtonFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialButtonCharacterSpacing}" />
    <!--End: Label Large Typo-->
    <Setter Property="MinHeight" Value="{StaticResource MaterialButtonMinHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource MaterialButtonMinWidth}" />
    <Setter Property="Padding" Value="{StaticResource MaterialButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialButtonCornerRadius}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialButtonBorderThickness}" />
    <Setter Property="VerticalContentAlignment" Value="{StaticResource MaterialButtonVerticalContentAlignment}" />
    <Setter Property="HorizontalContentAlignment" Value="{StaticResource MaterialButtonHorizontalContentAlignment}" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
  </Style>
  <Style x:Key="MaterialElevatedButtonStyle" BasedOn="{StaticResource MaterialBaseButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,0,1" Elevation="1" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ElevatedView.Margin" Value="0" />
                    <Setter Target="ElevatedView.Elevation" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
              <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                <um:Ripple.Content>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Grid>
                </um:Ripple.Content>
              </um:Ripple>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledButtonStyle" BasedOn="{StaticResource MaterialBaseButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <toolkit:ElevatedView x:Name="ElevatedView" Margin="0" Elevation="0" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnPrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
              <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                <um:Ripple.Content>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Grid>
                </um:Ripple.Content>
              </um:Ripple>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledTonalButtonStyle" BasedOn="{StaticResource MaterialBaseButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSecondaryContainerBrush}" />
    <Setter Property="Background" Value="{StaticResource SecondaryContainerBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <toolkit:ElevatedView x:Name="ElevatedView" Margin="0" Elevation="0" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource OnSecondaryContainerFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
              <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
              <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
                <um:Ripple.Content>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                  </Grid>
                </um:Ripple.Content>
              </um:Ripple>
            </Grid>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedButtonStyle" BasedOn="{StaticResource MaterialBaseButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <!-- Following Material M3 Guidelines and Uno Figma file: -->
    <!-- Background is Optional and Default is Transparent -->
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialOutlinedButtonBorderThickness}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialOutlinedButtonBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
            <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                  <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="8,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialTextButtonStyle" BasedOn="{StaticResource MaterialBaseButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="{StaticResource MaterialTextButtonPadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryPressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceDisabledBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused">
                  <VisualState.Setters>
                    <Setter Target="StateLayer.Background" Value="{StaticResource PrimaryFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="StateLayer" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" />
            <um:Ripple x:Name="Ripple" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}">
              <um:Ripple.Content>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="18" Margin="0,0,8,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                  <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToTextButtonMarginConverter}, FallbackValue=0, TargetNullValue=0}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" CharacterSpacing="{TemplateBinding CharacterSpacing}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Grid>
              </um:Ripple.Content>
            </um:Ripple>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialIconButtonStyle" BasedOn="{StaticResource MaterialBaseButtonStyle}" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Ellipse for PointedOver State -->
            <Ellipse x:Name="HoverOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryHoverBrush}" Opacity="0" />
            <!-- Ellipse for Pressed State -->
            <Ellipse x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryPressedBrush}" Opacity="0" />
            <!-- Ellipse for Focused State -->
            <Ellipse x:Name="FocusedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryFocusedBrush}" Opacity="0" />
            <!-- Content -->
            <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\CalendarDatePicker.xaml-->
  <SolidColorBrush x:Key="MaterialCalendarDatePickerBackground" Color="{ThemeResource OnSurfaceColor}" Opacity="0.12" />
  <Style x:Key="MaterialDefaultCalendarDatePickerStyle" TargetType="CalendarDatePicker">
    <Setter Property="Foreground" Value="{ThemeResource CalendarDatePickerForeground}" />
    <Setter Property="Background" Value="{ThemeResource CalendarDatePickerBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource CalendarDatePickerBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource CalendarDatePickerBorderThemeThickness}" />
    <Setter Property="CalendarViewStyle" Value="{StaticResource MaterialCalendarViewStyle}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Height" Value="53" />
    <Setter Property="UseSystemFocusVisuals" Value="{ThemeResource IsApplicationFocusVisualKindReveal}" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarDatePicker">
          <Grid x:Name="Root" Height="{TemplateBinding Height}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerHeaderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DateText" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerTextForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarGlyph" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerCalendarGlyphForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Background" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerBackgroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DateText" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarDatePickerTextForegroundSelected}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="TopHeader" />
                <VisualState x:Name="LeftHeader">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.(Grid.Row)" Value="1" />
                    <Setter Target="HeaderContentPresenter.(Grid.Column)" Value="0" />
                    <Setter Target="HeaderContentPresenter.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="HeaderContentPresenter.Margin" Value="{StaticResource CalendarDatePickerLeftHeaderMargin}" />
                    <Setter Target="HeaderContentPresenter.MaxWidth" Value="{StaticResource CalendarDatePickerLeftHeaderMaxWidth}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <FlyoutBase.AttachedFlyout>
              <Flyout Placement="Bottom" ShouldConstrainToRootBounds="False">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="IsDefaultShadowEnabled" Value="True" />
                    <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ContentPresenter Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{TemplateBinding CornerRadius}" />
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <CalendarView x:Name="CalendarView" Style="{TemplateBinding CalendarViewStyle}" MinDate="{TemplateBinding MinDate}" MaxDate="{TemplateBinding MaxDate}" IsTodayHighlighted="{TemplateBinding IsTodayHighlighted}" DisplayMode="{TemplateBinding DisplayMode}" FirstDayOfWeek="{TemplateBinding FirstDayOfWeek}" DayOfWeekFormat="{TemplateBinding DayOfWeekFormat}" IsOutOfScopeEnabled="{TemplateBinding IsOutOfScopeEnabled}" IsGroupLabelVisible="{TemplateBinding IsGroupLabelVisible}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
              </Flyout>
            </FlyoutBase.AttachedFlyout>
            <Border x:Name="Background" Background="{StaticResource MaterialCalendarDatePickerBackground}" CornerRadius="4,4,0,0" Control.IsTemplateFocusTarget="True" MinHeight="53" />
            <!-- Border -->
            <Rectangle x:Name="BottomBorder" VerticalAlignment="Bottom" Fill="{StaticResource PrimaryBrush}" Height="2" />
            <Grid Margin="10,0,10,0" VerticalAlignment="Center">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <!-- Header -->
              <TextBlock HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Header}" Style="{StaticResource MaterialBodySmall}" Foreground="{StaticResource PrimaryBrush}" TextWrapping="Wrap" />
              <!-- DateText -->
              <TextBlock x:Name="DateText" Grid.Row="1" Style="{StaticResource MaterialBodyMedium}" Text="{TemplateBinding PlaceholderText}" />
            </Grid>
            <Grid Visibility="Collapsed">
              <FontIcon x:Name="CalendarGlyph" />
              <ContentPresenter x:Name="DescriptionPresenter" />
              <ContentPresenter x:Name="HeaderContentPresenter" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialCalendarDatePickerStyle" TargetType="CalendarDatePicker" BasedOn="{StaticResource MaterialDefaultCalendarDatePickerStyle}" />
  <!--origin: Styles\Controls\v2\CalendarView.xaml-->
  <x:String x:Key="MaterialDownArrowPathData">M0,0L32,0 16,19.745z</x:String>
  <SolidColorBrush x:Key="MaterialCalendarTodayForeground" Color="{ThemeResource OnSurfaceColor}" Opacity="0.87" />
  <SolidColorBrush x:Key="MaterialCalendarBlackoutForeground" Color="{ThemeResource OnSurfaceColor}" Opacity="0.38" />
  <Style x:Key="DefaultMaterialCalendarViewStyle" TargetType="CalendarView">
    <Setter Property="FocusBorderBrush" Value="{ThemeResource PrimaryFocusedBrush}" />
    <Setter Property="SelectedHoverBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="SelectedPressedBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="SelectedBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="HoverBorderBrush" Value="{ThemeResource PrimaryHoverBrush}" />
    <Setter Property="PressedBorderBrush" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="CalendarItemBorderBrush" Value="{ThemeResource CalendarViewCalendarItemRevealBorderBrush}" />
    <Setter Property="TodayForeground" Value="{StaticResource MaterialCalendarTodayForeground}" />
    <Setter Property="BlackoutForeground" Value="{ThemeResource MaterialCalendarBlackoutForeground}" />
    <Setter Property="SelectedForeground" Value="{ThemeResource OnPrimaryBrush}" />
    <Setter Property="PressedForeground" Value="{ThemeResource CalendarViewPressedForeground}" />
    <Setter Property="OutOfScopeForeground" Value="{ThemeResource CalendarViewOutOfScopeForeground}" />
    <Setter Property="CalendarItemForeground" Value="{ThemeResource CalendarViewCalendarItemForeground}" />
    <Setter Property="OutOfScopeBackground" Value="{ThemeResource CalendarViewOutOfScopeBackground}" />
    <Setter Property="CalendarItemBackground" Value="{ThemeResource CalendarViewCalendarItemRevealBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource OnPrimaryBrush}" />
    <Setter Property="Background" Value="{ThemeResource PrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource SurfaceBrush}" />
    <Setter Property="DayItemFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="DayItemFontSize" Value="14" />
    <Setter Property="FirstOfMonthLabelFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FirstOfMonthLabelFontSize" Value="0" />
    <Setter Property="MonthYearItemFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="MonthYearItemFontSize" Value="14" />
    <Setter Property="FirstOfYearDecadeLabelFontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <not_win:Setter Property="CalendarItemBorderThickness" Value="0" />
    <not_win:Setter Property="BorderThickness" Value="0" />
    <win:Setter Property="CalendarItemBorderThickness" Value="2" />
    <win:Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <not_win:Setter Property="CornerRadius" Value="{ThemeResource ControlCornerRadius}" />
    <not_win:Setter Property="DayItemCornerRadius" Value="20" />
    <not_win:Setter Property="CalendarItemCornerRadius" Value="40" />
    <not_win:Setter Property="SelectedBackground" Value="{ThemeResource PrimaryBrush}" />
    <not_win:Setter Property="TodaySelectedBackground" Value="{ThemeResource PrimaryBrush}" />
    <not_win:Setter Property="TodayBackground" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarView">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <Border.Resources>
              <Style x:Key="MaterialWeekDayNameStyle" BasedOn="{StaticResource MaterialBodySmall}" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
              </Style>
              <Style x:Key="MaterialNavigationButtonStyle" TargetType="Button">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                <Setter Property="FontSize" Value="14" />
                <Setter Property="Background" Value="{ThemeResource CalendarViewNavigationButtonBackground}" />
                <Setter Property="BackgroundSizing" Value="OuterBorderEdge" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <ContentPresenter x:Name="Text" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Background}" BackgroundSizing="{TemplateBinding BackgroundSizing}" BorderBrush="{ThemeResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="Text.BorderBrush" Value="{ThemeResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                                <Setter Target="Text.Foreground" Value="{ThemeResource OnPrimaryMediumBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="Text.Foreground" Value="{ThemeResource OnPrimaryLowBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled" />
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                      </ContentPresenter>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style TargetType="Button" x:Key="MaterialHeaderButtonStyle" BasedOn="{StaticResource MaterialNavigationButtonStyle}">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="4" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Text" Background="{TemplateBinding Background}" BackgroundSizing="{TemplateBinding BackgroundSizing}" BorderBrush="{ThemeResource CalendarViewNavigationButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                        <Path x:Name="DownArrowGlyph" Data="{StaticResource MaterialDownArrowPathData}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Height="5" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="2" />
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="Text.BorderBrush" Value="{ThemeResource CalendarViewNavigationButtonBorderBrushPointerOver}" />
                                <Setter Target="Text.Foreground" Value="{StaticResource OnPrimaryMediumBrush}" />
                                <Setter Target="DownArrowGlyph.Fill" Value="{StaticResource OnPrimaryMediumBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="Text.Foreground" Value="{StaticResource OnPrimaryLowBrush}" />
                                <Setter Target="DownArrowGlyph.Fill" Value="{StaticResource OnPrimaryLowBrush}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <VisualState.Setters>
                                <Setter Target="DownArrowGlyph.Opacity" Value="0" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <Style x:Key="MaterialScrollViewerStyle" TargetType="ScrollViewer">
                <Setter Property="HorizontalScrollMode" Value="Disabled" />
                <Setter Property="VerticalScrollMode" Value="Enabled" />
                <Setter Property="VerticalSnapPointsType" Value="Optional" />
                <Setter Property="ZoomMode" Value="Disabled" />
                <Setter Property="TabNavigation" Value="Once" />
                <Setter Property="BringIntoViewOnFocusChange" Value="False" />
                <Setter Property="Template" Value="{StaticResource ScrollViewerScrollBarlessTemplate}" />
                <not_win:Setter Property="(uno:ScrollViewer.ShouldFallBackToNativeScrollBars)" Value="False" />
              </Style>
            </Border.Resources>
            <Grid MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.MinViewWidth}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid.RowDefinitions>
                <RowDefinition Height="40" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="5*" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Button x:Name="HeaderButton" Padding="12,0,0,0" HorizontalContentAlignment="Left" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HeaderText}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreViews}" Style="{StaticResource MaterialHeaderButtonStyle}" />
                <Button x:Name="PreviousButton" Grid.Column="1" Padding="1" HorizontalContentAlignment="Center" Content="&#xE76B;" FontFamily="{ThemeResource SymbolThemeFontFamily}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreContentBefore}" IsTabStop="True" Style="{StaticResource MaterialNavigationButtonStyle}" />
                <Button x:Name="NextButton" Grid.Column="2" Padding="1" HorizontalContentAlignment="Center" Content="&#xE76C;" FontFamily="{ThemeResource SymbolThemeFontFamily}" Foreground="{TemplateBinding Foreground}" IsEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.HasMoreContentAfter}" IsTabStop="True" Style="{StaticResource MaterialNavigationButtonStyle}" />
              </Grid>
              <Grid x:Name="Views" Grid.Row="1">
                <!--<Grid.Clip>
                                    <RectangleGeometry Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ClipRect}" />
                                </Grid.Clip>-->
                <Border x:Name="BackgroundLayer" Background="{TemplateBinding BorderBrush}">
                  <Border.RenderTransform>
                    <ScaleTransform x:Name="BackgroundTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </Border.RenderTransform>
                </Border>
                <Grid x:Name="MonthView">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="38" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <Grid.RenderTransform>
                    <ScaleTransform x:Name="MonthViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </Grid.RenderTransform>
                  <Grid x:Name="WeekDayNames" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock x:Name="WeekDay1" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay1}" />
                    <TextBlock x:Name="WeekDay2" Grid.Column="1" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay2}" />
                    <TextBlock x:Name="WeekDay3" Grid.Column="2" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay3}" />
                    <TextBlock x:Name="WeekDay4" Grid.Column="3" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay4}" />
                    <TextBlock x:Name="WeekDay5" Grid.Column="4" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay5}" />
                    <TextBlock x:Name="WeekDay6" Grid.Column="5" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay6}" />
                    <TextBlock x:Name="WeekDay7" Grid.Column="6" Style="{StaticResource MaterialWeekDayNameStyle}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FirstCharacterConverter}, Path=TemplateSettings.WeekDay7}" />
                  </Grid>
                  <ScrollViewer x:Name="MonthViewScrollViewer" Grid.Row="1" IsFocusEngagementEnabled="True" Style="{StaticResource MaterialScrollViewerStyle}">
                    <CalendarPanel x:Name="MonthViewPanel" />
                  </ScrollViewer>
                </Grid>
                <!-- Uno only: Opacity set to 0 to avoid flicker when changing display mode -->
                <ScrollViewer x:Name="YearViewScrollViewer" IsFocusEngagementEnabled="True" Opacity="0" Style="{StaticResource MaterialScrollViewerStyle}" UseLayoutRounding="False" Visibility="Collapsed">
                  <ScrollViewer.RenderTransform>
                    <ScaleTransform x:Name="YearViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </ScrollViewer.RenderTransform>
                  <CalendarPanel x:Name="YearViewPanel" />
                </ScrollViewer>
                <!-- Uno only: Opacity set to 0 to avoid flicker when changing display mode -->
                <ScrollViewer x:Name="DecadeViewScrollViewer" IsFocusEngagementEnabled="True" Opacity="0" Style="{StaticResource MaterialScrollViewerStyle}" UseLayoutRounding="False" Visibility="Collapsed">
                  <ScrollViewer.RenderTransform>
                    <ScaleTransform x:Name="DecadeViewTransform" CenterX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterX}" CenterY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.CenterY}" />
                  </ScrollViewer.RenderTransform>
                  <CalendarPanel x:Name="DecadeViewPanel" />
                </ScrollViewer>
              </Grid>
            </Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay1" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay2" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay3" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay4" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay5" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay6" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WeekDay7" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource CalendarViewWeekDayForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderButtonStates">
                <VisualState x:Name="ViewChanged" />
                <VisualState x:Name="ViewChanging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HeaderButton" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.167" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualState x:Name="Month" />
                <VisualState x:Name="Year">
                  <!-- Begin: Uno only -->
                  <VisualState.Setters>
                    <Setter Target="YearViewScrollViewer.IsHitTestVisible" Value="True" />
                  </VisualState.Setters>
                  <!-- End: Uno only -->
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthViewScrollViewer" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <!-- Begin: Uno only - We changed the default value to avoid flicker, make sure to set it to 1 even if transitions are disabled -->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!-- End: Uno only -->
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Decade">
                  <!-- Begin: Uno only -->
                  <VisualState.Setters>
                    <Setter Target="DecadeViewScrollViewer.IsHitTestVisible" Value="True" />
                  </VisualState.Setters>
                  <!-- End: Uno only -->
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthViewScrollViewer" Storyboard.TargetProperty="IsEnabled">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <!-- Begin: Uno only - We changed the default value to avoid flicker, make sure to set it to 1 even if transitions are disabled -->
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <!-- End: Uno only -->
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Month" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <!-- Uno only: Make sure to set visibility only AFTER opacity -->
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Month">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Year" To="Decade">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <!-- Uno only: Make sure to set visibility only AFTER opacity -->
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Decade" To="Year">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MonthView" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="IsHitTestVisible">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DecadeViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.233" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="YearViewScrollViewer" Storyboard.TargetProperty="Opacity">
                        <DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.233" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.1,0.9,0.2,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundLayer" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                        <SplineDoubleKeyFrame KeySpline="0.15,0.64,0.25,1" KeyTime="0:0:0.733" Value="1" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialCalendarViewStyle" TargetType="CalendarView" BasedOn="{StaticResource DefaultMaterialCalendarViewStyle}" />
  <!--origin: Styles\Controls\v2\CheckBox.xaml-->
  <x:String x:Key="CheckBoxHyphenGlyphPathStyle">M0,0L32,0 32,5.3 0,5.3z</x:String>
  <x:String x:Key="CheckBoxCheckGlyphPathStyle">M28.718018,0L32,3.2819897 10.666016,24.616999 0,13.951997 3.2810059,10.670007 10.666016,18.055033z</x:String>
  <GridLength x:Key="CheckAreaLength">40</GridLength>
  <x:Double x:Key="FocusAreaSize">40</x:Double>
  <x:Double x:Key="CheckAreaSize">18</x:Double>
  <CornerRadius x:Key="CheckAreaCornerRadius">4</CornerRadius>
  <SolidColorBrush x:Key="MaterialCheckBoxBorderBrush" Color="{ThemeResource OnSurfaceColor}" Opacity="{StaticResource MediumOpacity}" />
  <SolidColorBrush x:Key="MaterialCheckBoxPressedBrush" Color="{ThemeResource OnSurfaceColor}" Opacity="{StaticResource LowOpacity}" />
  <StaticResource x:Key="MaterialCheckBoxFontFamily" ResourceKey="MaterialBodySmallFontFamily" />
  <StaticResource x:Key="MaterialCheckBoxFontWeight" ResourceKey="MaterialBodySmallFontWeight" />
  <StaticResource x:Key="MaterialCheckBoxFontSize" ResourceKey="MaterialBodySmallFontSize" />
  <StaticResource x:Key="MaterialCheckBoxCharacterSpacing" ResourceKey="MaterialBodySmallCharacterSpacing" />
  <Style x:Key="MaterialCheckBoxStyle" TargetType="CheckBox">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />
    <!--Start: Body Small Typo-->
    <Setter Property="FontFamily" Value="{StaticResource MaterialCheckBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialCheckBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialCheckBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialCheckBoxCharacterSpacing}" />
    <!--End: Body Small Typo-->
    <Setter Property="BorderBrush" Value="{StaticResource MaterialCheckBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="Padding" Value="8,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="{StaticResource CheckAreaSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CheckBox">
          <Grid x:Name="Root" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Pressed">
                    <Storyboard>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="PointerOver" To="Pressed">
                    <Storyboard>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CombinedStates">
                <VisualState x:Name="UncheckedNormal" />
                <VisualState x:Name="UncheckedPointerOver" />
                <VisualState x:Name="UncheckedPressed" />
                <VisualState x:Name="UncheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedNormal">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <xamarin:VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </xamarin:VisualState.Setters>
                  <win:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckedBackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </win:Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminateNormal">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminatePointerOver">
                  <VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IndeterminatePressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <xamarin:VisualState.Setters>
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </xamarin:VisualState.Setters>
                  <win:Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="CheckedBackgroundBorder" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="HyphenGlyph" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </win:Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminateDisabled">
                  <VisualState.Setters>
                    <Setter Target="CheckBoxContainer.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="ContentPresenter.Opacity" Value="{StaticResource MediumOpacity}" />
                    <Setter Target="BackgroundBorder.Opacity" Value="0" />
                    <Setter Target="CheckedBackgroundBorder.Opacity" Value="1" />
                    <Setter Target="HyphenGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition From="UncheckedNormal" To="UncheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="UncheckedPointerOver" To="UncheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="CheckedNormal" To="CheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="CheckedPointerOver" To="CheckedPressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminateNormal" To="IndeterminatePressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="IndeterminatePointerOver" To="IndeterminatePressed">
                    <Storyboard>
                      <not_ios:DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Opacity)" Storyboard.TargetName="PressRing">
                        <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                        <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="0" />
                      </not_ios:DoubleAnimationUsingKeyFrames>
                      <!-- iOS workaround #361 DoubleAnimationUsingKeyFrames having a small delay (0.5 seconds) before animating -->
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="0" To="{StaticResource LowOpacity}" />
                      <ios:DoubleAnimation Storyboard.TargetName="PressRing" Storyboard.TargetProperty="Opacity" BeginTime="{StaticResource MaterialDelayedBeginTime}" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" From="{StaticResource LowOpacity}" To="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusRing.Opacity" Value="{StaticResource FocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="{StaticResource CheckAreaLength}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Ellipse x:Name="FocusRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource FocusAreaSize}" Height="{StaticResource FocusAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" Opacity="0" />
            <Ellipse x:Name="PressRing" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="{StaticResource FocusAreaSize}" Height="{StaticResource FocusAreaSize}" Fill="{StaticResource MaterialCheckBoxPressedBrush}" IsHitTestVisible="False" Opacity="0" />
            <Grid x:Name="CheckBoxContainer" Height="{StaticResource CheckAreaSize}" Width="{StaticResource CheckAreaSize}">
              <Grid x:Name="BackgroundBorder" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" />
              <Grid x:Name="CheckedBackgroundBorder" Background="{TemplateBinding Background}" Opacity="0" CornerRadius="2" />
              <Path x:Name="HyphenGlyph" Data="{StaticResource CheckBoxHyphenGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="12" Height="4" Opacity="0" AutomationProperties.AccessibilityView="Raw" xamarin:Margin="0,2,0,0" />
              <Path x:Name="CheckGlyph" Data="{StaticResource CheckBoxCheckGlyphPathStyle}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="12" Height="12" Opacity="0" AutomationProperties.AccessibilityView="Raw" xamarin:Margin="0,2,0,0" />
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Foreground="{StaticResource OnSurfaceMediumBrush}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" AutomationProperties.AccessibilityView="Raw" TextWrapping="Wrap" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource MaterialCheckBoxStyle}">
    <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v2\ComboBox.xaml-->
  <um:FromNullToValueConverter x:Key="NullToScaleConverter" NotNullValue="0.7" NullValue="1" />
  <um:FromNullToValueConverter x:Key="NullToPlaceholderTranslateYConverter" NotNullValue="-11" NullValue="0" />
  <um:FromNullToValueConverter x:Key="NullToContentTranslateYConverter" NotNullValue="5" NullValue="0" />
  <um:FromNullToValueConverter x:Key="NullToPlaceholderThemeBrushConverter" NotNullValue="{StaticResource MaterialComboBoxPlaceholderFocusedThemeBrush}" NullValue="{StaticResource MaterialComboBoxPlaceholderForegroundThemeBrush}" />
  <StaticResource x:Key="MaterialComboBoxItemForegroundThemeBrush" ResourceKey="OnSurfaceBrush" />
  <StaticResource x:Key="MaterialComboBoxItemSelectedBackgroundThemeBrush" ResourceKey="PrimarySelectedBrush" />
  <StaticResource x:Key="MaterialComboBoxItemSelectedPointerOverBackgroundThemeBrush" ResourceKey="OnSurfaceVariantHoverBrush" />
  <StaticResource x:Key="MaterialComboBoxItemPointerOverBackgroundThemeBrush" ResourceKey="OnSurfaceVariantHoverBrush" />
  <StaticResource x:Key="MaterialComboBoxBackgroundColorBrush" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialComboBoxBorderBrush" ResourceKey="OnSurfaceLowBrush" />
  <StaticResource x:Key="MaterialComboBoxFocusedBorderBrush" ResourceKey="OnBackgroundBrush" />
  <StaticResource x:Key="MaterialComboBoxOpenedBorderBrush" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialComboBoxLeadingIconForegroundThemeBrush" ResourceKey="OnSurfaceBrush" />
  <StaticResource x:Key="MaterialComboBoxArrowForegroundThemeBrush" ResourceKey="OnSurfaceBrush" />
  <StaticResource x:Key="MaterialComboBoxOpenedArrowForegroundThemeBrush" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialComboBoxForegroundThemeBrush" ResourceKey="OnSurfaceBrush" />
  <StaticResource x:Key="MaterialComboBoxPlaceholderFocusedThemeBrush" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialComboBoxPlaceholderForegroundThemeBrush" ResourceKey="OnSurfaceLowBrush" />
  <CornerRadius x:Key="MaterialComboBoxCornerRadius">4</CornerRadius>
  <x:String x:Key="UpArrowPathData">M0 0L-5 -5L-10 0H0Z</x:String>
  <x:String x:Key="DownArrowPathData">M0 0L5 5L10 0H0Z</x:String>
  <Thickness x:Key="MaterialComboBoxBorderThickness">1</Thickness>
  <Thickness x:Key="MaterialComboBoxOpenedBorderThickness">2</Thickness>
  <Thickness x:Key="MaterialComboBoxPadding">16,0</Thickness>
  <StaticResource x:Key="MaterialComboBoxFontFamily" ResourceKey="MaterialBodyLargeFontFamily" />
  <StaticResource x:Key="MaterialComboBoxFontWeight" ResourceKey="MaterialBodyLargeFontWeight" />
  <StaticResource x:Key="MaterialComboBoxFontSize" ResourceKey="MaterialBodyLargeFontSize" />
  <StaticResource x:Key="MaterialComboBoxCharacterSpacing" ResourceKey="MaterialBodyLargeCharacterSpacing" />
  <Style x:Key="MaterialComboBoxItemStyle" TargetType="ComboBoxItem">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource MaterialComboBoxItemForegroundThemeBrush}" />
    <!-- Start: Body Large Typo -->
    <Setter Property="FontFamily" Value="{StaticResource MaterialComboBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialComboBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialComboBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialComboBoxCharacterSpacing}" />
    <!-- End: Body Large Typo -->
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Height" Value="50" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBoxItem">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Background" Value="{ThemeResource MaterialComboBoxItemPointerOverBackgroundThemeBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource MaterialAnimationDuration}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Background" Value="{ThemeResource MaterialComboBoxItemPointerOverBackgroundThemeBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource MaterialAnimationDuration}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Background" Value="{ThemeResource MaterialComboBoxItemSelectedBackgroundThemeBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource MaterialAnimationDuration}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Background" Value="{ThemeResource MaterialComboBoxItemSelectedPointerOverBackgroundThemeBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource MaterialAnimationDuration}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SelectedPressed">
                  <VisualState.Setters>
                    <Setter Target="PressedOverlay.Background" Value="{ThemeResource MaterialComboBoxItemSelectedBackgroundThemeBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PressedOverlay" Storyboard.TargetProperty="Opacity" To="1" Duration="{StaticResource MaterialAnimationDuration}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!--  Pressed Overlay  -->
            <Grid x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{StaticResource MaterialComboBoxItemSelectedBackgroundThemeBrush}" IsHitTestVisible="False" Opacity="0" />
            <!--  ContentPresenter  -->
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}">
              <ContentPresenter.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <TextBlock Margin="16,0,0,0" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialLabelLarge}" Text="{Binding}" />
                  </Grid>
                </DataTemplate>
              </ContentPresenter.ContentTemplate>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialComboBoxStyle" TargetType="ComboBox">
    <Setter Property="Foreground" Value="{ThemeResource MaterialComboBoxForegroundThemeBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialComboBoxBackgroundColorBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource MaterialComboBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialComboBoxBorderThickness}" />
    <Setter Property="Padding" Value="{StaticResource MaterialComboBoxPadding}" />
    <!-- Start: Body Large Typo -->
    <Setter Property="FontFamily" Value="{StaticResource MaterialComboBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialComboBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialComboBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialComboBoxCharacterSpacing}" />
    <!-- End: Body Large Typo -->
    <Setter Property="MinHeight" Value="56" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
    <Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="True" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialComboBoxItemStyle}" />
    <xamarin:Setter Property="uno:ComboBox.DropDownPreferredPlacement" Value="Below" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <CarouselPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ComboBox">
          <Grid x:Name="RootGrid" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="DropDownGlyph_Down.Fill" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DropDownStates">
                <VisualState x:Name="Opened">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.BorderBrush" Value="{StaticResource MaterialComboBoxOpenedBorderBrush}" />
                    <Setter Target="RootGrid.BorderThickness" Value="{StaticResource MaterialComboBoxOpenedBorderThickness}" />
                    <Setter Target="DropDownGlyph_Up.Fill" Value="{StaticResource MaterialComboBoxOpenedArrowForegroundThemeBrush}" />
                    <Setter Target="DropDownGlyph_Down.Visibility" Value="Collapsed" />
                    <Setter Target="DropDownGlyph_Up.Visibility" Value="Visible" />
                  </VisualState.Setters>
                  <Storyboard>
                    <SplitOpenThemeAnimation ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" ClosedTargetName="ContentPresenter" ContentTargetName="ScrollViewer" ContentTranslationOffset="0" OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}" OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" OpenedTargetName="PopupBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Closed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.BorderBrush" Value="{StaticResource MaterialComboBoxBorderBrush}" />
                    <Setter Target="RootGrid.BorderThickness" Value="{StaticResource MaterialComboBoxBorderThickness}" />
                    <Setter Target="DropDownGlyph_Down.Visibility" Value="Visible" />
                    <Setter Target="DropDownGlyph_Up.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                  <Storyboard>
                    <SplitCloseThemeAnimation ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" ClosedTargetName="ContentPresenter" ContentTargetName="ScrollViewer" ContentTranslationDirection="{Binding TemplateSettings.SelectedItemDirection, RelativeSource={RelativeSource Mode=TemplatedParent}}" ContentTranslationOffset="40" OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}" OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" OpenedTargetName="PopupBorder" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="ComboBoxContent" Padding="{TemplateBinding Padding}">
              <Grid.Resources>
                <!--  Resources added here in order to manage the ContentPresenter TranslateY depending if there is a PlaceholderText or not  -->
                <CompositeTransform x:Key="ContentPresenter_CompositeTransformWithPlaceholder" TranslateY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToContentTranslateYConverter}, TargetNullValue=0, FallbackValue=0}" />
                <CompositeTransform x:Key="ContentPresenter_CompositeTransformWithoutPlaceholder" TranslateY="0" />
                <um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformConverter" NotNullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithPlaceholder}" NullOrEmptyValue="{StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}" />
              </Grid.Resources>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <!--  Leading Icon  -->
              <ContentPresenter x:Name="IconPresenter" Width="20" Margin="2,0,18,0" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{ThemeResource MaterialComboBoxLeadingIconForegroundThemeBrush}" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <!--  ContentPresenter  -->
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" VerticalAlignment="Center" RenderTransform="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformConverter}, TargetNullValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}, FallbackValue={StaticResource ContentPresenter_CompositeTransformWithoutPlaceholder}}" />
              <!--  PlaceholderElement  -->
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" VerticalAlignment="Center" Foreground="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToPlaceholderThemeBrushConverter}, TargetNullValue={StaticResource MaterialComboBoxPlaceholderForegroundThemeBrush}, FallbackValue={StaticResource MaterialComboBoxPlaceholderForegroundThemeBrush}}" IsHitTestVisible="False" MaxLines="1" RenderTransformOrigin="0,0.5" Style="{StaticResource BodyLarge}" Text="{TemplateBinding PlaceholderText}">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" ScaleX="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToScaleConverter}, TargetNullValue=1, FallbackValue=1}" ScaleY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToScaleConverter}, TargetNullValue=1, FallbackValue=1}" TranslateY="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToPlaceholderTranslateYConverter}, TargetNullValue=0, FallbackValue=0}" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <!--  Down  -->
              <Path x:Name="DropDownGlyph_Down" Grid.Column="2" Width="10" Height="5" Margin="7,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource DownArrowPathData}" Fill="{ThemeResource MaterialComboBoxArrowForegroundThemeBrush}" Stretch="Uniform" />
              <!--  Up  -->
              <Path x:Name="DropDownGlyph_Up" Grid.Column="2" Width="10" Height="5" Margin="7,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource UpArrowPathData}" Fill="{ThemeResource MaterialComboBoxArrowForegroundThemeBrush}" Stretch="Uniform" Visibility="Collapsed" />
            </Grid>
            <!--  Popup  -->
            <Popup x:Name="Popup">
              <Border x:Name="PopupBorder" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" Background="{StaticResource SurfaceBrush}">
                <!--  Workaround for Issue #213 where android PopupBorder doesn't get redrawn properly, adds Background, CornerRadius and Border to ScrollViewer  -->
                <ScrollViewer x:Name="ScrollViewer" MinWidth="{ThemeResource ComboBoxPopupThemeMinWidth}" AutomationProperties.AccessibilityView="Raw" BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}" CornerRadius="{StaticResource MaterialComboBoxCornerRadius}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalSnapPointsAlignment="Near" VerticalSnapPointsType="OptionalSingle" ZoomMode="Disabled">
                  <ItemsPresenter />
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\CommandBar.xaml-->
  <x:Double x:Key="MaterialCommandBarElevation">4</x:Double>
  <x:Double x:Key="MaterialCommandBarHeight">48</x:Double>
  <Style x:Key="MaterialAppBarButtonStyle" TargetType="AppBarButton">
    <Setter Property="Height" Value="{StaticResource MaterialCommandBarHeight}" />
    <Setter Property="Width" Value="{StaticResource MaterialCommandBarHeight}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="IsCompact" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="AppBarButton">
          <um:Ripple Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
            <Viewbox x:Name="ContentViewbox" Height="{ThemeResource AppBarButtonContentHeight}" Width="{ThemeResource AppBarButtonContentHeight}" Margin="0,12" HorizontalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw">
              <ContentPresenter x:Name="Content" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
            </Viewbox>
          </um:Ripple>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ios:ControlTemplate x:Key="NativeM3CommandBarTemplate" TargetType="CommandBar">
    <!-- We use BorderBrush instead of Background to ensure that semi-transparent background of Grid and NativeCommandBarPresenter don't add up -->
    <Border BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
      <NativeCommandBarPresenter Height="44" />
    </Border>
  </ios:ControlTemplate>
  <android:ControlTemplate x:Key="NativeM3CommandBarTemplate" TargetType="CommandBar">
    <NativeCommandBarPresenter />
  </android:ControlTemplate>
  <ControlTemplate x:Key="MaterialXamlCommandBarTemplate" TargetType="CommandBar">
    <!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
    <Grid x:Name="LayoutRoot" win:Height="48" Background="{TemplateBinding Background}">
      <Grid x:Name="ContentRoot" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Opacity="{TemplateBinding Opacity}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <!-- note: NavigationCommand is an AppBarButton, not ICommand -->
        <ContentControl Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" Height="{StaticResource MaterialCommandBarHeight}" Width="{StaticResource MaterialCommandBarHeight}" IsTabStop="False" />
        <!--
					Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
					in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
				-->
        <ContentControl x:Name="ContentControl" Grid.Column="1" Margin="16,0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" />
        <ItemsControl x:Name="PrimaryItemsControl" HorizontalAlignment="Right" MinHeight="{ThemeResource AppBarThemeCompactHeight}" IsTabStop="False" Grid.Column="2">
          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel Orientation="Horizontal" />
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>
        </ItemsControl>
      </Grid>
    </Grid>
  </ControlTemplate>
  <Style x:Key="MaterialBaseCommandBarStyle" TargetType="CommandBar">
    <!-- Setting content to empty to avoid getting the datacontext -->
    <Setter Property="Content" Value="" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}" Style="{StaticResource MaterialTitleLarge}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <android:Setter Property="(toolkit:UIElementExtensions.Elevation)" Value="{StaticResource MaterialCommandBarElevation}" />
    <Setter Property="Height" Value="{StaticResource MaterialCommandBarHeight}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="OverflowButtonVisibility" Value="Collapsed" />
    <Setter Property="IsDynamicOverflowEnabled" Value="False" />
    <Setter Property="Template" Value="{StaticResource MaterialXamlCommandBarTemplate}" />
  </Style>
  <Style x:Key="MaterialCommandBarStyle" TargetType="CommandBar" BasedOn="{StaticResource MaterialBaseCommandBarStyle}">
    <ios:Setter Property="Height" Value="NaN" />
    <ios:Setter Property="Template" Value="{StaticResource NativeM3CommandBarTemplate}" />
    <android:Setter Property="Template" Value="{StaticResource NativeM3CommandBarTemplate}" />
  </Style>
  <!--origin: Styles\Controls\v2\DatePicker.xaml-->
  <x:Double x:Key="MaterialDateTimeFlyoutBorderThickness">1</x:Double>
  <x:Double x:Key="MaterialDatePickerSpacerThemeWidth">1</x:Double>
  <x:Double x:Key="MaterialDatePickerHeight">53</x:Double>
  <StaticResource x:Key="MaterialDatePickerFlyoutPresenterBackgroundBrush" ResourceKey="SurfaceBrush" />
  <Thickness x:Key="MaterialDatePickerHostPadding">24,24,8,8</Thickness>
  <StaticResource x:Key="MaterialDatePickerFlyoutPresenterBorderBrush" ResourceKey="OnSurfaceFocusedBrush" />
  <SolidColorBrush x:Key="MaterialDatePickerFlyoutPresenterHighlightFill" Opacity="0.20" Color="{ThemeResource PrimaryColor}" />
  <x:Double x:Key="MaterialDatePickerFlyoutElevation">8</x:Double>
  <StaticResource x:Key="MaterialDatePickerFlyoutPresenterSpacerFill" ResourceKey="OnSurfaceFocusedBrush" />
  <SolidColorBrush x:Key="MaterialDatePickerBackgroundColorBrush" Opacity="0.12" Color="{ThemeResource OnSurfaceColor}" />
  <Style x:Key="MaterialDatePickerFlyoutButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <!--  Label  -->
            <ContentPresenter x:Name="ContentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="0.65" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <not_win:Style x:Key="MaterialDatePickerFlyoutPresenterStyle" TargetType="DatePickerFlyoutPresenter">
    <Setter Property="Width" Value="296" />
    <Setter Property="MinWidth" Value="296" />
    <Setter Property="MaxHeight" Value="398" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{StaticResource MaterialDatePickerFlyoutPresenterBackgroundBrush}" />
    <Setter Property="AutomationProperties.AutomationId" Value="DatePickerFlyoutPresenter" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialDateTimeFlyoutBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialDatePickerFlyoutPresenterBorderBrush}" />
    <Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePickerFlyoutPresenter">
          <toolkit:ElevatedView MaxHeight="{TemplateBinding MaxHeight}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Elevation="{StaticResource MaterialDatePickerFlyoutElevation}" ShadowColor="Black">
            <Border x:Name="Background">
              <Grid x:Name="ContentPanel">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid x:Name="PickerHostGrid">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="DayColumn" Width="78*" />
                    <ColumnDefinition x:Name="FirstSpacerColumn" Width="Auto" />
                    <ColumnDefinition x:Name="MonthColumn" Width="132*" />
                    <ColumnDefinition x:Name="SecondSpacerColumn" Width="Auto" />
                    <ColumnDefinition x:Name="YearColumn" Width="78*" />
                  </Grid.ColumnDefinitions>
                  <Rectangle x:Name="HighlightRect" Grid.Column="0" Grid.ColumnSpan="5" Height="{ThemeResource DatePickerFlyoutPresenterHighlightHeight}" VerticalAlignment="Center" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterHighlightFill}" />
                  <Rectangle x:Name="FirstPickerSpacing" Grid.Column="1" Width="{ThemeResource MaterialDatePickerSpacerThemeWidth}" HorizontalAlignment="Center" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterSpacerFill}" />
                  <Rectangle x:Name="SecondPickerSpacing" Grid.Column="3" Width="{ThemeResource MaterialDatePickerSpacerThemeWidth}" HorizontalAlignment="Center" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterSpacerFill}" />
                </Grid>
                <Grid x:Name="AcceptDismissHostGrid" Height="{ThemeResource DatePickerFlyoutPresenterAcceptDismissHostGridHeight}" VerticalAlignment="Bottom" Background="{TemplateBinding Background}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Rectangle Grid.ColumnSpan="3" Height="{ThemeResource MaterialDatePickerSpacerThemeWidth}" VerticalAlignment="Top" Fill="{ThemeResource MaterialDatePickerFlyoutPresenterSpacerFill}" />
                  <Button x:Name="DismissButton" x:Uid="DatePickerFlyoutDismissButton" Grid.Column="1" HorizontalAlignment="Right" Content="CANCEL" Style="{StaticResource MaterialTextButtonStyle}" />
                  <Button x:Name="AcceptButton" x:Uid="DatePickerFlyoutAcceptButton" Grid.Column="2" HorizontalAlignment="Right" Content="OK" Style="{StaticResource MaterialTextButtonStyle}" />
                </Grid>
              </Grid>
            </Border>
          </toolkit:ElevatedView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_win:Style>
  <Style x:Key="MaterialDatePickerStyle" TargetType="DatePicker">
    <Setter Property="Background" Value="{StaticResource MaterialDatePickerBackgroundColorBrush}" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Height" Value="{StaticResource MaterialDatePickerHeight}" />
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <not_win:Setter Property="FlyoutPresenterStyle" Value="{StaticResource MaterialDatePickerFlyoutPresenterStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePicker">
          <!--  Root Grid  -->
          <Grid x:Name="LayoutRoot">
            <!--  Flyout Button  -->
            <Button x:Name="FlyoutButton" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource MaterialDatePickerFlyoutButtonStyle}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}">
              <Grid Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                <!--  Border  -->
                <Rectangle x:Name="BottomBorder" Height="2" VerticalAlignment="Bottom" Fill="{TemplateBinding BorderBrush}" />
                <!--  Header  -->
                <TextBlock x:Name="HeaderTextBlock" Margin="10,8,10,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialBodySmall}" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
                <Grid x:Name="FlyoutButtonContentGrid" Height="24" Margin="6,24,10,0" VerticalAlignment="Top">
                  <!--  DateText  -->
                  <TextBlock x:Name="DateText" Style="{StaticResource MaterialBodyMedium}" Text="{Binding SelectedDate, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringFormatConverter}, ConverterParameter=' {0:d}'}" />
                  <!--  PlaceholderText  -->
                  <TextBlock x:Name="PlaceholderText" Margin="4,0,0,0" Foreground="{StaticResource OnSurfaceLowBrush}" Style="{StaticResource MaterialBodyMedium}" Text="{TemplateBinding Header}" Visibility="Collapsed" />
                  <!--  Removing this cause trouble with the DatePicker code  -->
                  <TextBlock x:Name="DayTextBlock" Opacity="0" />
                </Grid>
              </Grid>
            </Button>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="DateText.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="HeaderTextBlock.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="BottomBorder.Fill" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HasDateStates">
                <VisualState x:Name="HasDate" />
                <VisualState x:Name="HasNoDate">
                  <VisualState.Setters>
                    <Setter Target="DateText.Visibility" Value="Collapsed" />
                    <Setter Target="PlaceholderText.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\FloatingActionButton.xaml-->
  <StaticResource x:Key="MaterialFabForeground" ResourceKey="OnPrimaryContainerBrush" />
  <StaticResource x:Key="MaterialFabBackground" ResourceKey="PrimaryContainerBrush" />
  <StaticResource x:Key="MaterialFabDisabledBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialFabDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialFabPointerOverStateOverlay" ResourceKey="OnPrimaryContainerHoverBrush" />
  <StaticResource x:Key="MaterialFabFocusedStateOverlay" ResourceKey="OnPrimaryContainerFocusedBrush" />
  <StaticResource x:Key="MaterialFabPressedStateOverlay" ResourceKey="OnPrimaryContainerPressedBrush" />
  <StaticResource x:Key="MaterialFabDisabledStateOverlay" ResourceKey="OnSurfaceDisabledLowBrush" />
  <StaticResource x:Key="MaterialSurfaceFabForeground" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialSurfaceFabBackground" ResourceKey="SurfaceBrush" />
  <StaticResource x:Key="MaterialSurfaceFabDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialSurfaceFabPointerOverStateOverlay" ResourceKey="PrimaryHoverBrush" />
  <StaticResource x:Key="MaterialSurfaceFabFocusedStateOverlay" ResourceKey="PrimaryFocusedBrush" />
  <StaticResource x:Key="MaterialSurfaceFabPressedStateOverlay" ResourceKey="PrimaryPressedBrush" />
  <StaticResource x:Key="MaterialSurfaceFabDisabledBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialSurfaceFabDisabledStateOverlay" ResourceKey="OnSurfaceDisabledLowBrush" />
  <StaticResource x:Key="MaterialSecondaryFabForeground" ResourceKey="OnSecondaryContainerBrush" />
  <StaticResource x:Key="MaterialSecondaryFabBackground" ResourceKey="SecondaryContainerBrush" />
  <StaticResource x:Key="MaterialSecondaryFabDisabledBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialSecondaryFabDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialSecondaryFabPointerOverStateOverlay" ResourceKey="OnSecondaryContainerHoverBrush" />
  <StaticResource x:Key="MaterialSecondaryFabFocusedStateOverlay" ResourceKey="OnSecondaryContainerFocusedBrush" />
  <StaticResource x:Key="MaterialSecondaryFabPressedStateOverlay" ResourceKey="OnSecondaryContainerPressedBrush" />
  <StaticResource x:Key="MaterialSecondaryFabDisabledStateOverlay" ResourceKey="OnSurfaceDisabledLowBrush" />
  <StaticResource x:Key="MaterialTertiaryFabForeground" ResourceKey="OnTertiaryContainerBrush" />
  <StaticResource x:Key="MaterialTertiaryFabBackground" ResourceKey="TertiaryContainerBrush" />
  <StaticResource x:Key="MaterialTertiaryFabDisabledBackground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialTertiaryFabDisabledForeground" ResourceKey="OnSurfaceDisabledBrush" />
  <StaticResource x:Key="MaterialTertiaryFabPointerOverStateOverlay" ResourceKey="OnTertiaryContainerHoverBrush" />
  <StaticResource x:Key="MaterialTertiaryFabFocusedStateOverlay" ResourceKey="OnTertiaryContainerFocusedBrush" />
  <StaticResource x:Key="MaterialTertiaryFabPressedStateOverlay" ResourceKey="OnTertiaryContainerFocusedBrush" />
  <StaticResource x:Key="MaterialTertiaryFabDisabledStateOverlay" ResourceKey="OnSurfaceDisabledLowBrush" />
  <Thickness x:Key="MaterialFabPadding">20</Thickness>
  <x:Double x:Key="MaterialFabContentWidthOrHeight">16</x:Double>
  <CornerRadius x:Key="MaterialFabCornerRadius">16</CornerRadius>
  <Thickness x:Key="MaterialSmallFabPadding">12</Thickness>
  <x:Double x:Key="MaterialSmallFabContentWidthOrHeight">16</x:Double>
  <CornerRadius x:Key="MaterialSmallFabCornerRadius">12</CornerRadius>
  <Thickness x:Key="MaterialLargeFabPadding">36</Thickness>
  <x:Double x:Key="MaterialLargeFabContentWidthOrHeight">24</x:Double>
  <CornerRadius x:Key="MaterialLargeFabCornerRadius">28</CornerRadius>
  <x:Double x:Key="MaterialFabFontSize">14</x:Double>
  <x:Double x:Key="MaterialFabIconTextPadding">12</x:Double>
  <Style x:Key="MaterialFabStyle" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialFabBackground}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialFabForeground}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialFabFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabPadding}" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" Elevation="6">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}">
                  <StackPanel x:Name="ContentPanel" Padding="{TemplateBinding Padding}" Orientation="Horizontal">
                    <!--  Icon  -->
                    <Viewbox Width="{Binding Path=(um:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(um:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!--  Icon/Content spacing  -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!--  Content  -->
                    <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" />
                  </StackPanel>
                  <Border x:Name="StateOverlay" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialFabPointerOverStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialFabPressedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialFabDisabledForeground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialFabDisabledForeground}" />
                    <Setter Target="Root.Background" Value="{StaticResource MaterialFabDisabledBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialFabDisabledStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialFabFocusedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSurfaceFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialSurfaceFabBackground}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialSurfaceFabForeground}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialFabFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabPadding}" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" Elevation="6">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}">
                  <StackPanel x:Name="ContentPanel" Padding="{TemplateBinding Padding}" Orientation="Horizontal">
                    <!--  Icon  -->
                    <Viewbox Width="{Binding Path=(um:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(um:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!--  Icon/Content spacing  -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!--  Content  -->
                    <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" />
                  </StackPanel>
                  <Border x:Name="StateOverlay" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSurfaceFabPointerOverStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSurfaceFabPressedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialSurfaceFabDisabledForeground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialSurfaceFabDisabledForeground}" />
                    <Setter Target="Root.Background" Value="{StaticResource MaterialSurfaceFabDisabledBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSurfaceFabDisabledStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSurfaceFabFocusedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialSecondaryFabBackground}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialSecondaryFabForeground}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialFabFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabPadding}" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" Elevation="6">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}">
                  <StackPanel x:Name="ContentPanel" Padding="{TemplateBinding Padding}" Orientation="Horizontal">
                    <!--  Icon  -->
                    <Viewbox Width="{Binding Path=(um:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(um:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!--  Icon/Content spacing  -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!--  Content  -->
                    <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" />
                  </StackPanel>
                  <Border x:Name="StateOverlay" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSecondaryFabPointerOverStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSecondaryFabPressedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialSecondaryFabDisabledForeground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialSecondaryFabDisabledForeground}" />
                    <Setter Target="Root.Background" Value="{StaticResource MaterialSecondaryFabDisabledBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSecondaryFabDisabledStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialSecondaryFabFocusedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialTertiaryFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="Background" Value="{StaticResource MaterialTertiaryFabBackground}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialTertiaryFabForeground}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialFabFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialFabPadding}" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialFabContentWidthOrHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <toolkit:ElevatedView x:Name="ElevatedView" Margin="0,0,6,6" Background="Transparent" CornerRadius="{TemplateBinding CornerRadius}" Elevation="6">
              <um:Ripple x:Name="Ripple" CornerRadius="{TemplateBinding CornerRadius}" Feedback="{TemplateBinding Foreground}" FeedbackOpacity="{StaticResource PressedOpacity}">
                <Grid x:Name="Root" Background="{TemplateBinding Background}">
                  <StackPanel x:Name="ContentPanel" Padding="{TemplateBinding Padding}" Orientation="Horizontal">
                    <!--  Icon  -->
                    <Viewbox Width="{Binding Path=(um:ControlExtensions.IconWidth), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(um:ControlExtensions.IconHeight), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Viewbox>
                    <!--  Icon/Content spacing  -->
                    <Border Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}">
                      <Border Width="{StaticResource MaterialFabIconTextPadding}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
                    </Border>
                    <!--  Content  -->
                    <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" />
                  </StackPanel>
                  <Border x:Name="StateOverlay" />
                </Grid>
              </um:Ripple>
            </toolkit:ElevatedView>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialTertiaryFabPointerOverStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialTertiaryFabPressedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Foreground" Value="{StaticResource MaterialTertiaryFabDisabledForeground}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource MaterialTertiaryFabDisabledForeground}" />
                    <Setter Target="Root.Background" Value="{StaticResource MaterialTertiaryFabDisabledBackground}" />
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialTertiaryFabDisabledStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="StateOverlay.Background" Value="{StaticResource MaterialTertiaryFabFocusedStateOverlay}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSmallFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialSmallFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialSmallFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialSurfaceSmallFabStyle" BasedOn="{StaticResource MaterialSurfaceFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialSmallFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialSmallFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialSecondarySmallFabStyle" BasedOn="{StaticResource MaterialSecondaryFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialSmallFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialSmallFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialTertiarySmallFabStyle" BasedOn="{StaticResource MaterialTertiaryFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialSmallFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialSmallFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialSmallFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialLargeFabStyle" BasedOn="{StaticResource MaterialFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialLargeFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialLargeFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialSurfaceLargeFabStyle" BasedOn="{StaticResource MaterialSurfaceFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialLargeFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialLargeFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialSecondaryLargeFabStyle" BasedOn="{StaticResource MaterialSecondaryFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialLargeFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialLargeFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
  </Style>
  <Style x:Key="MaterialTertiaryLargeFabStyle" BasedOn="{StaticResource MaterialTertiaryFabStyle}" TargetType="Button">
    <Setter Property="CornerRadius" Value="{StaticResource MaterialLargeFabCornerRadius}" />
    <Setter Property="Padding" Value="{StaticResource MaterialLargeFabPadding}" />
    <Setter Property="um:ControlExtensions.IconHeight" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
    <Setter Property="um:ControlExtensions.IconWidth" Value="{StaticResource MaterialLargeFabContentWidthOrHeight}" />
  </Style>
  <!--origin: Styles\Controls\v2\Flyout.xaml-->
  <x:String x:Key="MaterialFlyoutCheckGlyphPathStyle">M30.561941,0L31.997,1.393004 10.467954,23.597999 0,15.350999 1.2379759,13.780992 10.287961,20.909952z</x:String>
  <x:String x:Key="MaterialFlyoutRightArrowPathStyle">M0,0L25.194,16 0,32z</x:String>
  <x:Double x:Key="MaterialFlyoutPresenterMinWidth">112</x:Double>
  <x:Double x:Key="MaterialFlyoutPresenterMaxWidth">280</x:Double>
  <x:Double x:Key="MaterialFlyoutMenuItemHeight">48</x:Double>
  <x:Double x:Key="MaterialFlyoutMenuItemIconHeight">16</x:Double>
  <x:Double x:Key="MaterialFlyoutMenuItemIconWidth">16</x:Double>
  <x:Double x:Key="MaterialFlyoutMenuToggleCheckGlyphWidth">16</x:Double>
  <x:Double x:Key="MaterialFlyoutMenuToggleCheckGlyphHeight">16</x:Double>
  <x:Double x:Key="MaterialFlyoutMenuSeparatorHeight">1</x:Double>
  <x:Double x:Key="MaterialFlyoutFontSize">14</x:Double>
  <x:Double x:Key="MaterialFlyoutCharacterSpacing">7.143</x:Double>
  <GridLength x:Key="MaterialFlyoutMenuItemRightMargin">38</GridLength>
  <Style x:Key="MaterialFlyoutPresenterStyle" TargetType="FlyoutPresenter">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="MinWidth" Value="NaN" />
    <Setter Property="MinHeight" Value="NaN" />
    <Setter Property="MaxWidth" Value="NaN" />
    <Setter Property="MaxHeight" Value="NaN" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="FlyoutPresenter">
          <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <Border.Transitions>
              <TransitionCollection>
                <PaneThemeTransition Edge="Bottom" />
              </TransitionCollection>
            </Border.Transitions>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialContentFlyoutPresenterStyle" TargetType="FlyoutPresenter">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <!--  Start: Label Large Typo  -->
    <Setter Property="FontSize" Value="{StaticResource MaterialFlyoutFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialFlyoutCharacterSpacing}" />
    <!--  End: Label Large Typo  -->
    <Setter Property="MinWidth" Value="{StaticResource MaterialFlyoutPresenterMinWidth}" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Margin" Value="16" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="Margin" Value="16,0" />
  </Style>
  <Style x:Key="MaterialMenuFlyoutPresenterStyle" TargetType="MenuFlyoutPresenter">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <!--  Start: Label Large Typo  -->
    <Setter Property="FontSize" Value="{StaticResource MaterialFlyoutFontSize}" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialFlyoutCharacterSpacing}" />
    <!--  End: Label Large Typo  -->
    <Setter Property="MinWidth" Value="{StaticResource MaterialFlyoutPresenterMinWidth}" />
    <Setter Property="MaxWidth" Value="{StaticResource MaterialFlyoutPresenterMaxWidth}" />
    <Setter Property="CornerRadius" Value="4" />
    <Setter Property="Margin" Value="0,0" />
  </Style>
  <Style x:Key="MaterialMenuFlyoutItemStyle" TargetType="MenuFlyoutItem">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource MaterialFlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfacePressedBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerDownThemeAnimation Storyboard.TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="IconRoot.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="KeyboardAcceleratorTextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckPlaceholderStates">
                <VisualState x:Name="NoPlaceholder" />
                <VisualState x:Name="CheckPlaceholder" />
                <VisualState x:Name="IconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckAndIconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="IconRoot.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                <VisualState x:Name="KeyboardAcceleratorTextVisible">
                  <VisualState.Setters>
                    <Setter Target="KeyboardAcceleratorTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="{StaticResource MaterialFlyoutMenuItemRightMargin}" />
              <ColumnDefinition Width="Auto" MinWidth="16" />
              <ColumnDefinition Width="12" />
            </Grid.ColumnDefinitions>
            <Viewbox x:Name="IconRoot" Width="{StaticResource MaterialFlyoutMenuItemIconWidth}" Margin="12,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed">
              <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" Foreground="{StaticResource OnSurfaceVariantBrush}" />
            </Viewbox>
            <TextBlock x:Name="TextBlock" Grid.Column="1" Margin="12,0,0,0" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialLabelLarge}" Text="{TemplateBinding Text}" />
            <!--  Mobile devices do not support keyboard shortcuts  -->
            <Grid Grid.Column="3" android:Visibility="Collapsed" ios:Visibility="Collapsed">
              <TextBlock x:Name="KeyboardAcceleratorTextBlock" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.KeyboardAcceleratorTextMinWidth}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" Foreground="{StaticResource OnSurfaceVariantBrush}" Style="{StaticResource MaterialLabelLarge}" Text="{TemplateBinding KeyboardAcceleratorTextOverride}" TextAlignment="Right" Visibility="Collapsed" />
            </Grid>
            <!--  Overlay  -->
            <Border x:Name="CommonStatesOverlay" Grid.Column="0" Grid.ColumnSpan="5" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialToggleMenuFlyoutItemStyle" TargetType="ToggleMenuFlyoutItem">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource MaterialFlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleMenuFlyoutItem">
          <Grid x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfacePressedBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <PointerDownThemeAnimation Storyboard.TargetName="AnimationRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="IconRoot.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="CheckGlyph.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="KeyboardAcceleratorTextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="UncheckedWithIcon">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedWithIcon">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                    <Setter Target="CheckGlyph.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                <VisualState x:Name="KeyboardAcceleratorTextVisible">
                  <VisualState.Setters>
                    <Setter Target="KeyboardAcceleratorTextBlock.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="AnimationRoot">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{StaticResource MaterialFlyoutMenuItemRightMargin}" />
                <ColumnDefinition Width="Auto" MinWidth="16" />
                <ColumnDefinition Width="12" />
              </Grid.ColumnDefinitions>
              <Path x:Name="CheckGlyph" Width="{StaticResource MaterialFlyoutMenuToggleCheckGlyphWidth}" Height="{StaticResource MaterialFlyoutMenuToggleCheckGlyphHeight}" VerticalAlignment="Center" Margin="12,0" Data="{StaticResource MaterialFlyoutCheckGlyphPathStyle}" Fill="{StaticResource OnSurfaceVariantBrush}" Opacity="0" Stretch="Uniform" />
              <Viewbox x:Name="IconRoot" Grid.Column="1" Width="{StaticResource MaterialFlyoutMenuItemIconWidth}" Height="{StaticResource MaterialFlyoutMenuItemIconHeight}" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed">
                <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" Foreground="{StaticResource OnSurfaceVariantBrush}" />
              </Viewbox>
              <TextBlock x:Name="TextBlock" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialLabelLarge}" Text="{TemplateBinding Text}" />
              <!--  Mobile devices do not support keyboard shortcuts  -->
              <Grid Grid.Column="3" android:Visibility="Collapsed" ios:Visibility="Collapsed">
                <TextBlock x:Name="KeyboardAcceleratorTextBlock" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" Foreground="{StaticResource OnSurfaceVariantBrush}" Style="{StaticResource MaterialLabelLarge}" Text="{TemplateBinding KeyboardAcceleratorTextOverride}" TextAlignment="Right" Visibility="{Binding KeyboardAcceleratorTextOverride, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyOrNullToCollapsed}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              </Grid>
            </Grid>
            <!--  Overlay  -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMenuFlyoutSubItemStyle" TargetType="MenuFlyoutSubItem">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceBrush}" />
    <Setter Property="Height" Value="{StaticResource MaterialFlyoutMenuItemHeight}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutSubItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceHoverBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfacePressedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SubMenuOpened">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.(RevealBrush.State)" Value="Pressed" />
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceSelectedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="IconRoot.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="SubItemChevron.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="CommonStatesOverlay.Background" Value="{StaticResource OnSurfaceFocusedBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckPlaceholderStates">
                <VisualState x:Name="NoPlaceholder" />
                <VisualState x:Name="CheckPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckAndIconPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="TextBlock.Margin" Value="{ThemeResource MenuFlyoutItemDoublePlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Margin" Value="{ThemeResource MenuFlyoutItemPlaceholderThemeThickness}" />
                    <Setter Target="IconRoot.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Margin="12,0,0,0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconRoot" Grid.Column="0" Width="{StaticResource MaterialFlyoutMenuItemIconWidth}" Height="{StaticResource MaterialFlyoutMenuItemIconHeight}" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed">
                <ContentPresenter x:Name="IconContent" Content="{TemplateBinding Icon}" Foreground="{StaticResource OnSurfaceVariantBrush}" />
              </Viewbox>
              <TextBlock x:Name="TextBlock" Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource MaterialLabelLarge}" Text="{TemplateBinding Text}" />
              <Path x:Name="SubItemChevron" Grid.Column="1" Width="6" Height="10" Margin="54,4,16,0" VerticalAlignment="Center" Data="{StaticResource MaterialFlyoutRightArrowPathStyle}" Fill="{StaticResource OnSurfaceVariantBrush}" Stretch="Uniform" />
            </Grid>
            <!--  Overlay  -->
            <Border x:Name="CommonStatesOverlay" Background="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialMenuFlyoutSeparatorStyle" TargetType="MenuFlyoutSeparator">
    <Setter Property="Background" Value="{StaticResource SurfaceVariantBrush}" />
    <Setter Property="Padding" Value="0,8" />
    <Setter Property="Height" Value="{StaticResource MaterialFlyoutMenuSeparatorHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="MenuFlyoutSeparator">
          <Rectangle Height="{TemplateBinding Height}" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\HyperlinkButton.xaml-->
  <Style x:Key="MaterialHyperlinkButtonStyle" TargetType="HyperlinkButton">
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="HyperlinkButton">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="Content.Opacity" Value="{StaticResource MediumOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="Content.Opacity" Value="{StaticResource LowOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused" />
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="Content" MinHeight="{TemplateBinding MinHeight}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}">
              <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Top" TextWrapping="Wrap" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryHyperlinkButtonStyle" TargetType="HyperlinkButton" BasedOn="{StaticResource MaterialHyperlinkButtonStyle}">
    <Setter Property="Foreground" Value="{StaticResource SecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v2\ListView.xaml-->
  <Style x:Key="MaterialListViewItemStyle" TargetType="ListViewItem">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Background" Value="{ThemeResource ListViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource ListViewItemForeground}" />
    <Setter Property="TabNavigation" Value="Local" />
    <Setter Property="IsHoldingEnabled" Value="True" />
    <Setter Property="Padding" Value="12,0,12,0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
    <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
    <Setter Property="AllowDrop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="FocusVisualPrimaryBrush" Value="{ThemeResource ListViewItemFocusVisualPrimaryBrush}" />
    <Setter Property="FocusVisualPrimaryThickness" Value="2" />
    <Setter Property="FocusVisualSecondaryBrush" Value="{ThemeResource ListViewItemFocusVisualSecondaryBrush}" />
    <Setter Property="FocusVisualSecondaryThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Grid x:Name="ContentBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryHoverBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerDownThemeAnimation TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimarySelectedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Opacity" Duration="0:0:0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderBackground" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PrimaryPressedBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:PointerDownThemeAnimation TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="MultiSelectStates">
                <VisualState x:Name="MultiSelectDisabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="-32" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="32" KeySpline="0.1,0.9,0.2,1" />
                    </win:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      <DiscreteObjectKeyFrame KeyTime="0:0:0.333" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultiSelectEnabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheckBoxTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectClipTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </win:DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterTranslateTransform" Storyboard.TargetProperty="X">
                      <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-32" />
                      <SplineDoubleKeyFrame KeyTime="0:0:0.333" Value="0" KeySpline="0.1,0.9,0.2,1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectSquare" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MultiSelectCheck" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterGrid" Storyboard.TargetProperty="Margin">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="32,0,0,0" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DataVirtualizationStates">
                <VisualState x:Name="DataAvailable" />
                <VisualState x:Name="DataPlaceholder">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextBlock" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderRect" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ReorderHintStates">
                <VisualState x:Name="NoReorderHint" />
                <VisualState x:Name="BottomReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Bottom" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TopReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Top" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="RightReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Right" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="LeftReorderHint">
                  <Storyboard>
                    <win:DragOverThemeAnimation TargetName="ContentBorder" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" Direction="Left" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="NoReorderHint" GeneratedDuration="0:0:0.2" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="Dragging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDragThemeOpacity}" />
                    <win:DragItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggingTarget">
                  <Storyboard>
                    <win:DropTargetItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleDraggingPrimary">
                  <Storyboard>
                    <!-- These two Opacity animations are required - the FadeInThemeAnimations
										 on the same elements animate an internal Opacity. -->
                    <DoubleAnimation Storyboard.TargetName="MultiArrangeOverlayBackground" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="MultiArrangeOverlayText" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                    <DoubleAnimation Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Opacity" Duration="0" To="{ThemeResource ListViewItemDragThemeOpacity}" />
                    <win:FadeInThemeAnimation TargetName="MultiArrangeOverlayBackground" />
                    <win:FadeInThemeAnimation TargetName="MultiArrangeOverlayText" />
                    <win:DragItemThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleDraggingSecondary">
                  <Storyboard>
                    <win:FadeOutThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggedPlaceholder">
                  <Storyboard>
                    <win:FadeOutThemeAnimation TargetName="ContentBorder" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="NotDragging" GeneratedDuration="0:0:0.2" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="BorderBackground" IsHitTestVisible="False" Fill="{ThemeResource SystemControlHighlightListAccentLowBrush}" Opacity="0" Control.IsTemplateFocusTarget="True" />
            <Grid x:Name="ContentPresenterGrid" Background="Transparent" Margin="0,0,0,0">
              <Grid.RenderTransform>
                <TranslateTransform x:Name="ContentPresenterTranslateTransform" />
              </Grid.RenderTransform>
              <ContentPresenter x:Name="ContentPresenter" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" xamarin:ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
            </Grid>
            <!-- The 'Xg' text simulates the amount of space one line of text will occupy.
						  In the DataPlaceholder state, the Content is not loaded yet so we
						  approximate the size of the item using placeholder text. -->
            <TextBlock x:Name="PlaceholderTextBlock" Opacity="0" Text="Xg" Foreground="{x:Null}" Margin="{TemplateBinding Padding}" IsHitTestVisible="False" AutomationProperties.AccessibilityView="Raw" />
            <Rectangle x:Name="PlaceholderRect" Visibility="Collapsed" Fill="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}" />
            <Rectangle x:Name="MultiArrangeOverlayBackground" IsHitTestVisible="False" Opacity="0" Fill="{ThemeResource ListViewItemDragBackgroundThemeBrush}" Grid.ColumnSpan="2" />
            <Border x:Name="MultiSelectSquare" BorderBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" BorderThickness="2" Width="20" Height="20" Margin="12,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="Collapsed">
              <Border.Clip>
                <RectangleGeometry Rect="0,0,20,20">
                  <win:RectangleGeometry.Transform>
                    <TranslateTransform x:Name="MultiSelectClipTransform" />
                  </win:RectangleGeometry.Transform>
                </RectangleGeometry>
              </Border.Clip>
              <Border.RenderTransform>
                <TranslateTransform x:Name="MultiSelectCheckBoxTransform" />
              </Border.RenderTransform>
              <FontIcon x:Name="MultiSelectCheck" FontFamily="{ThemeResource SymbolThemeFontFamily}" win:Glyph="&#xE73E;" xamarin:Glyph="&#xE081;" FontSize="16" Foreground="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" Visibility="Collapsed" Opacity="0" />
            </Border>
            <TextBlock x:Name="MultiArrangeOverlayText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.DragItemsCount}" Foreground="{ThemeResource ListViewItemDragForegroundThemeBrush}" FontFamily="{StaticResource MaterialRegularFontFamily}" FontSize="26.667" IsHitTestVisible="False" Opacity="0" TextWrapping="Wrap" TextTrimming="WordEllipsis" Margin="18,9,0,0" AutomationProperties.AccessibilityView="Raw" Grid.ColumnSpan="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialListViewStyle" TargetType="ListView">
    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialListViewItemStyle}" />
  </Style>
  <!--origin: Styles\Controls\v2\NavigationView.xaml-->
  <Thickness x:Key="MaterialNavigationViewAutoSuggestBoxMargin">10,0,16,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewAutoSuggestBoxMargin">12,0,12,0</Thickness>
  <x:Double x:Key="MaterialNavigationViewPaneToggleButtonSize">40</x:Double>
  <x:Double x:Key="MaterialNavigationViewPaneToggleButtonHeight">40</x:Double>
  <x:Double x:Key="MaterialNavigationViewPaneToggleButtonWidth">40</x:Double>
  <x:Double x:Key="MaterialNavigationViewCompactPaneLength">40</x:Double>
  <x:Double x:Key="MaterialNavigationViewTopPaneHeight">40</x:Double>
  <x:Double x:Key="MaterialTopNavigationViewPaneCustomContentMinWidth">48</x:Double>
  <x:Double x:Key="MaterialTopNavigationViewOverflowButtonWidth">48</x:Double>
  <x:Double x:Key="MaterialTopNavigationViewOverflowButtonHeight">40</x:Double>
  <x:Double x:Key="MaterialNavigationViewItemOnLeftMinHeight">40</x:Double>
  <x:Double x:Key="MaterialNavigationViewPaneHeaderRowMinHeight">4</x:Double>
  <x:Double x:Key="MaterialNavigationViewItemSeparatorHeight">1</x:Double>
  <x:Double x:Key="MaterialTopNavigationViewItemSeparatorWidth">1</x:Double>
  <Thickness x:Key="MaterialNavigationViewToggleBorderThickness">1</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemBorderThickness">1</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemOnLeftIconBoxMargin">12,0,12,0</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemInnerHeaderMargin">10,0,0,0</Thickness>
  <Thickness x:Key="MaterialNavigationViewMinimalHeaderMargin">8,5,0,0</Thickness>
  <Thickness x:Key="MaterialNavigationViewHeaderMargin">12,5,0,11</Thickness>
  <Thickness x:Key="MaterialNavigationViewPaneTitlePresenterMargin">8,4,0,0</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemMargin">0</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemSeparatorMargin">16,10</Thickness>
  <Thickness x:Key="MaterialNavigationViewCompactItemSeparatorMargin">16,10</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemSeparatorMargin">10,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewOverflowButtonMargin">0</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemContentPresenterMargin">0,0,20,0</Thickness>
  <Thickness x:Key="MaterialNavigationViewCompactItemContentPresenterMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemContentPresenterMargin">8,0,16,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemContentOnlyContentPresenterMargin">12,0</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemExpandChevronMargin">-20,0,6,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemExpandChevronMargin">-16,0,0,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemIconOnlyExpandChevronMargin">0,0,0,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemContentOnlyExpandChevronMargin">-12,0,0,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemOnOverflowContentPresenterMargin">12,0,20,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemOnOverflowNoIconContentPresenterMargin">16,0,20,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemOnOverflowExpandChevronMargin">-4,0,6,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewItemOnOverflowExpandChevronPadding">12,0,12,0</Thickness>
  <Thickness x:Key="MaterialTopNavigationViewOverflowMenuPadding">0,8</Thickness>
  <Thickness x:Key="MaterialNavigationViewItemChildrenMenuFlyoutPadding">0,8</Thickness>
  <x:Double x:Key="MaterialNavigationViewItemExpandedGlyphFontSize">12.0</x:Double>
  <x:String x:Key="MaterialNavigationViewItemExpandedGlyph">&#xE70D;</x:String>
  <StaticResource x:Key="MaterialNavigationViewDefaultPaneBackground" ResourceKey="SurfaceBrush" />
  <StaticResource x:Key="MaterialNavigationViewSelectionIndicatorForeground" ResourceKey="SystemControlTransparentBrush" />
  <StaticResource x:Key="MaterialNavigationViewPaneBorderBrush" ResourceKey="SystemControlTransparentBrush" />
  <Thickness x:Key="MaterialNavigationViewPaneBorderThickness">0</Thickness>
  <StaticResource x:Key="MaterialNavigationViewRippleFeedback" ResourceKey="PrimaryFocusedBrush" />
  <Thickness x:Key="MaterialNavigationViewItemPadding">8,2</Thickness>
  <CornerRadius x:Key="MaterialNavigationViewItemCornerRadius">16</CornerRadius>
  <xamarin:Style x:Key="MaterialNavigationViewResetSplitViewStyle" TargetType="SplitView">
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="CornerRadius" Value="16" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="OpenPaneLength" Value="{ThemeResource SplitViewOpenPaneThemeLength}" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource SplitViewCompactPaneThemeLength}" />
    <Setter Property="PaneBackground" Value="{ThemeResource SystemControlPageBackgroundChromeLowBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="SplitView">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Closed" To="OpenOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.35" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Closed" To="OpenOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" To="0" Duration="0:0:0.35" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactLeft" To="OpenCompactOverlayLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ClosedCompactRight" To="OpenCompactOverlayRight">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayLeft" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" From="0" To="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenOverlayRight" To="Closed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <xamarin:DoubleAnimation Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0.12" />
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneTransform" Storyboard.TargetProperty="TranslateX">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayLeft" To="ClosedCompactLeft">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="OpenCompactOverlayRight" To="ClosedCompactRight">
                    <Storyboard>
                      <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </xamarin:ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.12" KeySpline="0.1,0.9 0.2,1.0" Value="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                      </win:DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Closed">
                  <!-- Workaround because values aren't properly reset on Wasm. -->
                  <!--<Storyboard>
										<netstdref:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
																			Storyboard.TargetName="PaneRoot">
											<DiscreteObjectKeyFrame KeyTime="0:0:0"
																	Value="Collapsed" />
										</netstdref:ObjectAnimationUsingKeyFrames>
										<netstdref:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Grid.Column)"
																			Storyboard.TargetName="ContentRoot">
											<DiscreteObjectKeyFrame KeyTime="0:0:0"
																	Value="0" />
										</netstdref:ObjectAnimationUsingKeyFrames>
									</Storyboard>-->
                </VisualState>
                <VisualState x:Name="ClosedCompactLeft">
                  <VisualState.Setters>
                    <Setter Target="PaneTransform.TranslateX" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.LeftClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:DoubleAnimation Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.NegativeOpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ClosedCompactRight">
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.RightClip, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="2" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <win:DoubleAnimation Storyboard.TargetName="PaneClipRectangleTransform" Storyboard.TargetProperty="TranslateX" To="{Binding TemplateSettings.OpenPaneLengthMinusCompactLength, RelativeSource={RelativeSource Mode=TemplatedParent}}" Duration="0:0:0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineLeft">
                  <VisualState.Setters>
                    <Setter Target="PaneTransform.TranslateX" Value="0" />
                  </VisualState.Setters>
                  <Storyboard>
                    <xamarin:ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Clip" Storyboard.TargetName="PaneRoot">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Null}" />
                    </xamarin:ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenInlineRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayLeft">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.Column)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="OpenCompactOverlayRight">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition1" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="*" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ColumnDefinition2" Storyboard.TargetProperty="Width">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding TemplateSettings.CompactPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="(Grid.ColumnSpan)">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PaneRoot" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Right" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="HorizontalAlignment">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Left" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HCPaneBorder" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LightDismissLayer" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="{Binding TemplateSettings.OpenPaneGridLength, FallbackValue=0, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
              <ColumnDefinition x:Name="ColumnDefinition2" Width="*" />
            </Grid.ColumnDefinitions>
            <!-- Content Area -->
            <Grid x:Name="ContentRoot" Grid.ColumnSpan="2">
              <Border Child="{TemplateBinding Content}" />
              <win:Rectangle x:Name="LightDismissLayer" Fill="{StaticResource SplitViewDismissBackgroundColor}" Visibility="Collapsed" />
              <xamarin:Button x:Name="LightDismissLayer" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Button.Template>
                  <ControlTemplate>
                    <Border Background="{StaticResource SplitViewDismissBackgroundColor}" />
                  </ControlTemplate>
                </Button.Template>
              </xamarin:Button>
            </Grid>
            <!-- Pane Content Area -->
            <Grid x:Name="PaneRoot" Grid.ColumnSpan="2" HorizontalAlignment="Left" Visibility="Collapsed" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding PaneBackground}" Width="{Binding TemplateSettings.OpenPaneLength, RelativeSource={RelativeSource Mode=TemplatedParent}}">
              <win:Grid.Clip>
                <RectangleGeometry x:Name="PaneClipRectangle">
                  <win:RectangleGeometry.Transform>
                    <CompositeTransform x:Name="PaneClipRectangleTransform" />
                  </win:RectangleGeometry.Transform>
                </RectangleGeometry>
              </win:Grid.Clip>
              <Grid.RenderTransform>
                <CompositeTransform x:Name="PaneTransform" />
              </Grid.RenderTransform>
              <Border Child="{TemplateBinding Pane}" />
              <Rectangle x:Name="HCPaneBorder" Visibility="Collapsed" Fill="{ThemeResource SystemControlForegroundTransparentBrush}" x:DeferLoadStrategy="Lazy" Width="1" HorizontalAlignment="Right" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </xamarin:Style>
  <Style x:Key="MaterialNavigationViewPaneToggleButtonStyle" TargetType="Button">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
    <Setter Property="MinHeight" Value="{StaticResource MaterialNavigationViewPaneToggleButtonHeight}" />
    <Setter Property="MinWidth" Value="{StaticResource MaterialNavigationViewPaneToggleButtonWidth}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialNavigationViewItemForeground}" />
    <Setter Property="BorderThickness" Value="{ThemeResource MaterialNavigationViewToggleBorderThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="LayoutRoot" MinWidth="{TemplateBinding MinWidth}" Height="{TemplateBinding MinHeight}" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PaneToggleButtonIconWidthColumn" Width="{ThemeResource MaterialNavigationViewPaneToggleButtonWidth}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="{ThemeResource MaterialNavigationViewPaneToggleButtonHeight}" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewButtonBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewButtonForegroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewButtonForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewButtonBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewButtonForegroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewButtonForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewButtonBackgroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewButtonForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundChecked}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource ToggleButtonBackgroundCheckedDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource ToggleButtonForegroundCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Viewbox x:Name="IconHost" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
              <TextBlock x:Name="Icon" Text="&#xE700;" FontFamily="{StaticResource SymbolThemeFontFamily}" FontSize="{TemplateBinding FontSize}" AutomationProperties.AccessibilityView="Raw" />
            </Viewbox>
            <ContentPresenter x:Name="ContentPresenter" VerticalContentAlignment="Center" Content="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" Grid.Column="1" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationViewPaneSearchButtonStyle" TargetType="Button">
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Content" Value="&#xE11A;" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="BorderThickness" Value="{ThemeResource MaterialNavigationViewToggleBorderThickness}" />
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialNavigationViewItemForeground}" />
  </Style>
  <Style x:Key="MaterialNavigationViewOverflowButtonStyleWhenPaneOnTop" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{StaticResource MaterialTopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{StaticResource MaterialTopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <FontIcon x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xE10C;" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="Height" Value="{StaticResource MaterialTopNavigationViewOverflowButtonHeight}" />
    <Setter Property="Width" Value="{StaticResource MaterialTopNavigationViewOverflowButtonWidth}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="RootGrid.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <FontIcon x:Name="Icon" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="20" Glyph="&#xE10C;" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationViewItemHeaderTextStyle" TargetType="TextBlock" BasedOn="{StaticResource MaterialTitleSmall}">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
  </Style>
  <Style x:Key="MaterialNavigationViewTitleHeaderContentControlTextStyle" TargetType="ContentControl">
    <Setter Property="FontSize" Value="14" />
    <Setter Property="FontWeight" Value="Medium" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialMediumFontFamily}" />
    <Setter Property="Margin" Value="{ThemeResource MaterialNavigationViewHeaderMargin}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="MaterialBaseNavigationViewStyle" TargetType="controls:NavigationView">
    <Setter Property="PaneToggleButtonStyle" Value="{StaticResource MaterialNavigationViewPaneToggleButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource MaterialNavigationViewCompactPaneLength}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource MaterialNavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopNavigationMinimal" />
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource MaterialNavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonVisible" />
                <VisualState x:Name="TogglePaneButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <Setter Target="PaneTitleTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneVisibilityGroup">
                <VisualState x:Name="PaneVisible" />
                <VisualState x:Name="PaneCollapsed">
                  <VisualState.Setters>
                    <!-- Note that RootSplitView.DisplayMode is set in code so we don't want to -->
                    <!-- write it here and interfere. But these values work together to hide -->
                    <!-- the left pane. -->
                    <Setter Target="RootSplitView.CompactPaneLength" Value="0" />
                    <Setter Target="PaneToggleButtonGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Content layouts -->
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- DisplayMode top -->
              <StackPanel x:Name="TopNavArea">
                <!-- As of Microsoft.UI.Xaml 2.6.0-prerelease.210430001, PaneTitleOnTopPane must be present in the template -->
                <ContentControl x:Name="PaneTitleOnTopPane" Visibility="Collapsed" />
              </StackPanel>
              <!-- Displaymode (compact/minimal/normal) left -->
              <SplitView x:Name="RootSplitView" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{TemplateBinding OpenPaneLength}" PaneBackground="{ThemeResource MaterialNavigationViewDefaultPaneBackground}" xamarin:Style="{StaticResource MaterialNavigationViewResetSplitViewStyle}" Grid.Row="1">
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" HorizontalAlignment="Left" CornerRadius="16" BorderBrush="{StaticResource MaterialNavigationViewPaneBorderBrush}" BorderThickness="{StaticResource MaterialNavigationViewPaneBorderThickness}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" MinHeight="{StaticResource MaterialNavigationViewPaneHeaderRowMinHeight}" />
                      <RowDefinition Height="8" />
                      <!-- above list margin -->
                      <RowDefinition x:Name="ItemsContainerRow" Height="*" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="PaneHeaderContentBorderWrapper" MinHeight="{StaticResource MaterialNavigationViewPaneHeaderRowMinHeight}">
                      <!-- TODO: Uno specific: MinHeight and x:Name used here as RowDefinifiont.MinHeight does not work (issue #4727) -->
                      <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaneHeaderContentBorderRow" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="PaneHeaderCloseButtonColumn" />
                        <ColumnDefinition x:Name="PaneHeaderToggleButtonColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                    </Grid>
                    <!-- "Non header" content -->
                    <!-- MenuItems -->
                    <ScrollViewer x:Name="ItemsContainerGrid" Grid.Row="2" Margin="0,0,0,8" MinHeight="{ThemeResource MaterialNavigationViewItemOnLeftMinHeight}" TabNavigation="Local" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto">
                      <!-- Left nav ItemsRepeater -->
                      <controls:ItemsRepeater x:Name="MenuItemsHost" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content" />
                    </ScrollViewer>
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="ContentTopPadding" Grid.ColumnSpan="2" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}" />
                    <Grid x:Name="ContentLeftPadding" Grid.Row="1" />
                    <ContentControl x:Name="HeaderContent" Grid.Row="1" Grid.Column="1" MinHeight="{StaticResource MaterialNavigationViewPaneToggleButtonHeight}" IsTabStop="False" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource MaterialNavigationViewTitleHeaderContentControlTextStyle}" />
                    <ContentPresenter AutomationProperties.LandmarkType="Main" Grid.Row="2" Grid.ColumnSpan="2" Content="{TemplateBinding Content}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
            </Grid>
            <!-- Button grid -->
            <!--
							TODO: Uno Specific: Canvas.ZIndex is not implemented, so the
							button Grid is moved below the content SplitView in the template
						-->
            <Grid x:Name="PaneToggleButtonGrid" Margin="0,0,0,8" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewBackButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="NavigationViewCloseButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewCloseButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="TogglePaneButton" Style="{TemplateBinding PaneToggleButtonStyle}" AutomationProperties.LandmarkType="Navigation" HorizontalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" VerticalAlignment="Top">
                  <TextBlock x:Name="PaneTitleTextBlock" Grid.Column="0" Text="{TemplateBinding PaneTitle}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource MaterialNavigationViewItemHeaderTextStyle}" />
                </Button>
                <Grid x:Name="PaneTitleHolder" Visibility="Collapsed">
                  <ContentControl x:Name="PaneTitlePresenter" Margin="{ThemeResource MaterialNavigationViewPaneTitlePresenterMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialNavigationViewItemPresenterStyleWhenOnLeftPane">
    <Setter Property="Foreground" Value="{ThemeResource MaterialNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" MinHeight="{ThemeResource MaterialNavigationViewItemOnLeftMinHeight}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="SelectionIndicatorBorder.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelected}" />
                    <contract4Present:Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                    <Setter Target="BackgroundBorder.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushCheckedDisabled}" />
                    <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneAndTopLevelItemStates">
                <VisualState x:Name="NotClosedCompactAndTopLevelItem" />
                <VisualState x:Name="ClosedCompactAndTopLevelItem">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialNavigationViewCompactItemContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="BackgroundBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" Margin="{TemplateBinding Padding}" />
            <Border x:Name="SelectionIndicatorBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent" Margin="{TemplateBinding Padding}" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Border Margin="{TemplateBinding Padding}">
              <!-- dont apply Margin on Ripple, as it will be applied twice (on the Ripple and on its template root) -->
              <!-- material#446: skia:Opacity to workaround Ripple opacity issue -->
              <um:Ripple Feedback="{StaticResource MaterialNavigationViewRippleFeedback}" skia:Opacity="0.12" CornerRadius="{TemplateBinding CornerRadius}" />
            </Border>
            <!-- disabled hit-test because we dont want the content or the chevron to block the click event -->
            <!-- as the ripple above would need it to play its effect -->
            <Grid x:Name="PresenterContentRootGrid" IsHitTestVisible="False">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0.0" Visibility="Collapsed" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid HorizontalAlignment="Stretch" x:Name="ContentGrid" MinHeight="{ThemeResource MaterialNavigationViewItemOnLeftMinHeight}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="8" />
                  <ColumnDefinition x:Name="IconColumn" Width="{ThemeResource MaterialNavigationViewCompactPaneLength}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Grid.Column="1" Height="16" Margin="{ThemeResource MaterialNavigationViewItemOnLeftIconBoxMargin}">
                  <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="2" FontSize="14" FontWeight="Medium" FontFamily="{StaticResource MaterialMediumFontFamily}" Margin="{ThemeResource MaterialNavigationViewItemContentPresenterMargin}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="3" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialNavigationViewItemExpandChevronMargin}" Background="Transparent">
                  <TextBlock RenderTransformOrigin="0.5, 0.5" Foreground="{ThemeResource MaterialNavigationViewItemForeground}" FontSize="{ThemeResource MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialNavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus">
    <Setter Property="Foreground" Value="Green" />
    <Setter Property="Background" Value="Red" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" MinHeight="{ThemeResource MaterialNavigationViewItemOnLeftMinHeight}" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="{ThemeResource ListViewItemDisabledThemeOpacity}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource SystemControlHighlightAccentBrush}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource SystemControlHighlightAltChromeWhiteBrush}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource SystemControlHighlightAltChromeWhiteBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="IconVisible" />
                <VisualState x:Name="IconCollapsed">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="16" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneAndTopLevelItemStates">
                <VisualState x:Name="NotClosedCompactAndTopLevelItem" />
                <VisualState x:Name="ClosedCompactAndTopLevelItem">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialNavigationViewCompactItemContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="PresenterContentRootGrid">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid x:Name="ContentGrid" MinHeight="{ThemeResource MaterialNavigationViewItemOnLeftMinHeight}" HorizontalAlignment="Left">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="IconColumn" Width="{ThemeResource MaterialNavigationViewCompactPaneLength}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Margin="{ThemeResource MaterialNavigationViewItemOnLeftIconBoxMargin}">
                  <ContentPresenter x:Name="Icon" Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Icon}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Foreground="{TemplateBinding Foreground}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Margin="{ThemeResource MaterialNavigationViewItemContentPresenterMargin}" Padding="{TemplateBinding Padding}" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialNavigationViewItemExpandChevronMargin}" Background="Transparent">
                  <TextBlock Foreground="{ThemeResource MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItem" x:Key="MaterialNavigationViewSettingsItemStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{ThemeResource MaterialNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition x:Name="IconRow" Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Viewbox x:Name="IconBox" Grid.Row="1" Grid.Column="1" Height="16" Width="48" Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialNavigationViewItemPresenterStyleWhenOnTopPane">
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundSelected}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPointerOver}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="PointerOver" />-->
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemBackgroundPressed}" />
                    <Setter Target="PointerRectangle.Fill" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundPressed}" />
                    <!--Removing RevealBrush usage for now as it is not present in WinUI 3-->
                    <!--<contract4Present:Setter Target="LayoutRoot.(media:RevealBrush.State)"
																 Value="Pressed" />-->
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="RevealBorder.BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrushCheckedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.MinWidth" Value="48" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="4,0,4,4" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialTopNavigationViewItemIconOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialTopNavigationViewItemContentOnlyContentPresenterMargin}" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="12,0,12,4" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialTopNavigationViewItemContentOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Border x:Name="RevealBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialTopNavigationViewItemContentPresenterMargin}" TextWrapping="NoWrap" Foreground="{TemplateBinding Foreground}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialTopNavigationViewItemExpandChevronMargin}" Background="Transparent">
                <TextBlock Foreground="{ThemeResource MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                  <TextBlock.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                  </TextBlock.RenderTransform>
                </TextBlock>
              </Grid>
            </Grid>
            <Grid x:Name="SelectionIndicatorGrid" Margin="16,0,16,4" VerticalAlignment="Bottom">
              <Rectangle x:Name="SelectionIndicator" Height="2" Fill="{ThemeResource MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialNavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus">
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialTopNavigationViewItemRevealBackgroundFocused}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemRevealIconForegroundFocused}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemRevealContentForegroundFocused}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly">
                  <VisualState.Setters>
                    <Setter Target="PointerRectangle.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.MinWidth" Value="48" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="4,0" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialTopNavigationViewItemIconOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialTopNavigationViewItemContentOnlyContentPresenterMargin}" />
                    <Setter Target="SelectionIndicatorGrid.Margin" Value="12,0" />
                    <Setter Target="ExpandCollapseChevron.Margin" Value="{ThemeResource MaterialTopNavigationViewItemContentOnlyExpandChevronMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="PointerRectangle" Fill="Transparent" Visibility="Collapsed" />
            <Grid x:Name="ContentGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialTopNavigationViewItemContentPresenterMargin}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialNavigationViewItemExpandChevronMargin}" Background="Transparent">
                <TextBlock Foreground="{ThemeResource MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                  <TextBlock.RenderTransform>
                    <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                  </TextBlock.RenderTransform>
                </TextBlock>
              </Grid>
            </Grid>
            <Grid x:Name="SelectionIndicatorGrid" Margin="16,0,16,4" VerticalAlignment="Bottom">
              <Rectangle x:Name="SelectionIndicator" Height="2" Fill="{ThemeResource MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" x:Key="MaterialNavigationViewItemPresenterStyleWhenOnTopPaneOverflow">
    <Setter Property="Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForeground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:NavigationViewItemPresenter">
          <Grid x:Name="LayoutRoot" Height="40" Background="{TemplateBinding Background}" Control.IsTemplateFocusTarget="True">
            <Grid.Resources>
              <Storyboard x:Name="ExpandCollapseRotateExpandedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="0.0" To="180.0" Duration="0:0:0.1" />
              </Storyboard>
              <Storyboard x:Name="ExpandCollapseRotateCollapsedStoryboard">
                <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" From="180.0" To="0.0" Duration="0:0:0.1" />
              </Storyboard>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PointerStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelected}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Background" Value="{ThemeResource MaterialNavigationViewItemBackgroundSelectedPressed}" />
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialNavigationViewItemForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Icon.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource MaterialTopNavigationViewItemForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NavigationViewIconPositionStates">
                <VisualState x:Name="IconOnLeft" />
                <VisualState x:Name="IconOnly" />
                <VisualState x:Name="ContentOnly">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Margin" Value="{ThemeResource MaterialTopNavigationViewItemOnOverflowNoIconContentPresenterMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ChevronStates">
                <VisualState x:Name="ChevronHidden" />
                <VisualState x:Name="ChevronVisibleOpen">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="180" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ChevronVisibleClosed">
                  <VisualState.Setters>
                    <Setter Target="ExpandCollapseChevron.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevronRotateTransform.Angle" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="PresenterContentRootGrid">
              <!-- Wrap SelectionIndicator in a grid so that its offset is 0,0 - this enables the offset animation. -->
              <Grid Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle x:Name="SelectionIndicator" Width="2" Height="24" Fill="{ThemeResource MaterialNavigationViewSelectionIndicatorForeground}" Opacity="0.0" contract7Present:RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7Present:RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" contract7NotPresent:RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              </Grid>
              <Grid x:Name="ContentGrid">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Viewbox x:Name="IconBox" Height="16" Width="16" Margin="16,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">
                  <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                </Viewbox>
                <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Margin="{ThemeResource MaterialTopNavigationViewItemOnOverflowContentPresenterMargin}" Foreground="{TemplateBinding Foreground}" TextWrapping="NoWrap" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
                <Grid x:Name="ExpandCollapseChevron" Grid.Column="2" Visibility="Collapsed" HorizontalAlignment="Right" Width="40" Margin="{ThemeResource MaterialTopNavigationViewItemOnOverflowExpandChevronMargin}" Padding="{ThemeResource MaterialTopNavigationViewItemOnOverflowExpandChevronPadding}" Background="Transparent">
                  <TextBlock Foreground="{ThemeResource MaterialNavigationViewItemForeground}" RenderTransformOrigin="0.5, 0.5" FontSize="{ThemeResource MaterialNavigationViewItemExpandedGlyphFontSize}" Text="{StaticResource MaterialNavigationViewItemExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                    <TextBlock.RenderTransform>
                      <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" />
                    </TextBlock.RenderTransform>
                  </TextBlock>
                </Grid>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialBaseNavigationViewItemStyle" TargetType="controls:NavigationViewItem">
    <Setter Property="Foreground" Value="{ThemeResource MaterialNavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource MaterialNavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MaterialNavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource MaterialNavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Margin" Value="{ThemeResource MaterialNavigationViewItemMargin}" />
    <Setter Property="Padding" Value="{ThemeResource MaterialNavigationViewItemPadding}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="TabNavigation" Value="Once" />
    <contract7Present:Setter Property="CornerRadius" Value="{ThemeResource MaterialNavigationViewItemCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="NVIRootGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemOnNavigationViewListPositionStates">
                <VisualState x:Name="OnLeftNavigation">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialNavigationViewItemPresenterStyleWhenOnLeftPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnLeftNavigationReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialNavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimary">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource MaterialTopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialNavigationViewItemPresenterStyleWhenOnTopPane}" />
                    <contract7NotPresent:Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                    <contract7Present:Setter Target="ChildrenFlyout.Placement" Value="BottomEdgeAlignedLeft" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimaryReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource MaterialTopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialNavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus}" />
                    <contract7NotPresent:Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                    <contract7Present:Setter Target="ChildrenFlyout.Placement" Value="BottomEdgeAlignedLeft" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationOverflow">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MaterialNavigationViewItemPresenterStyleWhenOnTopPaneOverflow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- on uwp: primitiveContract7Present:CornerRadius is to be expected, using contract7Present wont work. on uno, it is the opposite... -->
            <!-- opting to drop the conditional xmlns as it will be true anyways -->
            <primitives:NavigationViewItemPresenter x:Name="NavigationViewItemPresenter" Icon="{TemplateBinding Icon}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" CornerRadius="{TemplateBinding CornerRadius}" IsTabStop="false" Control.IsTemplateFocusTarget="True" />
            <controls:ItemsRepeater Grid.Row="1" Visibility="Collapsed" x:Name="NavigationViewItemMenuItemsHost">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Vertical" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <FlyoutBase.AttachedFlyout>
              <Flyout x:Name="ChildrenFlyout" contract7NotPresent:Placement="Right" contract7Present:Placement="RightEdgeAlignedTop">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="{ThemeResource MaterialNavigationViewItemChildrenMenuFlyoutPadding}" />
                    <!-- Set negative top margin to make the flyout align exactly with the button -->
                    <Setter Property="Margin" Value="0,-4,0,0" />
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                    <contract7Present:Setter Property="CornerRadius" Value="{ThemeResource OverlayCornerRadius}" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" contract7Present:CornerRadius="{TemplateBinding CornerRadius}" contract7NotPresent:CornerRadius="{ThemeResource OverlayCornerRadius}" />
                          </ScrollViewer>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <Grid x:Name="FlyoutRootGrid">
                  <Grid x:Name="FlyoutContentGrid" />
                </Grid>
              </Flyout>
            </FlyoutBase.AttachedFlyout>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialNavigationViewStyle" TargetType="controls:NavigationView" BasedOn="{StaticResource MaterialBaseNavigationViewStyle}" />
  <Style x:Key="MaterialNavigationViewItemStyle" TargetType="controls:NavigationViewItem" BasedOn="{StaticResource MaterialBaseNavigationViewItemStyle}" />
  <!--origin: Styles\Controls\v2\PasswordBox.xaml-->
  <x:String x:Key="MaterialRevealGlyphPathData">M11 0.5C6 0.5 1.73 3.61 0 8C1.73 12.39 6 15.5 11 15.5C16 15.5 20.27 12.39 22 8C20.27 3.61 16 0.5 11 0.5ZM11 13C8.24 13 6 10.76 6 8C6 5.24 8.24 3 11 3C13.76 3 16 5.24 16 8C16 10.76 13.76 13 11 13ZM11 5C9.34 5 8 6.34 8 8C8 9.66 9.34 11 11 11C12.66 11 14 9.66 14 8C14 6.34 12.66 5 11 5Z</x:String>
  <SolidColorBrush x:Key="MaterialDisabledOutlinedPasswordBoxBorderBrush" Opacity="0.12" Color="{ThemeResource OnSurfaceColor}" />
  <StaticResource x:Key="MaterialPasswordBoxFontFamily" ResourceKey="MaterialBodyLargeFontFamily" />
  <StaticResource x:Key="MaterialPasswordBoxFontWeight" ResourceKey="MaterialBodyLargeFontWeight" />
  <StaticResource x:Key="MaterialPasswordBoxFontSize" ResourceKey="MaterialBodyLargeFontSize" />
  <StaticResource x:Key="MaterialPasswordBoxCharacterSpacing" ResourceKey="MaterialBodyLargeCharacterSpacing" />
  <Style x:Key="MaterialRevealButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="GlyphElement" Width="20" HorizontalAlignment="Center" VerticalAlignment="Center" ios:Margin="0,2,0,0" AutomationProperties.AccessibilityView="Raw" Data="{StaticResource MaterialRevealGlyphPathData}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceVariantBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceLowBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <!-- Start: Body Large Typo -->
    <Setter Property="FontFamily" Value="{StaticResource MaterialPasswordBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialPasswordBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialPasswordBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialPasswordBoxCharacterSpacing}" />
    <!-- End: Body Large Typo -->
    <Setter Property="Padding" Value="16,4,8,4" />
    <Setter Property="MinHeight" Value="58" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="NormalBorder.Height" Value="2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="ContentElement.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="NormalBorder.Height" Value="2" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleX" To="1" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="RevealButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="TranslateY" To="-11" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="TranslateY" To="8" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleX" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleY" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Padding="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="IconPresenter" MinWidth="25" MaxWidth="34" MaxHeight="34" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <ScrollViewer x:Name="ContentElement" Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" ZoomMode="Disabled">
                <ScrollViewer.RenderTransform>
                  <CompositeTransform x:Name="ContentTransform" />
                </ScrollViewer.RenderTransform>
              </ScrollViewer>
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{StaticResource OnSurfaceVariantBrush}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="Transform" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <Button x:Name="RevealButton" Grid.Column="2" MinWidth="34" MinHeight="34" VerticalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw" IsTabStop="False" Foreground="{StaticResource OnSurfaceVariantBrush}" Style="{StaticResource MaterialRevealButtonStyle}" Visibility="Collapsed" />
            </Grid>
            <Rectangle x:Name="NormalBorder" Grid.ColumnSpan="3" Height="{StaticResource TextBoxOutlinedStrokeHeight}" VerticalAlignment="Bottom" Fill="{TemplateBinding BorderBrush}" />
            <Rectangle x:Name="FocusedBorder" Grid.ColumnSpan="3" Height="{StaticResource TextBoxFocusStrokeWidth}" VerticalAlignment="Bottom" macos:RenderTransformOrigin="0.0,0.5" not_macos:RenderTransformOrigin="0.5,0.5" Fill="{StaticResource PrimaryBrush}">
              <Rectangle.RenderTransform>
                <ScaleTransform x:Name="Scale" ScaleX="0" />
              </Rectangle.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedPasswordBoxStyle" TargetType="PasswordBox">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceLowBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="4" />
    <!-- Start: Body Large Typo -->
    <Setter Property="FontFamily" Value="{StaticResource MaterialPasswordBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialPasswordBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialPasswordBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialPasswordBoxCharacterSpacing}" />
    <!-- End: Body Large Typo -->
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="16,4,8,4" />
    <Setter Property="MinHeight" Value="56" />
    <!--  Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388  -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="PasswordBox">
          <Grid x:Name="Root" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="Root.BorderThickness" Value="2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="ContentElement.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="Root.BorderThickness" Value="2" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="RevealButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="TranslateY" To="-11" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="ContentTransform" Storyboard.TargetProperty="TranslateY" To="8" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleX" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                    <DoubleAnimation EasingFunction="{StaticResource MaterialEaseInOutFunction}" Storyboard.TargetName="Transform" Storyboard.TargetProperty="ScaleY" To="0.7" Duration="{StaticResource MaterialTextBoxAnimationDuration}" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Password, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" MinWidth="25" MaxWidth="34" MaxHeight="34" Margin="0,0,8,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
            <ScrollViewer x:Name="ContentElement" Grid.Column="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" ZoomMode="Disabled">
              <ScrollViewer.RenderTransform>
                <CompositeTransform x:Name="ContentTransform" />
              </ScrollViewer.RenderTransform>
            </ScrollViewer>
            <TextBlock x:Name="PlaceholderElement" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{StaticResource OnSurfaceLowBrush}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}">
              <TextBlock.RenderTransform>
                <CompositeTransform x:Name="Transform" />
              </TextBlock.RenderTransform>
            </TextBlock>
            <Button x:Name="RevealButton" Grid.Column="2" MinWidth="34" MinHeight="34" VerticalAlignment="Stretch" AutomationProperties.AccessibilityView="Raw" IsTabStop="False" Style="{StaticResource MaterialRevealButtonStyle}" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\ProgressBar.xaml-->
  <x:Double x:Key="MaterialProgressBarMinWidth">250</x:Double>
  <x:Double x:Key="MaterialProgressBarHeight">4</x:Double>
  <Style x:Key="MaterialProgressBarStyle" TargetType="controls:ProgressBar">
    <Setter Property="Foreground" Value="{StaticResource PrimaryVariantDarkBrush}" />
    <Setter Property="Background" Value="{StaticResource PrimaryVariantLightBrush}" />
    <Setter Property="MinWidth" Value="{StaticResource MaterialProgressBarMinWidth}" />
    <Setter Property="Height" Value="{StaticResource MaterialProgressBarHeight}" />
  </Style>
  <!--origin: Styles\Controls\v2\ProgressRing.xaml-->
  <lottie_win:LottieVisualSource x:Key="M3MaterialDeterminateAnimation_Win" UriSource="ms-appx:///Uno.Material/Assets/MaterialDeterminate.json" />
  <lottie_win:LottieVisualSource x:Key="M3MaterialIndeterminateAnimation_Win" UriSource="ms-appx:///Uno.Material/Assets/MaterialIndeterminate.json" />
  <lottie_not_win:LottieVisualSource x:Key="M3MaterialDeterminateAnimation_Uno" UriSource="embedded://Uno.Material/Uno.Material.Assets.MaterialDeterminate.json" />
  <lottie_not_win:LottieVisualSource x:Key="M3MaterialIndeterminateAnimation_Uno" UriSource="embedded://Uno.Material/Uno.Material.Assets.MaterialIndeterminate.json" />
  <Style x:Key="MaterialProgressRingStyle" TargetType="controls:ProgressRing">
    <win:Setter Property="DeterminateSource" Value="{StaticResource M3MaterialDeterminateAnimation_Win}" />
    <win:Setter Property="IndeterminateSource" Value="{StaticResource M3MaterialIndeterminateAnimation_Win}" />
    <not_win:Setter Property="DeterminateSource" Value="{StaticResource M3MaterialDeterminateAnimation_Uno}" />
    <not_win:Setter Property="IndeterminateSource" Value="{StaticResource M3MaterialIndeterminateAnimation_Uno}" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
  </Style>
  <!--origin: Styles\Controls\v2\RadioButton.xaml-->
  <GridLength x:Key="RadioStatesAreaLength">40</GridLength>
  <x:Double x:Key="RadioStatesAreaSize">40</x:Double>
  <x:Double x:Key="RadioCheckAreaSize">20</x:Double>
  <x:Double x:Key="RadioBorderThickness">2</x:Double>
  <StaticResource x:Key="MaterialRadioButtonFontFamily" ResourceKey="MaterialBodySmallFontFamily" />
  <StaticResource x:Key="MaterialRadioButtonFontWeight" ResourceKey="MaterialBodySmallFontWeight" />
  <StaticResource x:Key="MaterialRadioButtonFontSize" ResourceKey="MaterialBodySmallFontSize" />
  <StaticResource x:Key="MaterialRadioButtonCharacterSpacing" ResourceKey="MaterialBodySmallCharacterSpacing" />
  <Style x:Key="MaterialRadioButtonStyle" TargetType="RadioButton">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceMediumBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceMediumBrush}" />
    <!--Start: Body Small Typo-->
    <Setter Property="FontFamily" Value="{StaticResource MaterialRadioButtonFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialRadioButtonFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialRadioButtonFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialRadioButtonCharacterSpacing}" />
    <!--End: Body Small Typo-->
    <Setter Property="Padding" Value="4,0,0,0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="{StaticResource RadioStatesAreaSize}" />
    <Setter Property="MinHeight" Value="{StaticResource RadioStatesAreaSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Grid x:Name="RootGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="HoverAndPressRing.Opacity" Value="{StaticResource HoverOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="HoverAndPressRing.Opacity" Value="{StaticResource PressedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="RootGrid.Opacity" Value="{StaticResource DisabledOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition To="PointerOver" GeneratedDuration="{StaticResource MaterialAnimationDuration}" GeneratedEasingFunction="{StaticResource MaterialEaseInOutFunction}" />
                  <VisualTransition To="Pressed" GeneratedDuration="{StaticResource MaterialAnimationDuration}" GeneratedEasingFunction="{StaticResource MaterialEaseInOutFunction}" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="CheckEllipse.Opacity" Value="1" />
                    <Setter Target="OuterEllipse_Checked.Opacity" Value="1" />
                    <Setter Target="OuterEllipse_Unchecked.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Unchecked" />
                <VisualState x:Name="Indeterminate" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusRing.Opacity" Value="{StaticResource FocusedOpacity}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="{StaticResource RadioStatesAreaLength}" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Ellipse x:Name="FocusRing" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{StaticResource RadioStatesAreaSize}" Height="{StaticResource RadioStatesAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" Opacity="0" />
            <Ellipse x:Name="HoverAndPressRing" HorizontalAlignment="Center" VerticalAlignment="Center" Width="{StaticResource RadioStatesAreaSize}" Height="{StaticResource RadioStatesAreaSize}" Fill="{TemplateBinding Background}" IsHitTestVisible="False" Opacity="0" />
            <Grid Height="{StaticResource RadioCheckAreaSize}" Width="{StaticResource RadioCheckAreaSize}">
              <Ellipse x:Name="OuterEllipse_Checked" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill" UseLayoutRounding="False" Stroke="{TemplateBinding Background}" StrokeThickness="{StaticResource RadioBorderThickness}" Opacity="0" />
              <Ellipse x:Name="OuterEllipse_Unchecked" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill" UseLayoutRounding="False" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{StaticResource RadioBorderThickness}" />
              <Ellipse x:Name="CheckEllipse" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill" UseLayoutRounding="False" Fill="{TemplateBinding Background}" Opacity="0" Margin="5" />
            </Grid>
            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" TextWrapping="Wrap" Grid.Column="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSecondaryRadioButtonStyle" TargetType="RadioButton" BasedOn="{StaticResource MaterialRadioButtonStyle}">
    <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
  </Style>
  <!--origin: Styles\Controls\v2\Ripple.xaml-->
  <Style TargetType="um:Ripple">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Feedback" Value="{StaticResource BackgroundBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="um:Ripple">
          <Grid Background="Transparent" Margin="{TemplateBinding Margin}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <!--Uncomment for hover effect-->
                <!--<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ScaleTransform.ScaleX"
												Value="1" />
										<Setter Target="ScaleTransform.ScaleY"
												Value="1" />
										<Setter Target="ClickEllipse.Opacity"
												Value="0.75" />
									</VisualState.Setters>
								</VisualState>-->
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.225" From="0" To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSizeMultiplier}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.225" From="0" To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSizeMultiplier}">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <win:DoubleAnimationUsingKeyFrames Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:0.075" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                      </EasingDoubleKeyFrame>
                    </win:DoubleAnimationUsingKeyFrames>
                    <not_win:DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" Duration="0:0:0.075" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </not_win:DoubleAnimation>
                    <not_win:DoubleAnimation Storyboard.TargetName="ClickEllipse" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" BeginTime="0:0:0.6" From="1" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseOut" />
                      </DoubleAnimation.EasingFunction>
                    </not_win:DoubleAnimation>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTransitions="{TemplateBinding ContentTransitions}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <Canvas IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="{TemplateBinding FeedbackOpacity}">
              <Ellipse x:Name="ClickEllipse" Fill="{TemplateBinding Feedback}" Opacity="0" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}" Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}" RenderTransformOrigin=".5,.5">
                <Ellipse.RenderTransform>
                  <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                </Ellipse.RenderTransform>
              </Ellipse>
            </Canvas>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\Slider.xaml-->
  <SolidColorBrush x:Key="MaterialSliderTrackBrush" Color="{ThemeResource MaterialSliderTrackColor}" />
  <StaticResource x:Key="MaterialSliderTickBarFill" ResourceKey="OnSecondaryLowBrush" />
  <StaticResource x:Key="MaterialSliderTickBarFillDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
  <StaticResource x:Key="MaterialSliderInlineTickBarFill" ResourceKey="SystemControlBackgroundAltHighBrush" />
  <StaticResource x:Key="MaterialSliderThumbBackgroundDisabled" ResourceKey="SystemControlDisabledChromeDisabledHighBrush" />
  <Style x:Key="MaterialSliderThumbStyle" TargetType="Thumb">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialSliderStyle" TargetType="Slider">
    <Setter Property="Background" Value="{StaticResource MaterialSliderTrackBrush}" />
    <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource ControlContentThemeFontSize}" />
    <Setter Property="ManipulationMode" Value="None" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-7,0,-7,0" />
    <Setter Property="IsFocusEngagementEnabled" Value="True" />
    <not_win:Setter Property="CornerRadius" Value="{StaticResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Slider">
          <Grid Margin="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalDecreaseRect" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalDecreaseRect" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderThumbBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TopTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BottomTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LeftTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RightTickBar" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialSliderTickBarFillDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusEngagementStates">
                <VisualState x:Name="FocusDisengaged" />
                <VisualState x:Name="FocusEngagedHorizontal">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SliderContainer" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HorizontalThumb" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="True" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="FocusEngagedVertical">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SliderContainer" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="False" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="VerticalThumb" Storyboard.TargetProperty="(Control.IsTemplateFocusTarget)">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="True" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <!--  SliderContainer  -->
            <Grid x:Name="SliderContainer" Grid.Row="1" Background="Transparent" Control.IsTemplateFocusTarget="True">
              <!--  HorizontalTemplate  -->
              <Grid x:Name="HorizontalTemplate" MinHeight="32">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="15" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="15" />
                </Grid.RowDefinitions>
                <!--  HorizontalTrackRect  -->
                <Rectangle x:Name="HorizontalTrackRect" Grid.Row="1" Grid.ColumnSpan="3" Height="2" Fill="{TemplateBinding Background}" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <!--  HorizontalDecreaseRect  -->
                <Rectangle x:Name="HorizontalDecreaseRect" Grid.Row="1" Fill="{TemplateBinding Foreground}" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <!--  TopTickBar  -->
                <TickBar x:Name="TopTickBar" Grid.ColumnSpan="3" Height="4" Margin="0,0,0,4" VerticalAlignment="Bottom" Fill="{StaticResource MaterialSliderTickBarFill}" Visibility="Collapsed" />
                <!--  HorizontalInlineTickBar  -->
                <TickBar x:Name="HorizontalInlineTickBar" Grid.Row="1" Grid.ColumnSpan="3" Height="2" Fill="{StaticResource MaterialSliderInlineTickBarFill}" Visibility="Collapsed" />
                <!--  BottomTickBar  -->
                <TickBar x:Name="BottomTickBar" Grid.Row="2" Grid.ColumnSpan="3" Height="4" Margin="0,4,0,0" VerticalAlignment="Top" Fill="{StaticResource MaterialSliderTickBarFill}" Visibility="Collapsed" />
                <!--  HorizontalThumb  -->
                <Thumb x:Name="HorizontalThumb" Grid.Row="0" Grid.RowSpan="3" Grid.Column="1" Width="12" Height="12" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Foreground}" DataContext="{TemplateBinding Value}" FocusVisualMargin="-14,-6,-14,-6" Style="{StaticResource MaterialSliderThumbStyle}" />
              </Grid>
              <!--  VerticalTemplate  -->
              <Grid x:Name="VerticalTemplate" MinWidth="32" Visibility="Collapsed">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="15" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="15" />
                </Grid.ColumnDefinitions>
                <!--  VerticalTrackRect  -->
                <Rectangle x:Name="VerticalTrackRect" Grid.RowSpan="3" Grid.Column="1" Width="2" Fill="{TemplateBinding Background}" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <!--  VerticalDecreaseRect  -->
                <Rectangle x:Name="VerticalDecreaseRect" Grid.Row="2" Grid.Column="1" Fill="{TemplateBinding Foreground}" RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                <!--  LeftTickBar  -->
                <TickBar x:Name="LeftTickBar" Grid.RowSpan="3" Width="4" Margin="0,0,4,0" HorizontalAlignment="Right" Fill="{StaticResource MaterialSliderTickBarFill}" Visibility="Collapsed" />
                <!--  VerticalInlineTickBar  -->
                <TickBar x:Name="VerticalInlineTickBar" Grid.RowSpan="3" Grid.Column="1" Width="2" Fill="{StaticResource MaterialSliderInlineTickBarFill}" Visibility="Collapsed" />
                <!--  RightTickBar  -->
                <TickBar x:Name="RightTickBar" Grid.RowSpan="3" Grid.Column="2" Width="4" Margin="4,0,0,0" HorizontalAlignment="Left" Fill="{StaticResource MaterialSliderTickBarFill}" Visibility="Collapsed" />
                <!--  VerticalThumb  -->
                <Thumb x:Name="VerticalThumb" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Width="12" Height="12" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Foreground}" DataContext="{TemplateBinding Value}" FocusVisualMargin="-6,-14,-6,-14" Style="{StaticResource MaterialSliderThumbStyle}" />
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\TextBlock.xaml-->
  <Style x:Key="MaterialBaseTextBlockStyle" TargetType="TextBlock">
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
  </Style>
  <Style x:Key="MaterialDisplayLarge" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialDisplayLargeFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialDisplayLargeFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialDisplayLargeFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialDisplayLargeCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialDisplayMedium" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialDisplayMediumFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialDisplayMediumFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialDisplayMediumFontSize}" />
  </Style>
  <Style x:Key="MaterialDisplaySmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialDisplaySmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialDisplaySmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialDisplaySmallFontSize}" />
  </Style>
  <Style x:Key="MaterialHeadlineLarge" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialHeadlineLargeFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialHeadlineLargeFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialHeadlineLargeFontSize}" />
  </Style>
  <Style x:Key="MaterialHeadlineMedium" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialHeadlineMediumFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialHeadlineMediumFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialHeadlineMediumFontSize}" />
  </Style>
  <Style x:Key="MaterialHeadlineSmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialHeadlineSmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialHeadlineSmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialHeadlineSmallFontSize}" />
  </Style>
  <Style x:Key="MaterialTitleLarge" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialTitleLargeFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialTitleLargeFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTitleLargeFontSize}" />
  </Style>
  <Style x:Key="MaterialTitleMedium" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialTitleMediumFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialTitleMediumFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTitleMediumFontSize}" />
  </Style>
  <Style x:Key="MaterialTitleSmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialTitleSmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialTitleSmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTitleSmallFontSize}" />
  </Style>
  <Style x:Key="MaterialLabelLarge" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialLabelLargeFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialLabelLargeFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialLabelLargeFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialLabelLargeCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialLabelMedium" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialLabelMediumFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialLabelMediumFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialLabelMediumFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialLabelMediumCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialLabelSmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialLabelSmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialLabelSmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialLabelSmallFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialLabelSmallCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialLabelExtraSmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialLabelExtraSmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialLabelExtraSmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialLabelExtraSmallFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialLabelExtraSmallCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialBodyLarge" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialBodyLargeFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialBodyLargeFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBodyLargeFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialBodyLargeCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialBodyMedium" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialBodyMediumFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialBodyMediumFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBodyMediumFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialBodyMediumCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialBodySmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialBodySmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialBodySmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialBodySmallFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialBodySmallCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialCaptionLarge" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialCaptionLargeFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialCaptionLargeFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialCaptionLargeFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialCaptionLargeCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialCaptionMedium" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialCaptionMediumFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialCaptionMediumFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialCaptionMediumFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialCaptionMediumCharacterSpacing}" />
  </Style>
  <Style x:Key="MaterialCaptionSmall" BasedOn="{StaticResource MaterialBaseTextBlockStyle}" TargetType="TextBlock">
    <Setter Property="FontFamily" Value="{StaticResource MaterialCaptionSmallFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialCaptionSmallFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialCaptionSmallFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialCaptionSmallCharacterSpacing}" />
  </Style>
  <!--origin: Styles\Controls\v2\TextBox.xaml-->
  <um:FromEmptyStringToValueConverter x:Key="EmptyToCompositeTransformTranslateY" NotNullOrEmptyValue="8" NullOrEmptyValue="0" />
  <x:String x:Key="M3ClearGlyphPathData">M10 0C4.47 0 0 4.47 0 10C0 15.53 4.47 20 10 20C15.53 20 20 15.53 20 10C20 4.47 15.53 0 10 0ZM10 18C5.59 18 2 14.41 2 10C2 5.59 5.59 2 10 2C14.41 2 18 5.59 18 10C18 14.41 14.41 18 10 18ZM10 8.59L13.59 5L15 6.41L11.41 10L15 13.59L13.59 15L10 11.41L6.41 15L5 13.59L8.59 10L5 6.41L6.41 5L10 8.59Z</x:String>
  <SolidColorBrush x:Key="MaterialDisabledOutlinedTextBoxBorderBrush" Opacity="0.12" Color="{ThemeResource OnSurfaceColor}" />
  <StaticResource x:Key="MaterialTextBoxFontFamily" ResourceKey="MaterialBodyLargeFontFamily" />
  <StaticResource x:Key="MaterialTextBoxFontWeight" ResourceKey="MaterialBodyLargeFontWeight" />
  <StaticResource x:Key="MaterialTextBoxFontSize" ResourceKey="MaterialBodyLargeFontSize" />
  <StaticResource x:Key="MaterialTextBoxCharacterSpacing" ResourceKey="MaterialBodyLargeCharacterSpacing" />
  <Style x:Key="MaterialDeleteButtonStyle" TargetType="Button">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="ButtonLayoutGrid" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ButtonLayoutGrid.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="GlyphElement" Data="{StaticResource M3ClearGlyphPathData}" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Width="18" Height="18" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialFilledTextBoxStyle" TargetType="TextBox">
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceVariantBrush}" />
    <Setter Property="PlaceholderForeground" Value="{StaticResource OnSurfaceVariantBrush}" />
    <Setter Property="Background" Value="{StaticResource SurfaceVariantBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceLowBrush}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="CornerRadius" Value="4,4,0,0" />
    <!-- Start: Body Large Typo -->
    <Setter Property="FontFamily" Value="{StaticResource MaterialTextBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialTextBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTextBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialTextBoxCharacterSpacing}" />
    <!-- End: Body Large Typo -->
    <macos:Setter Property="Padding" Value="16,7" />
    <not_macos:Setter Property="Padding" Value="16" />
    <Setter Property="MinHeight" Value="58" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="NormalBorder.Height" Value="2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="ContentElement.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                    <Setter Target="Root.Background" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="NormalBorder.Height" Value="2" />
                    <Setter Target="NormalBorder.Fill" Value="{StaticResource PrimaryBrush}" />
                  </VisualState.Setters>
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="FocusedBorder_ScaleTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="1" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="DeleteButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
                    <DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Padding="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Margin="0,0,8,0" MaxHeight="34" MaxWidth="34" MinWidth="25" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
              <ScrollViewer x:Name="ContentElement" Grid.Column="1" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}" not_macos:VerticalAlignment="Top" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" ZoomMode="Disabled" AutomationProperties.AccessibilityView="Raw">
                <ScrollViewer.RenderTransform>
                  <CompositeTransform x:Name="ContentElement_CompositeTransform" />
                </ScrollViewer.RenderTransform>
              </ScrollViewer>
              <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock.RenderTransform>
                  <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
                </TextBlock.RenderTransform>
              </TextBlock>
              <Button x:Name="DeleteButton" Grid.Column="2" Margin="8,0,0,0" Foreground="{StaticResource OnSurfaceVariantBrush}" IsTabStop="False" Style="{StaticResource MaterialDeleteButtonStyle}" VerticalAlignment="Stretch" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" />
            </Grid>
            <Rectangle x:Name="NormalBorder" Fill="{TemplateBinding BorderBrush}" Height="{StaticResource TextBoxOutlinedStrokeHeight}" VerticalAlignment="Bottom" />
            <Rectangle x:Name="FocusedBorder" Fill="{StaticResource PrimaryBrush}" Height="{StaticResource TextBoxFocusStrokeWidth}" VerticalAlignment="Bottom" not_macos:RenderTransformOrigin="0.5,0.5" macos:RenderTransformOrigin="0.0,0.5">
              <Rectangle.RenderTransform>
                <ScaleTransform x:Name="FocusedBorder_ScaleTransform" ScaleX="0" />
              </Rectangle.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialOutlinedTextBoxStyle" TargetType="TextBox">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{StaticResource OnSurfaceBrush}" />
    <Setter Property="PlaceholderForeground" Value="{StaticResource OnSurfaceLowBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource OnSurfaceLowBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="4" />
    <!-- Start: Body Large Typo -->
    <Setter Property="FontFamily" Value="{StaticResource MaterialTextBoxFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialTextBoxFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialTextBoxFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialTextBoxCharacterSpacing}" />
    <!-- End: Body Large Typo -->
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <macos:Setter Property="Padding" Value="16,7,14,7" />
    <not_macos:Setter Property="Padding" Value="16,16,14,16" />
    <Setter Property="MinHeight" Value="56" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.Icon" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource OnSurfaceBrush}" />
                    <Setter Target="Root.BorderThickness" Value="2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource OnSurfaceDisabledLowBrush}" />
                    <Setter Target="ContentElement.Opacity" Value="{StaticResource DisabledOpacity}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="Root.BorderBrush" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="PlaceholderElement.Foreground" Value="{StaticResource PrimaryBrush}" />
                    <Setter Target="Root.BorderThickness" Value="2" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="DeleteButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderStates">
                <VisualState x:Name="NotEmpty">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="-11" />
                    <!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
                    <DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform" Storyboard.TargetProperty="TranslateY" Duration="{StaticResource MaterialAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="{Binding PlaceholderText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyToCompositeTransformTranslateY}, TargetNullValue=0, FallbackValue=0}" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleX" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                    <DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform" Storyboard.TargetProperty="ScaleY" Duration="{StaticResource MaterialTextBoxAnimationDuration}" EasingFunction="{StaticResource MaterialEaseInOutFunction}" To="0.7" />
                  </Storyboard>
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToFalse}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="Empty">
                  <VisualState.StateTriggers>
                    <StateTrigger IsActive="{Binding Text, Converter={StaticResource MaterialEmptyToTrue}, RelativeSource={RelativeSource TemplatedParent}}" />
                  </VisualState.StateTriggers>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center" Width="20" Margin="1,0,18,0" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Path=(um:ControlExtensions.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialNullToCollapsedConverter}, FallbackValue=Collapsed, TargetNullValue=Collapsed}" />
            <ScrollViewer x:Name="ContentElement" Grid.Column="1" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsTabStop="False" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}" not_macos:VerticalAlignment="Top" ZoomMode="Disabled" AutomationProperties.AccessibilityView="Raw">
              <ScrollViewer.RenderTransform>
                <CompositeTransform x:Name="ContentElement_CompositeTransform" />
              </ScrollViewer.RenderTransform>
            </ScrollViewer>
            <TextBlock x:Name="PlaceholderElement" Grid.Column="1" Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" RenderTransformOrigin="0,0.5" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" not_macos:VerticalAlignment="Top" macos:VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <TextBlock.RenderTransform>
                <CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
              </TextBlock.RenderTransform>
            </TextBlock>
            <Button x:Name="DeleteButton" Grid.Column="2" Margin="8,0,0,0" IsTabStop="False" Style="{StaticResource MaterialDeleteButtonStyle}" VerticalAlignment="Stretch" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\ToggleButton.xaml-->
  <SolidColorBrush x:Key="MaterialToggleButtonTextLabelBrush" Color="{ThemeResource PrimaryColor}" />
  <StaticResource x:Key="MaterialToggleButtonForegroundThemeBrush" ResourceKey="OnSurfaceBrush" />
  <CornerRadius x:Key="MaterialToggleButtonBorderRadius">4</CornerRadius>
  <x:Double x:Key="MaterialToggleButtonFontSize">14</x:Double>
  <Thickness x:Key="MaterialToggleButtonPadding">16,8</Thickness>
  <Style x:Key="MaterialTextToggleButtonStyle" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleButtonTextLabelBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="{ThemeResource MaterialToggleButtonPadding}" />
    <Setter Property="CornerRadius" Value="{StaticResource MaterialToggleButtonBorderRadius}" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="FontFamily" Value="{ThemeResource MaterialRegularFontFamily}" />
    <Setter Property="FontSize" Value="{ThemeResource MaterialToggleButtonFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" From="0" To="1">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </VisualState>
                <xamarin:VisualState x:Name="Pressed">
                  <!-- https://github.com/unoplatform/uno/issues/5099 -->
                  <VisualState.Setters>
                    <Setter Target="HoverOverlay.Opacity" Value="0" />
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </xamarin:VisualState>
                <win:VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation Storyboard.TargetName="FocusedOverlay" Storyboard.TargetProperty="Opacity" Duration="{StaticResource MaterialAnimationDuration}" To="0">
                      <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseIn" />
                      </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                  </Storyboard>
                </win:VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="FocusedOverlay.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Border for PointedOver State -->
            <Border x:Name="HoverOverlay" Background="{StaticResource OnSurfaceHoverBrush}" Opacity="0" />
            <!-- Border for Focus State -->
            <Border x:Name="FocusedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!-- Border for Dragged/Selected State -->
            <!-- Todo: Add ElevatedView on Dragged/Selected state of button -->
            <Border x:Name="SelectedOverlay" Background="{StaticResource OnSurfaceFocusedBrush}" Opacity="0" />
            <!-- Ripple effect -->
            <um:Ripple x:Name="ContentPresenter" Feedback="{StaticResource OnSurfaceFocusedBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{TemplateBinding CornerRadius}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MaterialIconToggleButtonStyle" TargetType="ToggleButton">
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleButtonForegroundThemeBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <!-- Workaround for WinUI issue: https://github.com/microsoft/microsoft-ui-xaml/issues/6388 -->
    <Setter Property="um:ControlExtensions.AlternateContent" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="ContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="HoverOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="PressedOverlay.Opacity" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="AlternateContentPresenter.Visibility" Value="Visible" />
                    <Setter Target="AlternateContentPresenter.Foreground" Value="{StaticResource OnSurfaceLowBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Ellipse for PointedOver State -->
            <Ellipse x:Name="HoverOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryHoverBrush}" Opacity="0" />
            <!-- Ellipse for Pressed State -->
            <Ellipse x:Name="PressedOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource PrimaryPressedBrush}" Opacity="0" />
            <!-- Content -->
            <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{TemplateBinding Content}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            <!-- Alternate Content -->
            <ContentPresenter x:Name="AlternateContentPresenter" AutomationProperties.AccessibilityView="Raw" Content="{Binding Path=(um:ControlExtensions.AlternateContent), RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--origin: Styles\Controls\v2\ToggleSwitch.xaml-->
  <StaticResource x:Key="MaterialToggleSwitchOnButtonBrush" ResourceKey="PrimaryBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOnBackgroundBrush" ResourceKey="PrimaryVariantLightBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOffButtonBrush" ResourceKey="OnPrimaryBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOffBackgroundBrush" ResourceKey="OnSurfaceLowBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOnLowButtonBrush" ResourceKey="OnSurfaceSelectedBrush" />
  <StaticResource x:Key="MaterialToggleSwitchOnLowBackgroundBrush" ResourceKey="OnSurfaceSelectedBrush" />
  <SolidColorBrush x:Key="MaterialPrimaryVariantLowThumbColorBrush" Color="{ThemeResource MaterialPrimaryVariantLowThumbColor}" />
  <StaticResource x:Key="MaterialToggleSwitchFontFamily" ResourceKey="MaterialBodySmallFontFamily" />
  <StaticResource x:Key="MaterialToggleSwitchFontWeight" ResourceKey="MaterialBodySmallFontWeight" />
  <StaticResource x:Key="MaterialToggleSwitchFontSize" ResourceKey="MaterialBodySmallFontSize" />
  <StaticResource x:Key="MaterialToggleSwitchCharacterSpacing" ResourceKey="MaterialBodySmallCharacterSpacing" />
  <not_mobile:Style x:Key="MaterialToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleSwitchOnButtonBrush}" />
    <Setter Property="Background" Value="{StaticResource MaterialToggleSwitchOnBackgroundBrush}" />
    <!--Start: Body Small Typo-->
    <Setter Property="FontFamily" Value="{StaticResource MaterialToggleSwitchFontFamily}" />
    <Setter Property="FontWeight" Value="{StaticResource MaterialToggleSwitchFontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource MaterialToggleSwitchFontSize}" />
    <Setter Property="CharacterSpacing" Value="{StaticResource MaterialToggleSwitchCharacterSpacing}" />
    <!--End: Body Small Typo-->
    <!--  microsoft/microsoft-ui-xaml#6157: reset min-width inherited from base style  -->
    <Setter Property="MinWidth" Value="54" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="ManipulationMode" Value="System,TranslateX" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <Grid Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="SwitchKnobOnShadow.Opacity" Value="0.1" />
                    <Setter Target="SwitchKnobOffShadow.Opacity" Value="0.1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0.3" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0.3" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowBackgroundBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowBackgroundBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOffButtonBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOffButtonBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffStateOverlay" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowButtonBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnStateOverlay" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource MaterialToggleSwitchOnLowButtonBrush}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="SwitchKnobOnShadow.Opacity" Value="0.2" />
                    <Setter Target="SwitchKnobOffShadow.Opacity" Value="0.2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
                <VisualState x:Name="Unfocused">
                  <VisualState.Setters>
                    <Setter Target="SwitchKnobOnShadow.Opacity" Value="0" />
                    <Setter Target="SwitchKnobOffShadow.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ToggleStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition x:Name="DraggingToOnTransition" GeneratedDuration="0" From="Dragging" To="On">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnStateOverlay" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffStateOverlay" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition x:Name="DraggingToOffTransition" GeneratedDuration="0" From="Dragging" To="Off">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition x:Name="OnToOffTransition" GeneratedDuration="0" From="On" To="Off">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition x:Name="OffToOnTransition" GeneratedDuration="0" From="Off" To="On">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnStateOverlay" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffStateOverlay" Storyboard.TargetProperty="Opacity">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Dragging" />
                <VisualState x:Name="Off">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="On">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="KnobTranslateTransform" Storyboard.TargetProperty="X" To="14" Duration="0" />
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffShadow" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterBorder" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOn" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOnStateOverlay" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="1" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOff" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="SwitchKnobOffStateOverlay" Storyboard.TargetProperty="Opacity">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="0" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <!-- No notion of OnContent and OffContent for Material -->
              <VisualStateGroup x:Name="ContentStates">
                <VisualState x:Name="OffContent" />
                <VisualState x:Name="OnContent" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock Foreground="{StaticResource OnSurfaceMediumBrush}" Style="{StaticResource BodySmall}" Text="{TemplateBinding Header}" Margin="0,0,12,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding Header, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, TargetNullValue=Collapsed}" />
            <Grid Grid.ColumnSpan="3" Control.IsTemplateFocusTarget="True" />
            <!--  Marker element used to compute draggable zone  -->
            <Rectangle Grid.Column="2" x:Name="SwitchKnobBounds" />
            <Rectangle x:Name="OuterBorder" Grid.Column="2" Width="34" Height="14" Margin="10,0" Fill="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" RadiusX="7" RadiusY="7" />
            <Rectangle x:Name="HighlightBorder" Grid.Column="2" Width="34" Height="14" Margin="10,0" Fill="{TemplateBinding Background}" Opacity="0" RadiusX="7" RadiusY="7" />
            <Grid x:Name="SwitchKnob" Grid.Column="2" Width="40" Height="40" HorizontalAlignment="Left">
              <Grid.RenderTransform>
                <TranslateTransform x:Name="KnobTranslateTransform" />
              </Grid.RenderTransform>
              <Ellipse x:Name="SwitchKnobOnShadow" Width="40" Height="40" Fill="{TemplateBinding Foreground}" Opacity="0" Visibility="Collapsed" />
              <Ellipse x:Name="SwitchKnobOffShadow" Width="40" Height="40" Fill="#FF808080" Opacity="0" />
              <toolkit:ElevatedView Width="20" Height="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" CornerRadius="10" Elevation="4">
                <Grid>
                  <Ellipse x:Name="SwitchKnobOn" Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0" />
                  <Ellipse x:Name="SwitchKnobOnStateOverlay" Width="20" Height="20" Opacity="0" />
                  <Ellipse x:Name="SwitchKnobOff" Width="20" Height="20" Fill="{StaticResource MaterialToggleSwitchOffButtonBrush}" />
                  <Ellipse x:Name="SwitchKnobOffStateOverlay" Width="20" Height="20" />
                </Grid>
              </toolkit:ElevatedView>
            </Grid>
            <Thumb x:Name="SwitchThumb" Grid.Column="2" AutomationProperties.AccessibilityView="Raw">
              <Thumb.Template>
                <ControlTemplate TargetType="Thumb">
                  <Rectangle Fill="Transparent" />
                </ControlTemplate>
              </Thumb.Template>
            </Thumb>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </not_mobile:Style>
  <ios:Style x:Key="MaterialToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleSwitchOnButtonBrush}" />
    <!--  microsoft/microsoft-ui-xaml#6157: reset min-width inherited from base style  -->
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="Padding" Value="9,0,10,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <StackPanel Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <!--  The margin here is used to properly align the content with the UI switch  -->
            <ContentPresenter x:Name="ContentPresenter" Margin="0,8,0,5" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{StaticResource OnBackgroundBrush}" Visibility="{Binding Header, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource MaterialEmptyToCollapsed}, TargetNullValue=Collapsed}" />
            <!--  Do not add x:Name to BindableUiSwitch or else page will not load  -->
            <BindableUISwitch Background="{TemplateBinding Foreground}" Enabled="{TemplateBinding IsEnabled}" IsOn="{TemplateBinding IsOn,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                         Mode=TwoWay}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </ios:Style>
  <android:Style x:Key="MaterialToggleSwitchStyle" TargetType="ToggleSwitch">
    <Setter Property="FontFamily" Value="{StaticResource MaterialRegularFontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource MaterialToggleSwitchOnButtonBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="MinHeight" Value="25" />
    <!--  microsoft/microsoft-ui-xaml#6157: reset min-width inherited from base style  -->
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleSwitch">
          <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="SwitchGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ToggleStates">
                <VisualState x:Name="Dragging" />
                <VisualState x:Name="Off">
                  <VisualState.Setters>
                    <Setter Target="AndroidSwitch.TrackTint" Value="{StaticResource MaterialToggleSwitchOffBackgroundBrush}" />
                    <Setter Target="OnDisabledGrid.Visibility" Value="Collapsed" />
                    <Setter Target="OffDisabledGrid.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="On">
                  <VisualState.Setters>
                    <Setter Target="AndroidSwitch.TrackTint" Value="{StaticResource MaterialToggleSwitchOnBackgroundBrush}" />
                    <Setter Target="OnDisabledGrid.Visibility" Value="Visible" />
                    <Setter Target="OffDisabledGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <!--  The margin here is used to properly align the content with the UI switch  -->
            <ContentPresenter x:Name="ContentPresenter" Grid.ColumnSpan="3" VerticalAlignment="Stretch" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{StaticResource OnBackgroundBrush}" />
            <!--  TODO: fix disabled on thumbtint, using MaterialToggleSwitchOnLowButtonBrush -> OnPrimaryMedium shows a transparent opacity with android native toggleswitch  -->
            <!--  Grid is used because we can not collapse the visibility of a BindableSwitchCompat  -->
            <Grid x:Name="OnDisabledGrid" Grid.Row="1" Grid.Column="2">
              <!--  Provides a disabled state for an on switch  -->
              <BindableSwitchCompat Checked="{TemplateBinding IsOn,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" ThumbTint="{ThemeResource MaterialPrimaryVariantLowThumbColorBrush}" TrackTint="{ThemeResource MaterialToggleSwitchOnLowBackgroundBrush}" />
            </Grid>
            <!--  Grid is used because we can not collapse the visibility of a BindableSwitchCompat  -->
            <Grid x:Name="OffDisabledGrid" Grid.Row="1" Grid.Column="2">
              <!--  Provides a disabled state for an off switch  -->
              <BindableSwitchCompat Checked="{TemplateBinding IsOn,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" ThumbTint="{StaticResource MaterialPrimaryVariantLowThumbColorBrush}" TrackTint="{StaticResource MaterialToggleSwitchOnLowBackgroundBrush}" />
            </Grid>
            <!--  Grid is used because we can not collapse the visibility of a BindableSwitchCompat  -->
            <Grid x:Name="SwitchGrid" Grid.Row="1" Grid.Column="2">
              <BindableSwitchCompat x:Name="AndroidSwitch" Checked="{TemplateBinding IsOn,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                Mode=TwoWay}" Enabled="{TemplateBinding IsEnabled}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </android:Style>
  <!--origin: Styles\Controls\v2\_Resources.xaml-->
  <!--origin: Styles\Application\v2\Typography.xaml-->
  <StaticResource x:Key="MaterialDisplayLargeFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialDisplayLargeFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialDisplayLargeFontSize">57</x:Double>
  <x:Int32 x:Key="MaterialDisplayLargeCharacterSpacing">-17.857</x:Int32>
  <StaticResource x:Key="MaterialDisplayMediumFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialDisplayMediumFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialDisplayMediumFontSize">45</x:Double>
  <StaticResource x:Key="MaterialDisplaySmallFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialDisplaySmallFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialDisplaySmallFontSize">36</x:Double>
  <StaticResource x:Key="MaterialHeadlineLargeFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialHeadlineLargeFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialHeadlineLargeFontSize">32</x:Double>
  <StaticResource x:Key="MaterialHeadlineMediumFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialHeadlineMediumFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialHeadlineMediumFontSize">28</x:Double>
  <StaticResource x:Key="MaterialHeadlineSmallFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialHeadlineSmallFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialHeadlineSmallFontSize">24</x:Double>
  <StaticResource x:Key="MaterialTitleLargeFontFamily" ResourceKey="MaterialRegularFontFamily" />
  <x:String x:Key="MaterialTitleLargeFontWeight">Normal</x:String>
  <x:Double x:Key="MaterialTitleLargeFontSize">22</x:Double>
  <StaticResource x:Key="MaterialTitleMediumFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialTitleMediumFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialTitleMediumFontSize">16</x:Double>
  <StaticResource x:Key="MaterialTitleSmallFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialTitleSmallFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialTitleSmallFontSize">14</x:Double>
  <StaticResource x:Key="MaterialLabelLargeFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialLabelLargeFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialLabelLargeFontSize">14</x:Double>
  <x:Int32 x:Key="MaterialLabelLargeCharacterSpacing">7.143</x:Int32>
  <StaticResource x:Key="MaterialLabelMediumFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialLabelMediumFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialLabelMediumFontSize">12</x:Double>
  <x:Int32 x:Key="MaterialLabelMediumCharacterSpacing">41.666</x:Int32>
  <StaticResource x:Key="MaterialLabelSmallFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialLabelSmallFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialLabelSmallFontSize">11</x:Double>
  <x:Int32 x:Key="MaterialLabelSmallCharacterSpacing">45.454</x:Int32>
  <StaticResource x:Key="MaterialLabelExtraSmallFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialLabelExtraSmallFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialLabelExtraSmallFontSize">11</x:Double>
  <x:Int32 x:Key="MaterialLabelExtraSmallCharacterSpacing">7.143</x:Int32>
  <StaticResource x:Key="MaterialBodyLargeFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialBodyLargeFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialBodyLargeFontSize">16</x:Double>
  <x:Int32 x:Key="MaterialBodyLargeCharacterSpacing">9.375</x:Int32>
  <StaticResource x:Key="MaterialBodyMediumFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialBodyMediumFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialBodyMediumFontSize">14</x:Double>
  <x:Int32 x:Key="MaterialBodyMediumCharacterSpacing">17.857</x:Int32>
  <StaticResource x:Key="MaterialBodySmallFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialBodySmallFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialBodySmallFontSize">12</x:Double>
  <x:Int32 x:Key="MaterialBodySmallCharacterSpacing">33.333</x:Int32>
  <StaticResource x:Key="MaterialCaptionLargeFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialCaptionLargeFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialCaptionLargeFontSize">13</x:Double>
  <x:Int32 x:Key="MaterialCaptionLargeCharacterSpacing">-3.846</x:Int32>
  <StaticResource x:Key="MaterialCaptionMediumFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialCaptionMediumFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialCaptionMediumFontSize">12</x:Double>
  <x:Int32 x:Key="MaterialCaptionMediumCharacterSpacing">33.333</x:Int32>
  <StaticResource x:Key="MaterialCaptionSmallFontFamily" ResourceKey="MaterialMediumFontFamily" />
  <x:String x:Key="MaterialCaptionSmallFontWeight">Medium</x:String>
  <x:Double x:Key="MaterialCaptionSmallFontSize">11</x:Double>
  <x:Int32 x:Key="MaterialCaptionSmallCharacterSpacing">7.143</x:Int32>
  <!--origin: Styles\Application\Common\AnimationConstants.xaml-->
  <CubicEase x:Key="MaterialEaseInOutFunction" EasingMode="EaseInOut" />
  <CubicEase x:Key="MaterialEaseOutFunction" EasingMode="EaseOut" />
  <Duration x:Key="MaterialAnimationDuration">0:0:0.25</Duration>
  <Duration x:Key="MaterialTextBoxAnimationDuration">0:0:0.25</Duration>
  <x:String x:Key="MaterialDelayedBeginTime">0:0:0.15</x:String>
  <!--origin: Styles\Application\Common\Converters.xaml-->
  <um:FromBoolToValueConverter x:Key="MaterialTrueToVisible" TrueValue="Visible" FalseValue="Collapsed" NullValue="Collapsed" />
  <um:FromBoolToValueConverter x:Key="MaterialTrueToCollapsed" TrueValue="Collapsed" FalseValue="Visible" NullValue="Visible" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToFalse" NotNullOrEmptyValue="True" NullOrEmptyValue="False" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToTrue" NotNullOrEmptyValue="False" NullOrEmptyValue="True" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToVisible" NotNullOrEmptyValue="Collapsed" NullOrEmptyValue="Visible" />
  <um:FromEmptyStringToValueConverter x:Key="MaterialEmptyToCollapsed" NotNullOrEmptyValue="Visible" NullOrEmptyValue="Collapsed" />
  <um:FromNullToValueConverter x:Key="MaterialNullToCollapsedConverter" NotNullValue="Visible" NullValue="Collapsed" />
  <um:FromNullToValueConverter x:Key="MaterialNullToVisibleConverter" NotNullValue="Visible" NullValue="Collapsed" />
  <um:FromEmptyStringOrNullObjectToValueConverter x:Key="MaterialEmptyOrNullToVisible" NotEmptyOrNullValue="Collapsed" EmptyOrNullValue="Visible" />
  <um:FromEmptyStringOrNullObjectToValueConverter x:Key="MaterialEmptyOrNullToCollapsed" NotEmptyOrNullValue="Visible" EmptyOrNullValue="Collapsed" />
  <um:StringFormatConverter x:Key="StringFormatConverter" />
  <um:FirstCharacterConverter x:Key="FirstCharacterConverter" />
  <!--origin: Styles\Application\Common\TextBoxVariables.xaml-->
  <StaticResource x:Key="TextBoxLabelDefaultColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxLabelFocusColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <StaticResource x:Key="TextBoxIconColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <x:Double x:Key="TextBoxFocusStrokeWidth">2</x:Double>
  <SolidColorBrush x:Key="TextBoxFilledBackgroundColorBrush" Color="{ThemeResource MaterialOnSurfaceColor}" Opacity="0.12" />
  <StaticResource x:Key="TextBoxFilledIndicatorColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxFilledFocusIndicatorColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <x:Double x:Key="TextBoxOutlinedStrokeHeight">1</x:Double>
  <StaticResource x:Key="TextBoxOutlinedStrokeColorBrush" ResourceKey="MaterialOnSurfaceMediumBrush" />
  <StaticResource x:Key="TextBoxOutlinedFocusStrokeColorBrush" ResourceKey="MaterialPrimaryBrush" />
  <x:Double x:Key="TextBoxOutlinedCorderRadius">4</x:Double>
</ResourceDictionary>