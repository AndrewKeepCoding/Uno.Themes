<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:controls="using:Uno.Material.Controls"
					xmlns:toolkit="using:Uno.UI.Toolkit"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:android="http://nventive.com/android"
					xmlns:ios="http://nventive.com/ios"
					xmlns:xamarin="http://nventive.com/xamarin"
					mc:Ignorable="android ios xamarin">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="../Application/Colors.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<x:String x:Key="BackPathStyle">M9.60938 20.3906C9.86719 20.6484 10.1953 20.7891 10.582 20.7891C11.3555 20.7891 11.9766 20.1797 11.9766 19.4062C11.9766 19.0195 11.8125 18.668 11.543 18.3984L3.33984 10.3828L11.543 2.39062C11.8125 2.12109 11.9766 1.75781 11.9766 1.38281C11.9766 0.609375 11.3555 0 10.582 0C10.1953 0 9.86719 0.140625 9.60938 0.398438L0.492188 9.30469C0.164062 9.60938 0.0117188 9.98438 0 10.3945C0 10.8047 0.164062 11.1562 0.492188 11.4727L9.60938 20.3906Z</x:String>

	<Style x:Key="DefaultBackAppBarButtonStyle"
		   BasedOn="{StaticResource DefaultBackAppBarButtonStyle}"
		   TargetType="AppBarButton">
		<Setter Property="Foreground"
				Value="{StaticResource CupertinoBlueBrush}" />
		<Setter Property="Icon">
			<Setter.Value>
				<PathIcon Data="{StaticResource BackPathStyle}" />
			</Setter.Value>
		</Setter>
		<!--<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="AppBarButton">
					<StackPanel Orientation="Horizontal"
								VerticalAlignment="Center"
								HorizontalAlignment="Left">
						<Path x:Name="CheckGlyph"
							  Data="{StaticResource BackPathStyle}"
							  Fill="{TemplateBinding Foreground}"
							  Stretch="Uniform"
							  Width="12"
							  Height="21"
							  AutomationProperties.AccessibilityView="Raw" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>-->
	</Style>

	<Style x:Key="MaterialAppBarButton"
		   TargetType="AppBarButton">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="{StaticResource MaterialOnPrimaryBrush}" />
		<Setter Property="HorizontalAlignment"
				Value="Center" />
		<Setter Property="VerticalAlignment"
				Value="Center" />
		<Setter Property="IsCompact"
				Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="AppBarButton">
					<ContentPresenter x:Name="Content"
									  Content="{TemplateBinding Icon}"
									  Foreground="{TemplateBinding Foreground}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ios:ControlTemplate x:Key="NativeCommandBarTemplate"
						 TargetType="CommandBar">
		<NativeCommandBarPresenter />
	</ios:ControlTemplate>
	<android:ControlTemplate x:Key="NativeCommandBarTemplate"
							 TargetType="CommandBar">
		<NativeCommandBarPresenter />
	</android:ControlTemplate>

	<ControlTemplate x:Key="XamlCupertinoCommandBarTemplate"
					 TargetType="CommandBar">
		<!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
		<Grid x:Name="LayoutRoot"
			  win:Height="48"
			  Background="{TemplateBinding Background}">

			<Grid x:Name="ContentRoot"
				  Margin="{TemplateBinding Padding}"
				  Background="{TemplateBinding Background}"
				  Opacity="{TemplateBinding Opacity}">

				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<!-- note: NavigationCommand is an AppBarButton, not ICommand -->
				<ContentControl Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}"
								Foreground="{TemplateBinding Foreground}"
								Height="21"
								Width="12"
								IsTabStop="False" />

				<!--
					Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
					in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.
				-->
				<ContentControl x:Name="ContentControl"
								Grid.Column="1"
								Margin="16,0"
								Content="{TemplateBinding Content}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTransitions="{TemplateBinding ContentTransitions}"
								Foreground="{TemplateBinding Foreground}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								IsTabStop="False" />

				<ItemsControl x:Name="PrimaryItemsControl"
							  HorizontalAlignment="Right"
							  MinHeight="{ThemeResource AppBarThemeCompactHeight}"
							  IsTabStop="False"
							  Grid.Column="2">
					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal" />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
				</ItemsControl>
			</Grid>
		</Grid>
	</ControlTemplate>

	<Style x:Key="BaseCupertinoCommandBarStyle"
		   TargetType="CommandBar">
		<!-- Setting content to empty to avoid getting the datacontext -->
		<Setter Property="Content"
				Value="" />
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding}"
							   Style="{StaticResource Footnote}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Background"
				Value="{StaticResource CupertinoSystemBackgroundBrush}" />
		<Setter Property="Foreground"
				Value="{StaticResource CupertinoLabelBrush}" />

		<android:Setter Property="(toolkit:UIElementExtensions.Elevation)"
						Value="4" />

		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />

		<Setter Property="OverflowButtonVisibility"
				Value="Collapsed" />
		<Setter Property="IsDynamicOverflowEnabled"
				Value="False" />

		<Setter Property="Template"
				Value="{StaticResource XamlCupertinoCommandBarTemplate}" />
	</Style>

	<!-- Native CommandBar style -->
	<Style x:Key="CupertinoCommandBarStyle"
		   TargetType="CommandBar"
		   xamarin:BasedOn="{StaticResource NativeDefaultCommandBar}">
		<!-- COMMON SETTERS -->
		<Setter Property="toolkit:CommandBarExtensions.BackButtonForeground"
				Value="{StaticResource CupertinoBlueBrush}" />
		<Setter Property="Background"
				Value="{StaticResource CupertinoSystemBackgroundBrush}" />
		<Setter Property="Foreground"
				Value="{StaticResource CupertinoLabelBrush}" />

		<Setter Property="toolkit:VisibleBoundsPadding.PaddingMask"
				Value="Top" />

		<!-- Setting content to empty to avoid getting the datacontext-->
		<Setter Property="Content"
				Value="" />

		<!-- ANDROID SETTERS -->
		<android:Setter Property="toolkit:UIElementExtensions.Elevation"
						Value="4" />

		<!-- IOS SETTERS -->
		<!-- Remove the back button title (and only leave the back arrow) -->
		<ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonTitle)"
					Value="" />
		<ios:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<!-- 
						Context:
						On iOS, all pages share the same UINavigationBar instance.
						During a transition from two pages with different CommandBar colors, the shared UINavigationBar bar instance can only display one of those colors.
					
						Example:
						Page A has an opaque CommandBar and Page B has a transparent CommandBar.
						When transitioning from Page A to Page B, the shared UINavigationBar instance becomes transparent, which reveals a white space at the top of Page A.
					
						Solution:
						To circumvent this issue, we duplicate the background color of the UINavigationBar with this Border.
						Note that this only works because we're not using semi-transparent background colors (which would add up and look off). 
					-->
					<Border BorderBrush="{TemplateBinding Background}"
							BorderThickness="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}">
						<NativeCommandBarPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</ios:Setter>

		<!-- WINDOWS SETTERS -->
		<win:Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding}"
							   HorizontalAlignment="Left"
							   VerticalAlignment="Center"
							   FontWeight="Bold"
							   Margin="12,0" />
				</DataTemplate>
			</Setter.Value>
		</win:Setter>

		<win:Setter Property="Height"
					Value="40" />

		<!-- Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows. -->
		<win:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<Grid x:Name="LayoutRoot"
						  Height="{TemplateBinding Height}"
						  Background="{TemplateBinding Background}">
						<Grid x:Name="ContentRoot"
							  VerticalAlignment="Top"
							  Margin="{TemplateBinding Padding}"
							  Height="{TemplateBinding Height}"
							  Background="{TemplateBinding Background}"
							  Opacity="{TemplateBinding Opacity}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentControl x:Name="NavigationCommand"
											Grid.Column="0"
											IsTabStop="False"
											Foreground="{TemplateBinding Foreground}"
											Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}" />
							<!-- Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
								 in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate. -->
							<ContentControl x:Name="ContentControl"
											Grid.Column="1"
											HorizontalContentAlignment="Stretch"
											VerticalContentAlignment="Stretch"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Content="{TemplateBinding Content}"
											ContentTemplate="{TemplateBinding ContentTemplate}"
											Foreground="{TemplateBinding Foreground}"
											IsTabStop="False" />
							<ItemsControl x:Name="PrimaryItemsControl"
										  HorizontalAlignment="Right"
										  MinHeight="{ThemeResource AppBarThemeMinHeight}"
										  IsTabStop="False"
										  Grid.Column="2">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel Orientation="Horizontal" />
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
							</ItemsControl>
							<Rectangle x:Name="HighContrastBorder"
									   Grid.ColumnSpan="3"
									   x:DeferLoadStrategy="Lazy"
									   Visibility="Collapsed"
									   VerticalAlignment="Stretch"
									   Stroke="{ThemeResource SystemControlForegroundTransparentBrush}"
									   StrokeThickness="1" />
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</win:Setter>
	</Style>

</ResourceDictionary>
